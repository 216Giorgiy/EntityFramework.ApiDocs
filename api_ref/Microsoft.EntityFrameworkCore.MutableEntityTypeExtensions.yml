### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  commentId: T:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  id: MutableEntityTypeExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  langs:
  - csharp
  - vb
  name: MutableEntityTypeExtensions
  nameWithType: MutableEntityTypeExtensions
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MutableEntityTypeExtensions
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nExtension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class MutableEntityTypeExtensions
    content.vb: Public Module MutableEntityTypeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  id: GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDerivedTypes(IMutableEntityType)
  nameWithType: MutableEntityTypeExtensions.GetDerivedTypes(IMutableEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDerivedTypes
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all types in the model that derive from a given entity type.\n"
  example: []
  syntax:
    content: public static IEnumerable<IMutableEntityType> GetDerivedTypes(this IMutableEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDerivedTypes(entityType As IMutableEntityType) As IEnumerable(Of IMutableEntityType)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The base type to find types that derive from. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType}
      description: 'The derived types. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  id: RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: RootType(IMutableEntityType)
  nameWithType: MutableEntityTypeExtensions.RootType(IMutableEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RootType
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the root base type for a given entity type.\n"
  example: []
  syntax:
    content: public static IMutableEntityType RootType(this IMutableEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RootType(entityType As IMutableEntityType) As IMutableEntityType
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The type to find the root of. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: "\nThe root base type. If the given entity type is not a derived type, then the same entity type is returned.\n"
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: SetPrimaryKey(IMutableEntityType, IMutableProperty)
  nameWithType: MutableEntityTypeExtensions.SetPrimaryKey(IMutableEntityType, IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetPrimaryKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 44
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSets the primary key for this entity.\n"
  example: []
  syntax:
    content: public static IMutableKey SetPrimaryKey(this IMutableEntityType entityType, IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SetPrimaryKey(entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to set the key on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The primary key property. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The newly created key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrSetPrimaryKey(IMutableEntityType, IMutableProperty)
  nameWithType: MutableEntityTypeExtensions.GetOrSetPrimaryKey(IMutableEntityType, IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrSetPrimaryKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 58
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the existing primary key of an entity, or sets it if one is not defined.\n"
  example: []
  syntax:
    content: public static IMutableKey GetOrSetPrimaryKey(this IMutableEntityType entityType, IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrSetPrimaryKey(entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or set the key on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to set as the primary key if one is not already defined. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The existing or newly created key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  id: GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrSetPrimaryKey(IMutableEntityType, IReadOnlyList<IMutableProperty>)
  nameWithType: MutableEntityTypeExtensions.GetOrSetPrimaryKey(IMutableEntityType, IReadOnlyList<IMutableProperty>)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IMutableProperty>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrSetPrimaryKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the existing primary key of an entity, or sets it if one is not defined.\n"
  example: []
  syntax:
    content: public static IMutableKey GetOrSetPrimaryKey(this IMutableEntityType entityType, IReadOnlyList<IMutableProperty> properties)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrSetPrimaryKey(entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or set the key on. '
    - id: properties
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty}
      description: 'The properties to set as the primary key if one is not already defined. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The existing or newly created key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey*
  nameWithType.vb: MutableEntityTypeExtensions.GetOrSetPrimaryKey(IMutableEntityType, IReadOnlyList(Of IMutableProperty))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IMutableProperty))
  name.vb: GetOrSetPrimaryKey(IMutableEntityType, IReadOnlyList(Of IMutableProperty))
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindKey(IMutableEntityType, IProperty)
  nameWithType: MutableEntityTypeExtensions.FindKey(IMutableEntityType, IProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 83
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the primary or alternate key that is defined on the given property. Returns null if no key is defined\nfor the given property.\n"
  example: []
  syntax:
    content: public static IMutableKey FindKey(this IMutableEntityType entityType, IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindKey(entityType As IMutableEntityType, property As IProperty) As IMutableKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the key on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property that the key is defined on. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The key, or null if none is defined. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: AddKey(IMutableEntityType, IMutableProperty)
  nameWithType: MutableEntityTypeExtensions.AddKey(IMutableEntityType, IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 96
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAdds a new alternate key to this entity type.\n"
  example: []
  syntax:
    content: public static IMutableKey AddKey(this IMutableEntityType entityType, IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddKey(entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to add the alternate key to. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to use as an alternate key. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The newly created key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddKey(IMutableEntityType, IMutableProperty)
  nameWithType: MutableEntityTypeExtensions.GetOrAddKey(IMutableEntityType, IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 111
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the existing alternate key defined on a property, or creates a new one if one is not\nalready defined.\n"
  example: []
  syntax:
    content: public static IMutableKey GetOrAddKey(this IMutableEntityType entityType, IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddKey(entityType As IMutableEntityType, property As IMutableProperty) As IMutableKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or create the alternate key on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property that is used as the alternate key. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The existing or newly created alternate key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  id: GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddKey(IMutableEntityType, IReadOnlyList<IMutableProperty>)
  nameWithType: MutableEntityTypeExtensions.GetOrAddKey(IMutableEntityType, IReadOnlyList<IMutableProperty>)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IMutableProperty>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 122
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the existing alternate key defined on a set of properties, or creates a new one if one is not\nalready defined.\n"
  example: []
  syntax:
    content: public static IMutableKey GetOrAddKey(this IMutableEntityType entityType, IReadOnlyList<IMutableProperty> properties)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddKey(entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or create the alternate key on. '
    - id: properties
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty}
      description: 'The properties that are used as the alternate key. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The existing or newly created alternate key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey*
  nameWithType.vb: MutableEntityTypeExtensions.GetOrAddKey(IMutableEntityType, IReadOnlyList(Of IMutableProperty))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IMutableProperty))
  name.vb: GetOrAddKey(IMutableEntityType, IReadOnlyList(Of IMutableProperty))
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindForeignKeys(IMutableEntityType, IProperty)
  nameWithType: MutableEntityTypeExtensions.FindForeignKeys(IMutableEntityType, IProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 137
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the foreign keys defined on the given property. Only foreign keys that are defined on exactly the specified\nproperty are returned. Composite foreign keys that include the specified property are not returned.\n"
  example: []
  syntax:
    content: public static IEnumerable<IMutableForeignKey> FindForeignKeys(this IMutableEntityType entityType, IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindForeignKeys(entityType As IMutableEntityType, property As IProperty) As IEnumerable(Of IMutableForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the foreign keys on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property to find the foreign keys on. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
      description: 'The foreign keys. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  id: FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindForeignKeys(IMutableEntityType, IReadOnlyList<IProperty>)
  nameWithType: MutableEntityTypeExtensions.FindForeignKeys(IMutableEntityType, IReadOnlyList<IProperty>)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IProperty>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 148
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the foreign keys defined on the given properties. Only foreign keys that are defined on exactly the specified\nset of properties are returned.\n"
  example: []
  syntax:
    content: public static IEnumerable<IMutableForeignKey> FindForeignKeys(this IMutableEntityType entityType, IReadOnlyList<IProperty> properties)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindForeignKeys(entityType As IMutableEntityType, properties As IReadOnlyList(Of IProperty)) As IEnumerable(Of IMutableForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the foreign keys on. '
    - id: properties
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
      description: 'The properties to find the foreign keys on. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
      description: 'The foreign keys. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys*
  nameWithType.vb: MutableEntityTypeExtensions.FindForeignKeys(IMutableEntityType, IReadOnlyList(Of IProperty))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IProperty))
  name.vb: FindForeignKeys(IMutableEntityType, IReadOnlyList(Of IProperty))
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindForeignKey(IMutableEntityType, IProperty, IKey, IEntityType)
  nameWithType: MutableEntityTypeExtensions.FindForeignKey(IMutableEntityType, IProperty, IKey, IEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IKey, Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindForeignKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 165
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the foreign key for the given properties that points to a given primary or alternate key. Returns null\nif no foreign key is found.\n"
  example: []
  syntax:
    content: public static IMutableForeignKey FindForeignKey(this IMutableEntityType entityType, IProperty property, IKey principalKey, IEntityType principalEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindForeignKey(entityType As IMutableEntityType, property As IProperty, principalKey As IKey, principalEntityType As IEntityType) As IMutableForeignKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the foreign keys on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property that the foreign key is defined on. '
    - id: principalKey
      type: Microsoft.EntityFrameworkCore.Metadata.IKey
      description: 'The primary or alternate key that is referenced. '
    - id: principalEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: "\nThe entity type that the relationship targets. This may be different from the type that <em>principalKey</em>\nis defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the\nbase type of the hierarchy).\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
      description: 'The foreign key, or null if none is defined. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  id: GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetReferencingForeignKeys(IMutableEntityType)
  nameWithType: MutableEntityTypeExtensions.GetReferencingForeignKeys(IMutableEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetReferencingForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 182
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all foreign keys that target a given entity type (i.e. foreign keys where the given entity type\nis the principal).\n"
  example: []
  syntax:
    content: public static IEnumerable<IMutableForeignKey> GetReferencingForeignKeys(this IMutableEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetReferencingForeignKeys(entityType As IMutableEntityType) As IEnumerable(Of IMutableForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the foreign keys for. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
      description: 'The foreign keys that reference the given entity type. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  id: AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: AddForeignKey(IMutableEntityType, IMutableProperty, IMutableKey, IMutableEntityType)
  nameWithType: MutableEntityTypeExtensions.AddForeignKey(IMutableEntityType, IMutableProperty, IMutableKey, IMutableEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, Microsoft.EntityFrameworkCore.Metadata.IMutableKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddForeignKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 197
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAdds a new relationship to this entity.\n"
  example: []
  syntax:
    content: public static IMutableForeignKey AddForeignKey(this IMutableEntityType entityType, IMutableProperty property, IMutableKey principalKey, IMutableEntityType principalEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddForeignKey(entityType As IMutableEntityType, property As IMutableProperty, principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to add the foreign key to. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property that the foreign key is defined on. '
    - id: principalKey
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The primary or alternate key that is referenced. '
    - id: principalEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: "\nThe entity type that the relationship targets. This may be different from the type that <em>principalKey</em>\nis defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the\nbase type of the hierarchy).\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
      description: 'The newly created foreign key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  id: GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddForeignKey(IMutableEntityType, IMutableProperty, IMutableKey, IMutableEntityType)
  nameWithType: MutableEntityTypeExtensions.GetOrAddForeignKey(IMutableEntityType, IMutableProperty, IMutableKey, IMutableEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, Microsoft.EntityFrameworkCore.Metadata.IMutableKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddForeignKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 220
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets an existing relationship, or creates a new one if one is not already defined.\n"
  example: []
  syntax:
    content: public static IMutableForeignKey GetOrAddForeignKey(this IMutableEntityType entityType, IMutableProperty property, IMutableKey principalKey, IMutableEntityType principalEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddForeignKey(entityType As IMutableEntityType, property As IMutableProperty, principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or add the foreign key to. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property that the foreign key is defined on. '
    - id: principalKey
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The primary or alternate key that is referenced. '
    - id: principalEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: "\nThe entity type that the relationship targets. This may be different from the type that <em>principalKey</em>\nis defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the\nbase type of the hierarchy).\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
      description: 'The existing or newly created foreign key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  id: GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty},Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddForeignKey(IMutableEntityType, IReadOnlyList<IMutableProperty>, IMutableKey, IMutableEntityType)
  nameWithType: MutableEntityTypeExtensions.GetOrAddForeignKey(IMutableEntityType, IReadOnlyList<IMutableProperty>, IMutableKey, IMutableEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IMutableProperty>, Microsoft.EntityFrameworkCore.Metadata.IMutableKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddForeignKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 239
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets an existing relationship, or creates a new one if one is not already defined.\n"
  example: []
  syntax:
    content: public static IMutableForeignKey GetOrAddForeignKey(this IMutableEntityType entityType, IReadOnlyList<IMutableProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddForeignKey(entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty), principalKey As IMutableKey, principalEntityType As IMutableEntityType) As IMutableForeignKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or add the foreign key to. '
    - id: properties
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty}
      description: 'The properties that the foreign key is defined on. '
    - id: principalKey
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: 'The primary or alternate key that is referenced. '
    - id: principalEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: "\nThe entity type that the relationship targets. This may be different from the type that <em>principalKey</em>\nis defined on when the relationship targets a derived type in an inheritance hierarchy (since the key is defined on the\nbase type of the hierarchy).\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
      description: 'The existing or newly created foreign key. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey*
  nameWithType.vb: MutableEntityTypeExtensions.GetOrAddForeignKey(IMutableEntityType, IReadOnlyList(Of IMutableProperty), IMutableKey, IMutableEntityType)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IMutableProperty), Microsoft.EntityFrameworkCore.Metadata.IMutableKey, Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  name.vb: GetOrAddForeignKey(IMutableEntityType, IReadOnlyList(Of IMutableProperty), IMutableKey, IMutableEntityType)
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  id: FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindNavigation(IMutableEntityType, PropertyInfo)
  nameWithType: MutableEntityTypeExtensions.FindNavigation(IMutableEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindNavigation
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 257
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets a navigation property on the given entity type. Returns null if no navigation property is found.\n"
  example: []
  syntax:
    content: public static IMutableNavigation FindNavigation(this IMutableEntityType entityType, PropertyInfo propertyInfo)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindNavigation(entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableNavigation
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the navigation property on. '
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: 'The navigation property on the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
      description: 'The navigation property, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)
  id: FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindNavigation(IMutableEntityType, String)
  nameWithType: MutableEntityTypeExtensions.FindNavigation(IMutableEntityType, String)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindNavigation
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 272
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets a navigation property on the given entity type. Returns null if no navigation property is found.\n"
  example: []
  syntax:
    content: public static IMutableNavigation FindNavigation(this IMutableEntityType entityType, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindNavigation(entityType As IMutableEntityType, name As String) As IMutableNavigation
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the navigation property on. '
    - id: name
      type: System.String
      description: 'The name of the navigation property on the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
      description: 'The navigation property, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  id: GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetNavigations(IMutableEntityType)
  nameWithType: MutableEntityTypeExtensions.GetNavigations(IMutableEntityType)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetNavigations
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 280
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all navigation properties on the given entity type.\n"
  example: []
  syntax:
    content: public static IEnumerable<IMutableNavigation> GetNavigations(this IMutableEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetNavigations(entityType As IMutableEntityType) As IEnumerable(Of IMutableNavigation)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get navigation properties for. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation}
      description: 'All navigation properties on the given entity type. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  id: FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindProperty(IMutableEntityType, PropertyInfo)
  nameWithType: MutableEntityTypeExtensions.FindProperty(IMutableEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindProperty
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 295
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Gets a property on the given entity type. Returns null if no property is found.\n</p>\n<p>\n    This API only finds scalar properties and does not find navigation properties. Use\n<xref href=\"Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType%2cSystem.Reflection.PropertyInfo)\" data-throw-if-not-resolved=\"false\"></xref> to find a navigation property.\n</p>\n"
  example: []
  syntax:
    content: public static IMutableProperty FindProperty(this IMutableEntityType entityType, PropertyInfo propertyInfo)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindProperty(entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableProperty
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the property on. '
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: 'The property on the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  id: AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: AddProperty(IMutableEntityType, PropertyInfo)
  nameWithType: MutableEntityTypeExtensions.AddProperty(IMutableEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddProperty
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 309
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAdds a property to this entity.\n"
  example: []
  syntax:
    content: public static IMutableProperty AddProperty(this IMutableEntityType entityType, PropertyInfo propertyInfo)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddProperty(entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableProperty
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to add the property to. '
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: 'The corresponding property in the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The newly created property. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)
  id: GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.Type)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddProperty(IMutableEntityType, String, Type)
  nameWithType: MutableEntityTypeExtensions.GetOrAddProperty(IMutableEntityType, String, Type)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddProperty
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 326
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the property with the given name, or creates a new one if one is not already defined.\n"
  remarks: 'The returned property might not have the specified type and shadowness. '
  example: []
  syntax:
    content: public static IMutableProperty GetOrAddProperty(this IMutableEntityType entityType, string name, Type propertyType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddProperty(entityType As IMutableEntityType, name As String, propertyType As Type) As IMutableProperty
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or add the property to. '
    - id: name
      type: System.String
      description: 'The name of the property. '
    - id: propertyType
      type: System.Type
      description: 'The type of value the property will hold. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The existing or newly created property. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  id: GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddProperty(IMutableEntityType, PropertyInfo)
  nameWithType: MutableEntityTypeExtensions.GetOrAddProperty(IMutableEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddProperty
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 337
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the property with the given name, or creates a new one if one is not already defined.\n"
  remarks: 'The returned property might not have the specified type and shadowness. '
  example: []
  syntax:
    content: public static IMutableProperty GetOrAddProperty(this IMutableEntityType entityType, PropertyInfo propertyInfo)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddProperty(entityType As IMutableEntityType, propertyInfo As PropertyInfo) As IMutableProperty
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or add the property to. '
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: 'The corresponding property in the entity class. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The existing or newly created property. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindIndex(IMutableEntityType, IProperty)
  nameWithType: MutableEntityTypeExtensions.FindIndex(IMutableEntityType, IProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindIndex
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 346
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the index defined on the given property. Returns null if no index is defined.\n"
  example: []
  syntax:
    content: public static IMutableIndex FindIndex(this IMutableEntityType entityType, IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindIndex(entityType As IMutableEntityType, property As IProperty) As IMutableIndex
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to find the index on. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property to find the index on. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableIndex
      description: 'The index, or null if none is found. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: AddIndex(IMutableEntityType, IMutableProperty)
  nameWithType: MutableEntityTypeExtensions.AddIndex(IMutableEntityType, IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddIndex
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 359
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nAdds an index to this entity.\n"
  example: []
  syntax:
    content: public static IMutableIndex AddIndex(this IMutableEntityType entityType, IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddIndex(entityType As IMutableEntityType, property As IMutableProperty) As IMutableIndex
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to add the index to. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to be indexed. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableIndex
      description: 'The newly created index. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddIndex(IMutableEntityType, IMutableProperty)
  nameWithType: MutableEntityTypeExtensions.GetOrAddIndex(IMutableEntityType, IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddIndex
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 373
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the index defined on the given property or creates a new one if one is not already defined.\n"
  example: []
  syntax:
    content: public static IMutableIndex GetOrAddIndex(this IMutableEntityType entityType, IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddIndex(entityType As IMutableEntityType, property As IMutableProperty) As IMutableIndex
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or add the index to. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to be indexed. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableIndex
      description: 'The existing or newly created index. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  id: GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddIndex(IMutableEntityType, IReadOnlyList<IMutableProperty>)
  nameWithType: MutableEntityTypeExtensions.GetOrAddIndex(IMutableEntityType, IReadOnlyList<IMutableProperty>)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IMutableProperty>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddIndex
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 383
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the index defined on the given property or creates a new one if one is not already defined.\n"
  example: []
  syntax:
    content: public static IMutableIndex GetOrAddIndex(this IMutableEntityType entityType, IReadOnlyList<IMutableProperty> properties)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddIndex(entityType As IMutableEntityType, properties As IReadOnlyList(Of IMutableProperty)) As IMutableIndex
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type to get or add the index to. '
    - id: properties
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty}
      description: 'The properties to be indexed. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableIndex
      description: 'The existing or newly created index. '
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex*
  nameWithType.vb: MutableEntityTypeExtensions.GetOrAddIndex(IMutableEntityType, IReadOnlyList(Of IMutableProperty))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IMutableProperty))
  name.vb: GetOrAddIndex(IMutableEntityType, IReadOnlyList(Of IMutableProperty))
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  id: SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions
  langs:
  - csharp
  - vb
  name: SetPropertyAccessMode(IMutableEntityType, Nullable<PropertyAccessMode>)
  nameWithType: MutableEntityTypeExtensions.SetPropertyAccessMode(IMutableEntityType, Nullable<PropertyAccessMode>)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Nullable<Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetPropertyAccessMode
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableEntityTypeExtensions.cs
    startLine: 402
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Sets the <xref href=\"Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode\" data-throw-if-not-resolved=\"false\"></xref> to use for properties of this entity type.\n</p>\n<p>\n    Note that individual properties can override this access mode. The value set here will\n    be used for any property for which no override has been specified.\n</p>\n"
  example: []
  syntax:
    content: public static void SetPropertyAccessMode(this IMutableEntityType entityType, PropertyAccessMode? propertyAccessMode)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPropertyAccessMode(entityType As IMutableEntityType, propertyAccessMode As PropertyAccessMode?)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type for which to set the access mode. '
    - id: propertyAccessMode
      type: System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
      description: The <xref href="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" data-throw-if-not-resolved="false"></xref>, or null to clear the mode set.
  overload: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode*
  nameWithType.vb: MutableEntityTypeExtensions.SetPropertyAccessMode(IMutableEntityType, Nullable(Of PropertyAccessMode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Nullable(Of Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode))
  name.vb: SetPropertyAccessMode(IMutableEntityType, Nullable(Of PropertyAccessMode))
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableEntityType
  nameWithType: IMutableEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes
  isExternal: false
  name: GetDerivedTypes
  nameWithType: MutableEntityTypeExtensions.GetDerivedTypes
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetDerivedTypes
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IMutableEntityType>
  nameWithType: IEnumerable<IMutableEntityType>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType>
  nameWithType.vb: IEnumerable(Of IMutableEntityType)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)
  name.vb: IEnumerable(Of IMutableEntityType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
    name: IMutableEntityType
    nameWithType: IMutableEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
    name: IMutableEntityType
    nameWithType: IMutableEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType
  isExternal: false
  name: RootType
  nameWithType: MutableEntityTypeExtensions.RootType
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.RootType
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey
  isExternal: false
  name: SetPrimaryKey
  nameWithType: MutableEntityTypeExtensions.SetPrimaryKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPrimaryKey
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableProperty
  nameWithType: IMutableProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableKey
  nameWithType: IMutableKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey
  isExternal: false
  name: GetOrSetPrimaryKey
  nameWithType: MutableEntityTypeExtensions.GetOrSetPrimaryKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrSetPrimaryKey
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IMutableProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IMutableProperty>
  nameWithType: IReadOnlyList<IMutableProperty>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IMutableProperty>
  nameWithType.vb: IReadOnlyList(Of IMutableProperty)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  name.vb: IReadOnlyList(Of IMutableProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
    name: IMutableProperty
    nameWithType: IMutableProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
    name: IMutableProperty
    nameWithType: IMutableProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey
  isExternal: false
  name: FindKey
  nameWithType: MutableEntityTypeExtensions.FindKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindKey
- uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IProperty
  nameWithType: IProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey
  isExternal: false
  name: AddKey
  nameWithType: MutableEntityTypeExtensions.AddKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddKey
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey
  isExternal: false
  name: GetOrAddKey
  nameWithType: MutableEntityTypeExtensions.GetOrAddKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddKey
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys
  isExternal: false
  name: FindForeignKeys
  nameWithType: MutableEntityTypeExtensions.FindForeignKeys
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKeys
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IMutableForeignKey>
  nameWithType: IEnumerable<IMutableForeignKey>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey>
  nameWithType.vb: IEnumerable(Of IMutableForeignKey)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)
  name.vb: IEnumerable(Of IMutableForeignKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
    name: IMutableForeignKey
    nameWithType: IMutableForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
    name: IMutableForeignKey
    nameWithType: IMutableForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IProperty>
  nameWithType: IReadOnlyList<IProperty>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.IProperty>
  nameWithType.vb: IReadOnlyList(Of IProperty)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: IReadOnlyList(Of IProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey
  isExternal: false
  name: FindForeignKey
  nameWithType: MutableEntityTypeExtensions.FindForeignKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindForeignKey
- uid: Microsoft.EntityFrameworkCore.Metadata.IKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IKey
  nameWithType: IKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableForeignKey
  nameWithType: IMutableForeignKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys
  isExternal: false
  name: GetReferencingForeignKeys
  nameWithType: MutableEntityTypeExtensions.GetReferencingForeignKeys
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetReferencingForeignKeys
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey
  isExternal: false
  name: AddForeignKey
  nameWithType: MutableEntityTypeExtensions.AddForeignKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddForeignKey
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey
  isExternal: false
  name: GetOrAddForeignKey
  nameWithType: MutableEntityTypeExtensions.GetOrAddForeignKey
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddForeignKey
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation
  isExternal: false
  name: FindNavigation
  nameWithType: MutableEntityTypeExtensions.FindNavigation
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableNavigation
  nameWithType: IMutableNavigation
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations
  isExternal: false
  name: GetNavigations
  nameWithType: MutableEntityTypeExtensions.GetNavigations
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetNavigations
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IMutableNavigation>
  nameWithType: IEnumerable<IMutableNavigation>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation>
  nameWithType.vb: IEnumerable(Of IMutableNavigation)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation)
  name.vb: IEnumerable(Of IMutableNavigation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
    name: IMutableNavigation
    nameWithType: IMutableNavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
    name: IMutableNavigation
    nameWithType: IMutableNavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
  isExternal: true
  name: FindNavigation(IMutableEntityType, PropertyInfo)
  nameWithType: MutableEntityTypeExtensions.FindNavigation(IMutableEntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType, System.Reflection.PropertyInfo)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
    name: FindNavigation
    nameWithType: MutableEntityTypeExtensions.FindNavigation
    fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
    name: IMutableEntityType
    nameWithType: IMutableEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Reflection.PropertyInfo)
    name: FindNavigation
    nameWithType: MutableEntityTypeExtensions.FindNavigation
    fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindNavigation
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
    name: IMutableEntityType
    nameWithType: IMutableEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty
  isExternal: false
  name: FindProperty
  nameWithType: MutableEntityTypeExtensions.FindProperty
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindProperty
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty
  isExternal: false
  name: AddProperty
  nameWithType: MutableEntityTypeExtensions.AddProperty
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddProperty
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty
  isExternal: false
  name: GetOrAddProperty
  nameWithType: MutableEntityTypeExtensions.GetOrAddProperty
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddProperty
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex
  isExternal: false
  name: FindIndex
  nameWithType: MutableEntityTypeExtensions.FindIndex
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.FindIndex
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableIndex
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableIndex
  nameWithType: IMutableIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableIndex
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex
  isExternal: false
  name: AddIndex
  nameWithType: MutableEntityTypeExtensions.AddIndex
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.AddIndex
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex
  isExternal: false
  name: GetOrAddIndex
  nameWithType: MutableEntityTypeExtensions.GetOrAddIndex
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.GetOrAddIndex
- uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: PropertyAccessMode
  nameWithType: PropertyAccessMode
  fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
- uid: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode
  isExternal: false
  name: SetPropertyAccessMode
  nameWithType: MutableEntityTypeExtensions.SetPropertyAccessMode
  fullName: Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions.SetPropertyAccessMode
- uid: System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
  commentId: T:System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
  parent: System
  definition: System.Nullable`1
  name: Nullable<PropertyAccessMode>
  nameWithType: Nullable<PropertyAccessMode>
  fullName: System.Nullable<Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode>
  nameWithType.vb: Nullable(Of PropertyAccessMode)
  fullname.vb: System.Nullable(Of Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  name.vb: Nullable(Of PropertyAccessMode)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
    name: PropertyAccessMode
    nameWithType: PropertyAccessMode
    fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
    name: PropertyAccessMode
    nameWithType: PropertyAccessMode
    fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
