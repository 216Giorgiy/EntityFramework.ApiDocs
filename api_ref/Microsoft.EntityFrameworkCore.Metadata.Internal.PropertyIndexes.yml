### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  id: PropertyIndexes
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  children:
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex
  langs:
  - csharp
  - vb
  name: PropertyIndexes
  nameWithType: PropertyIndexes
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyIndexes
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
    startLine: 9
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public class PropertyIndexes
    content.vb: Public Class PropertyIndexes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  langs:
  - csharp
  - vb
  name: PropertyIndexes(Int32, Int32, Int32, Int32, Int32)
  nameWithType: PropertyIndexes.PropertyIndexes(Int32, Int32, Int32, Int32, Int32)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.PropertyIndexes(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public PropertyIndexes(int index, int originalValueIndex, int shadowIndex, int relationshipIndex, int storeGenerationIndex)
    content.vb: Public Sub New(index As Integer, originalValueIndex As Integer, shadowIndex As Integer, relationshipIndex As Integer, storeGenerationIndex As Integer)
    parameters:
    - id: index
      type: System.Int32
    - id: originalValueIndex
      type: System.Int32
    - id: shadowIndex
      type: System.Int32
    - id: relationshipIndex
      type: System.Int32
    - id: storeGenerationIndex
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index
  id: Index
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: PropertyIndexes.Index
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Index
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual int Index { get; }
    content.vb: Public Overridable ReadOnly Property Index As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex
  id: OriginalValueIndex
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  langs:
  - csharp
  - vb
  name: OriginalValueIndex
  nameWithType: PropertyIndexes.OriginalValueIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OriginalValueIndex
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
    startLine: 34
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual int OriginalValueIndex { get; }
    content.vb: Public Overridable ReadOnly Property OriginalValueIndex As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex
  id: ShadowIndex
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  langs:
  - csharp
  - vb
  name: ShadowIndex
  nameWithType: PropertyIndexes.ShadowIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ShadowIndex
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
    startLine: 40
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual int ShadowIndex { get; }
    content.vb: Public Overridable ReadOnly Property ShadowIndex As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex
  id: RelationshipIndex
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  langs:
  - csharp
  - vb
  name: RelationshipIndex
  nameWithType: PropertyIndexes.RelationshipIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationshipIndex
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual int RelationshipIndex { get; }
    content.vb: Public Overridable ReadOnly Property RelationshipIndex As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex
  id: StoreGenerationIndex
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes
  langs:
  - csharp
  - vb
  name: StoreGenerationIndex
  nameWithType: PropertyIndexes.StoreGenerationIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StoreGenerationIndex
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyIndexes.cs
    startLine: 52
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual int StoreGenerationIndex { get; }
    content.vb: Public Overridable ReadOnly Property StoreGenerationIndex As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.#ctor
  isExternal: false
  name: PropertyIndexes
  nameWithType: PropertyIndexes.PropertyIndexes
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.PropertyIndexes
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index
  isExternal: false
  name: Index
  nameWithType: PropertyIndexes.Index
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.Index
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex
  isExternal: false
  name: OriginalValueIndex
  nameWithType: PropertyIndexes.OriginalValueIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.OriginalValueIndex
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex
  isExternal: false
  name: ShadowIndex
  nameWithType: PropertyIndexes.ShadowIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.ShadowIndex
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex
  isExternal: false
  name: RelationshipIndex
  nameWithType: PropertyIndexes.RelationshipIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.RelationshipIndex
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex
  isExternal: false
  name: StoreGenerationIndex
  nameWithType: PropertyIndexes.StoreGenerationIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes.StoreGenerationIndex
