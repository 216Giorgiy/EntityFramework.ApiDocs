### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  id: LinqOperatorProvider
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.All
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Any
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Cast
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Concat
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Contains
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Count
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmpty
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmptyArg
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Distinct
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Except
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.First
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.FirstOrDefault
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupBy
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupJoin
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.InterceptExceptions
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Intersect
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Join
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Last
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LastOrDefault
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LongCount
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.MakeSequenceType(System.Type)
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OfType
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OrderBy
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Select
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SelectMany
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Single
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SingleOrDefault
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Skip
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Take
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ThenBy
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToEnumerable
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToOrdered
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToQueryable
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToSequence
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackEntities
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackGroupedEntities
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Union
  - Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Where
  langs:
  - csharp
  - vb
  name: LinqOperatorProvider
  nameWithType: LinqOperatorProvider
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LinqOperatorProvider
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class LinqOperatorProvider : ILinqOperatorProvider'
    content.vb: >-
      Public Class LinqOperatorProvider
          Implements ILinqOperatorProvider
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToEnumerable
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToEnumerable
  id: ToEnumerable
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: ToEnumerable
  nameWithType: LinqOperatorProvider.ToEnumerable
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToEnumerable
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToEnumerable
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo ToEnumerable { get; }
    content.vb: Public Overridable ReadOnly Property ToEnumerable As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToEnumerable
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToOrdered
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToOrdered
  id: ToOrdered
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: ToOrdered
  nameWithType: LinqOperatorProvider.ToOrdered
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToOrdered
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToOrdered
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 45
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo ToOrdered { get; }
    content.vb: Public Overridable ReadOnly Property ToOrdered As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToOrdered
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.InterceptExceptions
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.InterceptExceptions
  id: InterceptExceptions
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: InterceptExceptions
  nameWithType: LinqOperatorProvider.InterceptExceptions
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.InterceptExceptions
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InterceptExceptions
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo InterceptExceptions { get; }
    content.vb: Public Overridable ReadOnly Property InterceptExceptions As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.InterceptExceptions
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackEntities
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackEntities
  id: TrackEntities
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: TrackEntities
  nameWithType: LinqOperatorProvider.TrackEntities
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackEntities
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TrackEntities
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 204
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo TrackEntities { get; }
    content.vb: Public Overridable ReadOnly Property TrackEntities As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackEntities
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackGroupedEntities
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackGroupedEntities
  id: TrackGroupedEntities
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: TrackGroupedEntities
  nameWithType: LinqOperatorProvider.TrackGroupedEntities
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.TrackGroupedEntities
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TrackGroupedEntities
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 231
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo TrackGroupedEntities { get; }
    content.vb: Public Overridable ReadOnly Property TrackGroupedEntities As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackGroupedEntities
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToSequence
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToSequence
  id: ToSequence
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: ToSequence
  nameWithType: LinqOperatorProvider.ToSequence
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToSequence
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToSequence
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 292
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo ToSequence { get; }
    content.vb: Public Overridable ReadOnly Property ToSequence As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToSequence
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToQueryable
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToQueryable
  id: ToQueryable
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: ToQueryable
  nameWithType: LinqOperatorProvider.ToQueryable
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ToQueryable
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToQueryable
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 333
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo ToQueryable { get; }
    content.vb: Public Overridable ReadOnly Property ToQueryable As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToQueryable
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SelectMany
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SelectMany
  id: SelectMany
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: SelectMany
  nameWithType: LinqOperatorProvider.SelectMany
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SelectMany
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SelectMany
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 351
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo SelectMany { get; }
    content.vb: Public Overridable ReadOnly Property SelectMany As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SelectMany
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Join
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Join
  id: Join
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Join
  nameWithType: LinqOperatorProvider.Join
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Join
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Join
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 371
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Join { get; }
    content.vb: Public Overridable ReadOnly Property Join As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Join
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupJoin
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupJoin
  id: GroupJoin
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: GroupJoin
  nameWithType: LinqOperatorProvider.GroupJoin
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupJoin
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GroupJoin
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 391
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo GroupJoin { get; }
    content.vb: Public Overridable ReadOnly Property GroupJoin As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupJoin
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Select
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Select
  id: Select
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Select
  nameWithType: LinqOperatorProvider.Select
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Select
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Select
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 407
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Select { get; }
    content.vb: Public Overridable ReadOnly Property Select As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Select
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OrderBy
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OrderBy
  id: OrderBy
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: OrderBy
  nameWithType: LinqOperatorProvider.OrderBy
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OrderBy
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OrderBy
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 425
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo OrderBy { get; }
    content.vb: Public Overridable ReadOnly Property OrderBy As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OrderBy
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ThenBy
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ThenBy
  id: ThenBy
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: ThenBy
  nameWithType: LinqOperatorProvider.ThenBy
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.ThenBy
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ThenBy
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 443
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo ThenBy { get; }
    content.vb: Public Overridable ReadOnly Property ThenBy As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ThenBy
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Where
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Where
  id: Where
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Where
  nameWithType: LinqOperatorProvider.Where
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Where
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Where
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 458
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Where { get; }
    content.vb: Public Overridable ReadOnly Property Where As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Where
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Any
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Any
  id: Any
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Any
  nameWithType: LinqOperatorProvider.Any
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Any
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Any
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 477
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Any { get; }
    content.vb: Public Overridable ReadOnly Property Any As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Any
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.All
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.All
  id: All
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: All
  nameWithType: LinqOperatorProvider.All
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.All
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: All
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 483
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo All { get; }
    content.vb: Public Overridable ReadOnly Property All As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.All
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Cast
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Cast
  id: Cast
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Cast
  nameWithType: LinqOperatorProvider.Cast
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Cast
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Cast
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 489
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Cast { get; }
    content.vb: Public Overridable ReadOnly Property Cast As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Cast
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Count
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Count
  id: Count
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: LinqOperatorProvider.Count
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Count
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 495
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Contains
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Contains
  id: Contains
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Contains
  nameWithType: LinqOperatorProvider.Contains
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Contains
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Contains
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 501
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Contains { get; }
    content.vb: Public Overridable ReadOnly Property Contains As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Contains
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmpty
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmpty
  id: DefaultIfEmpty
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty
  nameWithType: LinqOperatorProvider.DefaultIfEmpty
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmpty
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DefaultIfEmpty
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 507
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo DefaultIfEmpty { get; }
    content.vb: Public Overridable ReadOnly Property DefaultIfEmpty As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmpty
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmptyArg
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmptyArg
  id: DefaultIfEmptyArg
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: DefaultIfEmptyArg
  nameWithType: LinqOperatorProvider.DefaultIfEmptyArg
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.DefaultIfEmptyArg
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DefaultIfEmptyArg
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 513
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo DefaultIfEmptyArg { get; }
    content.vb: Public Overridable ReadOnly Property DefaultIfEmptyArg As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmptyArg
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Distinct
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Distinct
  id: Distinct
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Distinct
  nameWithType: LinqOperatorProvider.Distinct
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Distinct
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Distinct
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 519
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Distinct { get; }
    content.vb: Public Overridable ReadOnly Property Distinct As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Distinct
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.First
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.First
  id: First
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: First
  nameWithType: LinqOperatorProvider.First
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.First
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: First
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 525
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo First { get; }
    content.vb: Public Overridable ReadOnly Property First As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.First
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.FirstOrDefault
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.FirstOrDefault
  id: FirstOrDefault
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: FirstOrDefault
  nameWithType: LinqOperatorProvider.FirstOrDefault
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.FirstOrDefault
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FirstOrDefault
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 531
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo FirstOrDefault { get; }
    content.vb: Public Overridable ReadOnly Property FirstOrDefault As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.FirstOrDefault
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupBy
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupBy
  id: GroupBy
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: GroupBy
  nameWithType: LinqOperatorProvider.GroupBy
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GroupBy
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GroupBy
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 546
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo GroupBy { get; }
    content.vb: Public Overridable ReadOnly Property GroupBy As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupBy
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Last
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Last
  id: Last
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Last
  nameWithType: LinqOperatorProvider.Last
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Last
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Last
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 561
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Last { get; }
    content.vb: Public Overridable ReadOnly Property Last As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Last
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LastOrDefault
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LastOrDefault
  id: LastOrDefault
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: LastOrDefault
  nameWithType: LinqOperatorProvider.LastOrDefault
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LastOrDefault
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LastOrDefault
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 567
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo LastOrDefault { get; }
    content.vb: Public Overridable ReadOnly Property LastOrDefault As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LastOrDefault
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LongCount
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LongCount
  id: LongCount
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: LongCount
  nameWithType: LinqOperatorProvider.LongCount
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.LongCount
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LongCount
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 573
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo LongCount { get; }
    content.vb: Public Overridable ReadOnly Property LongCount As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LongCount
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OfType
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OfType
  id: OfType
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: OfType
  nameWithType: LinqOperatorProvider.OfType
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.OfType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OfType
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 579
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo OfType { get; }
    content.vb: Public Overridable ReadOnly Property OfType As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OfType
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Single
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Single
  id: Single
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Single
  nameWithType: LinqOperatorProvider.Single
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Single
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Single
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 585
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Single { get; }
    content.vb: Public Overridable ReadOnly Property Single As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Single
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SingleOrDefault
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SingleOrDefault
  id: SingleOrDefault
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: SingleOrDefault
  nameWithType: LinqOperatorProvider.SingleOrDefault
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.SingleOrDefault
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SingleOrDefault
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 591
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo SingleOrDefault { get; }
    content.vb: Public Overridable ReadOnly Property SingleOrDefault As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SingleOrDefault
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Skip
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Skip
  id: Skip
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Skip
  nameWithType: LinqOperatorProvider.Skip
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Skip
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Skip
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 597
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Skip { get; }
    content.vb: Public Overridable ReadOnly Property Skip As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Skip
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Take
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Take
  id: Take
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Take
  nameWithType: LinqOperatorProvider.Take
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Take
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Take
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 603
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Take { get; }
    content.vb: Public Overridable ReadOnly Property Take As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Take
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Concat
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Concat
  id: Concat
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Concat
  nameWithType: LinqOperatorProvider.Concat
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Concat
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Concat
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 615
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Concat { get; }
    content.vb: Public Overridable ReadOnly Property Concat As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Concat
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Except
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Except
  id: Except
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Except
  nameWithType: LinqOperatorProvider.Except
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Except
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Except
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 621
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Except { get; }
    content.vb: Public Overridable ReadOnly Property Except As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Except
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Intersect
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Intersect
  id: Intersect
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Intersect
  nameWithType: LinqOperatorProvider.Intersect
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Intersect
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Intersect
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 627
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Intersect { get; }
    content.vb: Public Overridable ReadOnly Property Intersect As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Intersect
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Union
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Union
  id: Union
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: Union
  nameWithType: LinqOperatorProvider.Union
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.Union
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Union
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 633
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo Union { get; }
    content.vb: Public Overridable ReadOnly Property Union As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Union
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
  id: GetAggregateMethod(System.String,System.Type)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: GetAggregateMethod(String, Type)
  nameWithType: LinqOperatorProvider.GetAggregateMethod(String, Type)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.GetAggregateMethod(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAggregateMethod
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 639
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual MethodInfo GetAggregateMethod(string methodName, Type elementType)
    content.vb: Public Overridable Function GetAggregateMethod(methodName As String, elementType As Type) As MethodInfo
    parameters:
    - id: methodName
      type: System.String
    - id: elementType
      type: System.Type
    return:
      type: System.Reflection.MethodInfo
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.MakeSequenceType(System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.MakeSequenceType(System.Type)
  id: MakeSequenceType(System.Type)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider
  langs:
  - csharp
  - vb
  name: MakeSequenceType(Type)
  nameWithType: LinqOperatorProvider.MakeSequenceType(Type)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.LinqOperatorProvider.MakeSequenceType(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MakeSequenceType
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/LinqOperatorProvider.cs
    startLine: 658
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual Type MakeSequenceType(Type elementType)
    content.vb: Public Overridable Function MakeSequenceType(elementType As Type) As Type
    parameters:
    - id: elementType
      type: System.Type
    return:
      type: System.Type
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType(System.Type)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: ILinqOperatorProvider
  nameWithType: ILinqOperatorProvider
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToEnumerable
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToEnumerable
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: ToEnumerable
  nameWithType: ILinqOperatorProvider.ToEnumerable
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToEnumerable
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToOrdered
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToOrdered
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: ToOrdered
  nameWithType: ILinqOperatorProvider.ToOrdered
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToOrdered
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.InterceptExceptions
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.InterceptExceptions
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: InterceptExceptions
  nameWithType: ILinqOperatorProvider.InterceptExceptions
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.InterceptExceptions
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackEntities
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackEntities
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: TrackEntities
  nameWithType: ILinqOperatorProvider.TrackEntities
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackEntities
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackGroupedEntities
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackGroupedEntities
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: TrackGroupedEntities
  nameWithType: ILinqOperatorProvider.TrackGroupedEntities
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.TrackGroupedEntities
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToSequence
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToSequence
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: ToSequence
  nameWithType: ILinqOperatorProvider.ToSequence
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToSequence
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToQueryable
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToQueryable
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: ToQueryable
  nameWithType: ILinqOperatorProvider.ToQueryable
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ToQueryable
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SelectMany
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SelectMany
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: SelectMany
  nameWithType: ILinqOperatorProvider.SelectMany
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SelectMany
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Join
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Join
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Join
  nameWithType: ILinqOperatorProvider.Join
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Join
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupJoin
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupJoin
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: GroupJoin
  nameWithType: ILinqOperatorProvider.GroupJoin
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupJoin
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Select
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Select
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Select
  nameWithType: ILinqOperatorProvider.Select
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Select
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OrderBy
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OrderBy
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: OrderBy
  nameWithType: ILinqOperatorProvider.OrderBy
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OrderBy
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ThenBy
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ThenBy
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: ThenBy
  nameWithType: ILinqOperatorProvider.ThenBy
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.ThenBy
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Where
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Where
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Where
  nameWithType: ILinqOperatorProvider.Where
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Where
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Any
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Any
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Any
  nameWithType: ILinqOperatorProvider.Any
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Any
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.All
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.All
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: All
  nameWithType: ILinqOperatorProvider.All
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.All
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Cast
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Cast
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Cast
  nameWithType: ILinqOperatorProvider.Cast
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Cast
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Count
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Count
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Count
  nameWithType: ILinqOperatorProvider.Count
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Count
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Contains
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Contains
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Contains
  nameWithType: ILinqOperatorProvider.Contains
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Contains
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmpty
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmpty
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: DefaultIfEmpty
  nameWithType: ILinqOperatorProvider.DefaultIfEmpty
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmpty
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmptyArg
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmptyArg
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: DefaultIfEmptyArg
  nameWithType: ILinqOperatorProvider.DefaultIfEmptyArg
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.DefaultIfEmptyArg
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Distinct
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Distinct
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Distinct
  nameWithType: ILinqOperatorProvider.Distinct
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Distinct
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.First
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.First
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: First
  nameWithType: ILinqOperatorProvider.First
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.First
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.FirstOrDefault
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.FirstOrDefault
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: FirstOrDefault
  nameWithType: ILinqOperatorProvider.FirstOrDefault
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.FirstOrDefault
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupBy
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupBy
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: GroupBy
  nameWithType: ILinqOperatorProvider.GroupBy
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GroupBy
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Last
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Last
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Last
  nameWithType: ILinqOperatorProvider.Last
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Last
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LastOrDefault
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LastOrDefault
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: LastOrDefault
  nameWithType: ILinqOperatorProvider.LastOrDefault
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LastOrDefault
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LongCount
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LongCount
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: LongCount
  nameWithType: ILinqOperatorProvider.LongCount
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.LongCount
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OfType
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OfType
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: OfType
  nameWithType: ILinqOperatorProvider.OfType
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.OfType
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Single
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Single
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Single
  nameWithType: ILinqOperatorProvider.Single
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Single
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SingleOrDefault
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SingleOrDefault
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: SingleOrDefault
  nameWithType: ILinqOperatorProvider.SingleOrDefault
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.SingleOrDefault
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Skip
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Skip
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Skip
  nameWithType: ILinqOperatorProvider.Skip
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Skip
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Take
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Take
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Take
  nameWithType: ILinqOperatorProvider.Take
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Take
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Concat
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Concat
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Concat
  nameWithType: ILinqOperatorProvider.Concat
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Concat
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Except
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Except
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Except
  nameWithType: ILinqOperatorProvider.Except
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Except
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Intersect
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Intersect
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Intersect
  nameWithType: ILinqOperatorProvider.Intersect
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Intersect
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Union
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Union
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: false
  name: Union
  nameWithType: ILinqOperatorProvider.Union
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.Union
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: true
  name: GetAggregateMethod(String, Type)
  nameWithType: ILinqOperatorProvider.GetAggregateMethod(String, Type)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod(System.String, System.Type)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
    name: GetAggregateMethod
    nameWithType: ILinqOperatorProvider.GetAggregateMethod
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod(System.String,System.Type)
    name: GetAggregateMethod
    nameWithType: ILinqOperatorProvider.GetAggregateMethod
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.GetAggregateMethod
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType(System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType(System.Type)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  isExternal: true
  name: MakeSequenceType(Type)
  nameWithType: ILinqOperatorProvider.MakeSequenceType(Type)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType(System.Type)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType(System.Type)
    name: MakeSequenceType
    nameWithType: ILinqOperatorProvider.MakeSequenceType
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType(System.Type)
    name: MakeSequenceType
    nameWithType: ILinqOperatorProvider.MakeSequenceType
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider.MakeSequenceType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
