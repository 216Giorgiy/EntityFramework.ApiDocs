### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  id: SqlServerExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage.Internal
  children:
  - Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  - Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Instance
  - Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.RetriesOnFailure
  langs:
  - csharp
  - vb
  name: SqlServerExecutionStrategy
  nameWithType: SqlServerExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlServerExecutionStrategy
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
    startLine: 10
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore.Storage.Internal
  syntax:
    content: 'public class SqlServerExecutionStrategy : IExecutionStrategy'
    content.vb: >-
      Public Class SqlServerExecutionStrategy
          Implements IExecutionStrategy
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Instance
  id: Instance
  parent: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: SqlServerExecutionStrategy.Instance
  fullName: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Instance
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Instance
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore.Storage.Internal
  syntax:
    content: public static SqlServerExecutionStrategy Instance { get; }
    content.vb: Public Shared ReadOnly Property Instance As SqlServerExecutionStrategy
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.RetriesOnFailure
  commentId: P:Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.RetriesOnFailure
  id: RetriesOnFailure
  parent: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  langs:
  - csharp
  - vb
  name: RetriesOnFailure
  nameWithType: SqlServerExecutionStrategy.RetriesOnFailure
  fullName: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.RetriesOnFailure
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RetriesOnFailure
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore.Storage.Internal
  syntax:
    content: public virtual bool RetriesOnFailure { get; }
    content.vb: Public Overridable ReadOnly Property RetriesOnFailure As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  id: Execute``2(System.Func{``0,``1},``0)
  parent: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  langs:
  - csharp
  - vb
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: SqlServerExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore.Storage.Internal
  syntax:
    content: public virtual TResult Execute<TState, TResult>(Func<TState, TResult> operation, TState state)
    content.vb: Public Overridable Function Execute(Of TState, TResult)(operation As Func(Of TState, TResult), state As TState) As TResult
    parameters:
    - id: operation
      type: System.Func{{TState},{TResult}}
    - id: state
      type: '{TState}'
    typeParameters:
    - id: TState
    - id: TResult
    return:
      type: '{TResult}'
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{{TState},{TResult}},{TState})
  nameWithType.vb: SqlServerExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
- uid: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  id: ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: SqlServerExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Storage/Internal/SqlServerExecutionStrategy.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore.Storage.Internal
  syntax:
    content: public virtual Task<TResult> ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>> operation, TState state, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteAsync(Of TState, TResult)(operation As Func(Of TState, CancellationToken, Task(Of TResult)), state As TState, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: operation
      type: System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}}
    - id: state
      type: '{TState}'
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TState
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},{TState},System.Threading.CancellationToken)
  nameWithType.vb: SqlServerExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.Storage.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Storage.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Storage.Internal
  fullName: Microsoft.EntityFrameworkCore.Storage.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IExecutionStrategy
  nameWithType: IExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage.Internal
  isExternal: false
  name: SqlServerExecutionStrategy
  nameWithType: SqlServerExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.Internal.SqlServerExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  isExternal: false
  name: RetriesOnFailure
  nameWithType: IExecutionStrategy.RetriesOnFailure
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{{TState},{TResult}},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  definition: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: IExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  nameWithType.vb: IExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute<TState, TResult>
    nameWithType: IExecutionStrategy.Execute<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute(Of TState, TResult)
    nameWithType: IExecutionStrategy.Execute(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TState},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TState, TResult>
  nameWithType: Func<TState, TResult>
  fullName: System.Func<TState, TResult>
  nameWithType.vb: Func(Of TState, TResult)
  fullname.vb: System.Func(Of TState, TResult)
  name.vb: Func(Of TState, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  isExternal: true
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: IExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  nameWithType.vb: IExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute<TState, TResult>
    nameWithType: IExecutionStrategy.Execute<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute(Of TState, TResult)
    nameWithType: IExecutionStrategy.Execute(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},{TState},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  definition: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  nameWithType.vb: IExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState, TResult>
    nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: IExecutionStrategy.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}}
  commentId: T:System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}}
  parent: System
  definition: System.Func`3
  name: Func<TState, CancellationToken, Task<TResult>>
  nameWithType: Func<TState, CancellationToken, Task<TResult>>
  fullName: System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of TState, CancellationToken, Task(Of TResult))
  fullname.vb: System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of TState, CancellationToken, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  nameWithType.vb: IExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState, TResult>
    nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: IExecutionStrategy.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
