### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  id: EntityTypeBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  children:
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String[])
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation(System.String,System.Object)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.Type)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey(System.String[])
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.Type,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.Type,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.Type,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property``1(System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  langs:
  - csharp
  - vb
  name: EntityTypeBuilder
  nameWithType: EntityTypeBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityTypeBuilder
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Provides a simple API for configuring an <xref href=\"Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n<p>\n    Instances of this class are returned from methods when using the <xref href=\"Microsoft.EntityFrameworkCore.ModelBuilder\" data-throw-if-not-resolved=\"false\"></xref> API\n    and it is not designed to be directly constructed in your application code.\n</p>\n"
  example: []
  syntax:
    content: 'public class EntityTypeBuilder : IInfrastructure<IMutableModel>, IInfrastructure<InternalEntityTypeBuilder>'
    content.vb: >-
      Public Class EntityTypeBuilder
          Implements IInfrastructure(Of IMutableModel), IInfrastructure(Of InternalEntityTypeBuilder)
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.IMutableModel}
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(System.Boolean)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(System.String,System.Type)
  - Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  id: '#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)'
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: EntityTypeBuilder(InternalEntityTypeBuilder)
  nameWithType: EntityTypeBuilder.EntityTypeBuilder(InternalEntityTypeBuilder)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.EntityTypeBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public EntityTypeBuilder(InternalEntityTypeBuilder builder)
    content.vb: Public Sub New(builder As InternalEntityTypeBuilder)
    parameters:
    - id: builder
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  id: New(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: New(InternalEntityTypeBuilder)
  nameWithType: EntityTypeBuilder.New(InternalEntityTypeBuilder)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New(Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: New
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 39
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual EntityTypeBuilder New(InternalEntityTypeBuilder builder)
    content.vb: Protected Overridable Function New(builder As InternalEntityTypeBuilder) As EntityTypeBuilder
    parameters:
    - id: builder
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance
  id: Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance
  isEii: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: IInfrastructure<InternalEntityTypeBuilder>.Instance
  nameWithType: EntityTypeBuilder.IInfrastructure<InternalEntityTypeBuilder>.Instance
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nGets the internal builder being used to configure the entity type.\n"
  example: []
  syntax:
    content: InternalEntityTypeBuilder IInfrastructure<InternalEntityTypeBuilder>.Instance { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance As InternalEntityTypeBuilder Implements IInfrastructure(Of InternalEntityTypeBuilder).Instance
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance*
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder}.Instance
  nameWithType.vb: EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata
  id: Metadata
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: EntityTypeBuilder.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Metadata
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 52
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThe entity type being configured.\n"
  example: []
  syntax:
    content: public virtual IMutableEntityType Metadata { get; }
    content.vb: Public Overridable ReadOnly Property Metadata As IMutableEntityType
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance
  id: Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance
  isEii: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: IInfrastructure<IMutableModel>.Instance
  nameWithType: EntityTypeBuilder.IInfrastructure<IMutableModel>.Instance
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 57
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThe model that the entity type belongs to.\n"
  example: []
  syntax:
    content: IMutableModel IInfrastructure<IMutableModel>.Instance { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance As IMutableModel Implements IInfrastructure(Of IMutableModel).Instance
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance*
  implements:
  - Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.IMutableModel}.Instance
  nameWithType.vb: EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation(System.String,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation(System.String,System.Object)
  id: HasAnnotation(System.String,System.Object)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasAnnotation(String, Object)
  nameWithType: EntityTypeBuilder.HasAnnotation(String, Object)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasAnnotation
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 66
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nAdds or updates an annotation on the entity type. If an annotation with the key specified in\n<em>annotation</em> already exists it's value will be updated.\n"
  example: []
  syntax:
    content: public virtual EntityTypeBuilder HasAnnotation(string annotation, object value)
    content.vb: Public Overridable Function HasAnnotation(annotation As String, value As Object) As EntityTypeBuilder
    parameters:
    - id: annotation
      type: System.String
      description: 'The key of the annotation to be added or updated. '
    - id: value
      type: System.Object
      description: 'The value to be stored in the annotation. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple configuration calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.String)
  id: HasBaseType(System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasBaseType(String)
  nameWithType: EntityTypeBuilder.HasBaseType(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasBaseType
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nSets the base type of this entity in an inheritance hierarchy.\n"
  example: []
  syntax:
    content: public virtual EntityTypeBuilder HasBaseType(string name)
    content.vb: Public Overridable Function HasBaseType(name As String) As EntityTypeBuilder
    parameters:
    - id: name
      type: System.String
      description: 'The name of the base type. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple configuration calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.Type)
  id: HasBaseType(System.Type)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasBaseType(Type)
  nameWithType: EntityTypeBuilder.HasBaseType(Type)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType(System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasBaseType
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nSets the base type of this entity in an inheritance hierarchy.\n"
  example: []
  syntax:
    content: public virtual EntityTypeBuilder HasBaseType(Type entityType)
    content.vb: Public Overridable Function HasBaseType(entityType As Type) As EntityTypeBuilder
    parameters:
    - id: entityType
      type: System.Type
      description: 'The base type. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple configuration calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey(System.String[])
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey(System.String[])
  id: HasKey(System.String[])
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasKey(String[])
  nameWithType: EntityTypeBuilder.HasKey(String[])
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey(System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasKey
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 97
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nSets the properties that make up the primary key for this entity type.\n"
  example: []
  syntax:
    content: public virtual KeyBuilder HasKey(params string[] propertyNames)
    content.vb: Public Overridable Function HasKey(ParamArray propertyNames As String()) As KeyBuilder
    parameters:
    - id: propertyNames
      type: System.String[]
      description: 'The names of the properties that make up the primary key. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder
      description: 'An object that can be used to configure the primary key. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey*
  nameWithType.vb: EntityTypeBuilder.HasKey(String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey(System.String())
  name.vb: HasKey(String())
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String[])
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String[])
  id: HasAlternateKey(System.String[])
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasAlternateKey(String[])
  nameWithType: EntityTypeBuilder.HasAlternateKey(String[])
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasAlternateKey
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 106
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nCreates a new unique constraint for this entity type if one does not already exist over the specified\nproperties.\n"
  example: []
  syntax:
    content: public virtual KeyBuilder HasAlternateKey(params string[] propertyNames)
    content.vb: Public Overridable Function HasAlternateKey(ParamArray propertyNames As String()) As KeyBuilder
    parameters:
    - id: propertyNames
      type: System.String[]
      description: 'The names of the properties that make up the unique constraint. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder
      description: 'An object that can be used to configure the unique constraint. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey*
  nameWithType.vb: EntityTypeBuilder.HasAlternateKey(String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey(System.String())
  name.vb: HasAlternateKey(String())
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property``1(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property``1(System.String)
  id: Property``1(System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: Property<TProperty>(String)
  nameWithType: EntityTypeBuilder.Property<TProperty>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property<TProperty>(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Property
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 125
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Returns an object that can be used to configure a property of the entity type.\n    If no property with the given name exists, then a new property will be added.\n</p>\n<p>\n    When adding a new property, if a property with the same name exists in the entity class\n    then it will be added to the model. If no property exists in the entity class, then\n    a new shadow state property will be added. A shadow state property is one that does not have a\n    corresponding property in the entity class. The current value for the property is stored in\n    the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker\" data-throw-if-not-resolved=\"false\"></xref> rather than being stored in instances of the entity class.\n</p>\n"
  example: []
  syntax:
    content: public virtual PropertyBuilder<TProperty> Property<TProperty>(string propertyName)
    content.vb: Public Overridable Function Property(Of TProperty)(propertyName As String) As PropertyBuilder(Of TProperty)
    parameters:
    - id: propertyName
      type: System.String
      description: 'The name of the property to be configured. '
    typeParameters:
    - id: TProperty
      description: 'The type of the property to be configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'An object that can be used to configure the property. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property*
  nameWithType.vb: EntityTypeBuilder.Property(Of TProperty)(String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(Of TProperty)(System.String)
  name.vb: Property(Of TProperty)(String)
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.Type,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.Type,System.String)
  id: Property(System.Type,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: Property(Type, String)
  nameWithType: EntityTypeBuilder.Property(Type, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Property
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 147
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Returns an object that can be used to configure a property of the entity type.\n    If no property with the given name exists, then a new property will be added.\n</p>\n<p>\n    When adding a new property, if a property with the same name exists in the entity class\n    then it will be added to the model. If no property exists in the entity class, then\n    a new shadow state property will be added. A shadow state property is one that does not have a\n    corresponding property in the entity class. The current value for the property is stored in\n    the <xref href=\"Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker\" data-throw-if-not-resolved=\"false\"></xref> rather than being stored in instances of the entity class.\n</p>\n"
  example: []
  syntax:
    content: public virtual PropertyBuilder Property(Type propertyType, string propertyName)
    content.vb: Public Overridable Function Property(propertyType As Type, propertyName As String) As PropertyBuilder
    parameters:
    - id: propertyType
      type: System.Type
      description: 'The type of the property to be configured. '
    - id: propertyName
      type: System.String
      description: 'The name of the property to be configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'An object that can be used to configure the property. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.String)
  id: Property(System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: Property(String)
  nameWithType: EntityTypeBuilder.Property(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Property
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 166
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Returns an object that can be used to configure a property of the entity type.\n    If no property with the given name exists, then a new property will be added.\n</p>\n<p>\n    When adding a new property with this overload the property name must match the\n    name of a CLR property or field on the entity type. This overload cannot be used to\n    add a new shadow state property.\n</p>\n"
  example: []
  syntax:
    content: public virtual PropertyBuilder Property(string propertyName)
    content.vb: Public Overridable Function Property(propertyName As String) As PropertyBuilder
    parameters:
    - id: propertyName
      type: System.String
      description: 'The name of the property to be configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'An object that can be used to configure the property. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)
  id: Ignore(System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: Ignore(String)
  nameWithType: EntityTypeBuilder.Ignore(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Ignore
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 176
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nExcludes the given property from the entity type. This method is typically used to remove properties\nfrom the entity type that were added by convention.\n"
  example: []
  syntax:
    content: public virtual EntityTypeBuilder Ignore(string propertyName)
    content.vb: Public Overridable Function Ignore(propertyName As String) As EntityTypeBuilder
    parameters:
    - id: propertyName
      type: System.String
      description: 'The name of then property to be removed from the entity type. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])
  id: HasIndex(System.String[])
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasIndex(String[])
  nameWithType: EntityTypeBuilder.HasIndex(String[])
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasIndex
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 191
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nConfigures an index on the specified properties. If there is an existing index on the given\nset of properties, then the existing index will be returned for configuration.\n"
  example: []
  syntax:
    content: public virtual IndexBuilder HasIndex(params string[] propertyNames)
    content.vb: Public Overridable Function HasIndex(ParamArray propertyNames As String()) As IndexBuilder
    parameters:
    - id: propertyNames
      type: System.String[]
      description: 'The names of the properties that make up the index. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder
      description: 'An object that can be used to configure the index. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex*
  nameWithType.vb: EntityTypeBuilder.HasIndex(String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex(System.String())
  name.vb: HasIndex(String())
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.Type,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.Type,System.String)
  id: HasOne(System.Type,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasOne(Type, String)
  nameWithType: EntityTypeBuilder.HasOne(Type, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasOne
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 214
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Configures a relationship where this entity type has a reference that points\n    to a single instance of the other type in the relationship.\n</p>\n<p>\n    After calling this method, you should chain a call to\n<xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to fully configure\nthe relationship. Calling just this method without the chained call will not\nproduce a valid relationship.\n</p>\n"
  example: []
  syntax:
    content: public virtual ReferenceNavigationBuilder HasOne(Type relatedType, string navigationName = null)
    content.vb: Public Overridable Function HasOne(relatedType As Type, navigationName As String = Nothing) As ReferenceNavigationBuilder
    parameters:
    - id: relatedType
      type: System.Type
      description: 'The entity type that this relationship targets. '
    - id: navigationName
      type: System.String
      description: "\nThe name of the reference navigation property on this entity type that represents the relationship. If\nno property is specified, the relationship will be configured without a navigation property on this\nend.\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder
      description: 'An object that can be used to configure the relationship. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.String,System.String)
  id: HasOne(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasOne(String, String)
  nameWithType: EntityTypeBuilder.HasOne(String, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasOne
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 250
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Configures a relationship where this entity type has a reference that points\n    to a single instance of the other type in the relationship.\n</p>\n<p>\n    After calling this method, you should chain a call to\n<xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\nor <xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to fully configure\nthe relationship. Calling just this method without the chained call will not\nproduce a valid relationship.\n</p>\n"
  example: []
  syntax:
    content: public virtual ReferenceNavigationBuilder HasOne(string relatedTypeName, string navigationName = null)
    content.vb: Public Overridable Function HasOne(relatedTypeName As String, navigationName As String = Nothing) As ReferenceNavigationBuilder
    parameters:
    - id: relatedTypeName
      type: System.String
      description: 'The name of the entity type that this relationship targets. '
    - id: navigationName
      type: System.String
      description: "\nThe name of the reference navigation property on this entity type that represents the relationship. If\nno property is specified, the relationship will be configured without a navigation property on this\nend.\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder
      description: 'An object that can be used to configure the relationship. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.Type,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.Type,System.String)
  id: HasMany(System.Type,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasMany(Type, String)
  nameWithType: EntityTypeBuilder.HasMany(Type, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasMany
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 285
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Configures a relationship where this entity type has a collection that contains\n    instances of the other type in the relationship.\n</p>\n<p>\n    After calling this method, you should chain a call to\n<xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\nto fully configure the relationship. Calling just this method without the chained call will not\nproduce a valid relationship.\n</p>\n"
  example: []
  syntax:
    content: public virtual CollectionNavigationBuilder HasMany(Type relatedType, string navigationName = null)
    content.vb: Public Overridable Function HasMany(relatedType As Type, navigationName As String = Nothing) As CollectionNavigationBuilder
    parameters:
    - id: relatedType
      type: System.Type
      description: 'The entity type that this relationship targets. '
    - id: navigationName
      type: System.String
      description: "\nThe name of the collection navigation property on this entity type that represents the relationship. If\nno property is specified, the relationship will be configured without a navigation property on this\nend.\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder
      description: 'An object that can be used to configure the relationship. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.String,System.String)
  id: HasMany(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasMany(String, String)
  nameWithType: EntityTypeBuilder.HasMany(String, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasMany
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 320
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Configures a relationship where this entity type has a collection that contains\n    instances of the other type in the relationship.\n</p>\n<p>\n    After calling this method, you should chain a call to\n<xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)\" data-throw-if-not-resolved=\"false\"></xref>\nto fully configure the relationship. Calling just this method without the chained call will not\nproduce a valid relationship.\n</p>\n"
  example: []
  syntax:
    content: public virtual CollectionNavigationBuilder HasMany(string relatedTypeName, string navigationName = null)
    content.vb: Public Overridable Function HasMany(relatedTypeName As String, navigationName As String = Nothing) As CollectionNavigationBuilder
    parameters:
    - id: relatedTypeName
      type: System.String
      description: 'The name of the entity type that this relationship targets. '
    - id: navigationName
      type: System.String
      description: "\nThe name of the collection navigation property on this entity type that represents the relationship. If\nno property is specified, the relationship will be configured without a navigation property on this\nend.\n"
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder
      description: 'An object that can be used to configure the relationship. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  id: HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasOneBuilder(EntityType, String)
  nameWithType: EntityTypeBuilder.HasOneBuilder(EntityType, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasOneBuilder
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 340
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual InternalRelationshipBuilder HasOneBuilder(EntityType relatedEntityType, string navigationName)
    content.vb: Protected Overridable Function HasOneBuilder(relatedEntityType As EntityType, navigationName As String) As InternalRelationshipBuilder
    parameters:
    - id: relatedEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
    - id: navigationName
      type: System.String
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  id: HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasOneBuilder(EntityType, PropertyInfo)
  nameWithType: EntityTypeBuilder.HasOneBuilder(EntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasOneBuilder
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 348
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual InternalRelationshipBuilder HasOneBuilder(EntityType relatedEntityType, PropertyInfo navigationProperty)
    content.vb: Protected Overridable Function HasOneBuilder(relatedEntityType As EntityType, navigationProperty As PropertyInfo) As InternalRelationshipBuilder
    parameters:
    - id: relatedEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
    - id: navigationProperty
      type: System.Reflection.PropertyInfo
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  id: HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasManyBuilder(EntityType, String)
  nameWithType: EntityTypeBuilder.HasManyBuilder(EntityType, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasManyBuilder
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 373
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual InternalRelationshipBuilder HasManyBuilder(EntityType relatedEntityType, string navigationName)
    content.vb: Protected Overridable Function HasManyBuilder(relatedEntityType As EntityType, navigationName As String) As InternalRelationshipBuilder
    parameters:
    - id: relatedEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
    - id: navigationName
      type: System.String
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  id: HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,System.Reflection.PropertyInfo)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasManyBuilder(EntityType, PropertyInfo)
  nameWithType: EntityTypeBuilder.HasManyBuilder(EntityType, PropertyInfo)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasManyBuilder
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 385
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual InternalRelationshipBuilder HasManyBuilder(EntityType relatedEntityType, PropertyInfo navigationProperty)
    content.vb: Protected Overridable Function HasManyBuilder(relatedEntityType As EntityType, navigationProperty As PropertyInfo) As InternalRelationshipBuilder
    parameters:
    - id: relatedEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
    - id: navigationProperty
      type: System.Reflection.PropertyInfo
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  id: HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: HasChangeTrackingStrategy(ChangeTrackingStrategy)
  nameWithType: EntityTypeBuilder.HasChangeTrackingStrategy(ChangeTrackingStrategy)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasChangeTrackingStrategy
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 399
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\nConfigures the <xref href=\"Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy\" data-throw-if-not-resolved=\"false\"></xref> to be used for this entity type.\nThis strategy indicates how the context detects changes to properties for an instance of the entity type.\n"
  example: []
  syntax:
    content: public virtual EntityTypeBuilder HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy)
    content.vb: Public Overridable Function HasChangeTrackingStrategy(changeTrackingStrategy As ChangeTrackingStrategy) As EntityTypeBuilder
    parameters:
    - id: changeTrackingStrategy
      type: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
      description: 'The change tracking strategy to be used. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple configuration calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  id: UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  langs:
  - csharp
  - vb
  name: UsePropertyAccessMode(PropertyAccessMode)
  nameWithType: EntityTypeBuilder.UsePropertyAccessMode(PropertyAccessMode)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UsePropertyAccessMode
    path: src/Microsoft.EntityFrameworkCore/Metadata/Builders/EntityTypeBuilder.cs
    startLine: 423
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Builders
  summary: "\n<p>\n    Sets the <xref href=\"Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode\" data-throw-if-not-resolved=\"false\"></xref> to use for all properties of this entity type.\n</p>\n<p>\n    By default, the backing field, if one is found by convention or has been specified, is used when\n    new objects are constructed, typically when entities are queried from the database.\n    Properties are used for all other accesses.  Calling this method witll change that behavior\n    for all properties of this entity type as described in the <xref href=\"Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode\" data-throw-if-not-resolved=\"false\"></xref> enum.\n</p>\n<p>\n    Calling this method overrrides for all properties of this entity type any access mode that was\n    set on the model.\n</p>\n"
  example: []
  syntax:
    content: public virtual EntityTypeBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode)
    content.vb: Public Overridable Function UsePropertyAccessMode(propertyAccessMode As PropertyAccessMode) As EntityTypeBuilder
    parameters:
    - id: propertyAccessMode
      type: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" data-throw-if-not-resolved="false"></xref> to use for properties of this entity type. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple configuration calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: EntityType
  nameWithType: EntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
- uid: Microsoft.EntityFrameworkCore.ModelBuilder
  commentId: T:Microsoft.EntityFrameworkCore.ModelBuilder
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: ModelBuilder
  nameWithType: ModelBuilder
  fullName: Microsoft.EntityFrameworkCore.ModelBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Builders
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Builders
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.IMutableModel}
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.IMutableModel}
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  name: IInfrastructure<IMutableModel>
  nameWithType: IInfrastructure<IMutableModel>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>
  nameWithType.vb: IInfrastructure(Of IMutableModel)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of Microsoft.EntityFrameworkCore.Metadata.IMutableModel)
  name.vb: IInfrastructure(Of IMutableModel)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
    name: IMutableModel
    nameWithType: IMutableModel
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
    name: IMutableModel
    nameWithType: IMutableModel
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder}
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder}
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  name: IInfrastructure<InternalEntityTypeBuilder>
  nameWithType: IInfrastructure<InternalEntityTypeBuilder>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>
  nameWithType.vb: IInfrastructure(Of InternalEntityTypeBuilder)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder)
  name.vb: IInfrastructure(Of InternalEntityTypeBuilder)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
    name: InternalEntityTypeBuilder
    nameWithType: InternalEntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
    name: InternalEntityTypeBuilder
    nameWithType: InternalEntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  name: ForSqlServerToTable(String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  name: ForSqlServerToTable(String, String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String,System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(System.String,System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  name: ForSqlServerIsMemoryOptimized(Boolean)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Boolean)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(System.Boolean)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(System.Boolean)
    name: ForSqlServerIsMemoryOptimized
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(System.Boolean)
    name: ForSqlServerIsMemoryOptimized
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  parent: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  name: ForSqliteToTable(String)
  nameWithType: SqliteEntityTypeBuilderExtensions.ForSqliteToTable(String)
  fullName: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(System.String)
    name: ForSqliteToTable
    nameWithType: SqliteEntityTypeBuilderExtensions.ForSqliteToTable
    fullName: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(System.String)
    name: ForSqliteToTable
    nameWithType: SqliteEntityTypeBuilderExtensions.ForSqliteToTable
    fullName: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  name: ToTable(String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable(String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  name: ToTable(String, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable(String, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String,System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(System.String,System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  name: HasDiscriminator()
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator()
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(System.String,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  name: HasDiscriminator(String, Type)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator(String, Type)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(System.String, System.Type)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(System.String,System.Type)
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(System.String,System.Type)
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  definition: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  name: HasDiscriminator<TDiscriminator>(String)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>(String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>(System.String)
  nameWithType.vb: RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)(System.String)
  name.vb: HasDiscriminator(Of TDiscriminator)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(System.String)
    name: HasDiscriminator<TDiscriminator>
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(System.String)
    name: HasDiscriminator(Of TDiscriminator)
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
  isExternal: false
  name: IInfrastructure<T>
  nameWithType: IInfrastructure<T>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>
  nameWithType.vb: IInfrastructure(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T)
  name.vb: IInfrastructure(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1
    name: IInfrastructure
    nameWithType: IInfrastructure
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  isExternal: true
  name: ForSqlServerToTable(EntityTypeBuilder, String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(EntityTypeBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  commentId: T:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: SqlServerEntityTypeBuilderExtensions
  nameWithType: SqlServerEntityTypeBuilderExtensions
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  isExternal: true
  name: ForSqlServerToTable(EntityTypeBuilder, String, String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(EntityTypeBuilder, String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
    name: ForSqlServerToTable
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  isExternal: true
  name: ForSqlServerIsMemoryOptimized(EntityTypeBuilder, Boolean)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(EntityTypeBuilder, Boolean)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.Boolean)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
    name: ForSqlServerIsMemoryOptimized
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
    name: ForSqlServerIsMemoryOptimized
    nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
    fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  isExternal: true
  name: ForSqliteToTable(EntityTypeBuilder, String)
  nameWithType: SqliteEntityTypeBuilderExtensions.ForSqliteToTable(EntityTypeBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: ForSqliteToTable
    nameWithType: SqliteEntityTypeBuilderExtensions.ForSqliteToTable
    fullName: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: ForSqliteToTable
    nameWithType: SqliteEntityTypeBuilderExtensions.ForSqliteToTable
    fullName: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions.ForSqliteToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions
  commentId: T:Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: SqliteEntityTypeBuilderExtensions
  nameWithType: SqliteEntityTypeBuilderExtensions
  fullName: Microsoft.EntityFrameworkCore.SqliteEntityTypeBuilderExtensions
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  isExternal: true
  name: ToTable(EntityTypeBuilder, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable(EntityTypeBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  commentId: T:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: RelationalEntityTypeBuilderExtensions
  nameWithType: RelationalEntityTypeBuilderExtensions
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  isExternal: true
  name: ToTable(EntityTypeBuilder, String, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable(EntityTypeBuilder, String, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
    name: ToTable
    nameWithType: RelationalEntityTypeBuilderExtensions.ToTable
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  isExternal: false
  name: HasDiscriminator(EntityTypeBuilder)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator(EntityTypeBuilder)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  isExternal: true
  name: HasDiscriminator(EntityTypeBuilder, String, Type)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator(EntityTypeBuilder, String, Type)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String, System.Type)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
    name: HasDiscriminator
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  isExternal: true
  name: HasDiscriminator<TDiscriminator>(EntityTypeBuilder, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>(EntityTypeBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  nameWithType.vb: RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)(EntityTypeBuilder, String)
  fullname.vb: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  name.vb: HasDiscriminator(Of TDiscriminator)(EntityTypeBuilder, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: HasDiscriminator<TDiscriminator>
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
    name: HasDiscriminator(Of TDiscriminator)
    nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)
    fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.#ctor
  isExternal: false
  name: EntityTypeBuilder
  nameWithType: EntityTypeBuilder.EntityTypeBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.EntityTypeBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: InternalEntityTypeBuilder
  nameWithType: InternalEntityTypeBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New
  isExternal: false
  name: New
  nameWithType: EntityTypeBuilder.New
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.New
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: EntityTypeBuilder
  nameWithType: EntityTypeBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Internal#InternalEntityTypeBuilder}#Instance
  isExternal: false
  name: IInfrastructure<InternalEntityTypeBuilder>.Instance
  nameWithType: EntityTypeBuilder.IInfrastructure<InternalEntityTypeBuilder>.Instance
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
  nameWithType.vb: EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder}.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder}.Instance
  parent: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder}
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  name: Instance
  nameWithType: IInfrastructure<InternalEntityTypeBuilder>.Instance
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance
  nameWithType.vb: IInfrastructure(Of InternalEntityTypeBuilder).Instance
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder).Instance
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  isExternal: false
  name: Instance
  nameWithType: IInfrastructure<T>.Instance
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<T>.Instance
  nameWithType.vb: IInfrastructure(Of T).Instance
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of T).Instance
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata
  isExternal: false
  name: Metadata
  nameWithType: EntityTypeBuilder.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Metadata
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableEntityType
  nameWithType: IMutableEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#IMutableModel}#Instance
  isExternal: false
  name: IInfrastructure<IMutableModel>.Instance
  nameWithType: EntityTypeBuilder.IInfrastructure<IMutableModel>.Instance
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
  nameWithType.vb: EntityTypeBuilder.Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
  name.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.IMutableModel}.Instance
  commentId: P:Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.IMutableModel}.Instance
  parent: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure{Microsoft.EntityFrameworkCore.Metadata.IMutableModel}
  definition: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1.Instance
  name: Instance
  nameWithType: IInfrastructure<IMutableModel>.Instance
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.IMutableModel>.Instance
  nameWithType.vb: IInfrastructure(Of IMutableModel).Instance
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure(Of Microsoft.EntityFrameworkCore.Metadata.IMutableModel).Instance
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableModel
  nameWithType: IMutableModel
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation
  isExternal: false
  name: HasAnnotation
  nameWithType: EntityTypeBuilder.HasAnnotation
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAnnotation
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType
  isExternal: false
  name: HasBaseType
  nameWithType: EntityTypeBuilder.HasBaseType
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasBaseType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey
  isExternal: false
  name: HasKey
  nameWithType: EntityTypeBuilder.HasKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasKey
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: KeyBuilder
  nameWithType: KeyBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey
  isExternal: false
  name: HasAlternateKey
  nameWithType: EntityTypeBuilder.HasAlternateKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasAlternateKey
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: ChangeTracker
  nameWithType: ChangeTracker
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property
  isExternal: false
  name: Property<TProperty>
  nameWithType: EntityTypeBuilder.Property<TProperty>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property<TProperty>
  nameWithType.vb: EntityTypeBuilder.Property(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Property(Of TProperty)
  name.vb: Property(Of TProperty)
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0}
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  definition: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
  name: PropertyBuilder<TProperty>
  nameWithType: PropertyBuilder<TProperty>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>
  nameWithType.vb: PropertyBuilder(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty)
  name.vb: PropertyBuilder(Of TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: PropertyBuilder<TProperty>
  nameWithType: PropertyBuilder<TProperty>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>
  nameWithType.vb: PropertyBuilder(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty)
  name.vb: PropertyBuilder(Of TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: PropertyBuilder
  nameWithType: PropertyBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore
  isExternal: false
  name: Ignore
  nameWithType: EntityTypeBuilder.Ignore
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.Ignore
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex
  isExternal: false
  name: HasIndex
  nameWithType: EntityTypeBuilder.HasIndex
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasIndex
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: IndexBuilder
  nameWithType: IndexBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithMany(System.String)
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder.WithOne(System.String)
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne
  isExternal: false
  name: HasOne
  nameWithType: EntityTypeBuilder.HasOne
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOne
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: ReferenceNavigationBuilder
  nameWithType: ReferenceNavigationBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder.WithOne(System.String)
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany
  isExternal: false
  name: HasMany
  nameWithType: EntityTypeBuilder.HasMany
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasMany
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: CollectionNavigationBuilder
  nameWithType: CollectionNavigationBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder
  isExternal: false
  name: HasOneBuilder
  nameWithType: EntityTypeBuilder.HasOneBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasOneBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: InternalRelationshipBuilder
  nameWithType: InternalRelationshipBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder
  isExternal: false
  name: HasManyBuilder
  nameWithType: EntityTypeBuilder.HasManyBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasManyBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: ChangeTrackingStrategy
  nameWithType: ChangeTrackingStrategy
  fullName: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy
  isExternal: false
  name: HasChangeTrackingStrategy
  nameWithType: EntityTypeBuilder.HasChangeTrackingStrategy
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.HasChangeTrackingStrategy
- uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: PropertyAccessMode
  nameWithType: PropertyAccessMode
  fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode*
  commentId: Overload:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode
  isExternal: false
  name: UsePropertyAccessMode
  nameWithType: EntityTypeBuilder.UsePropertyAccessMode
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder.UsePropertyAccessMode
