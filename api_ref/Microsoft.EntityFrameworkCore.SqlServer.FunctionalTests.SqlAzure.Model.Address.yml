### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  id: Address
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.#ctor
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince
  langs:
  - csharp
  - vb
  name: Address
  nameWithType: Address
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Address
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 10
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Table("Address", Schema = "SalesLT")]

      public class Address
    content.vb: >-
      <Table("Address", Schema:="SalesLT")>

      Public Class Address
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.TableAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Address
    namedArguments:
    - name: Schema
      type: System.String
      value: SalesLT
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.#ctor
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.#ctor
  id: '#ctor'
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: Address()
  nameWithType: Address.Address()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.Address()
  type: Constructor
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public Address()
    content.vb: Public Sub New
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID
  id: AddressID
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: AddressID
  nameWithType: Address.AddressID
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddressID
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public int AddressID { get; set; }
    content.vb: Public Property AddressID As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1
  id: AddressLine1
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: AddressLine1
  nameWithType: Address.AddressLine1
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddressLine1
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Required]

      [MaxLength(60)]

      public string AddressLine1 { get; set; }
    content.vb: >-
      <Required>

      <MaxLength(60)>

      Public Property AddressLine1 As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 60
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2
  id: AddressLine2
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: AddressLine2
  nameWithType: Address.AddressLine2
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddressLine2
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [MaxLength(60)]

      public string AddressLine2 { get; set; }
    content.vb: >-
      <MaxLength(60)>

      Public Property AddressLine2 As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2*
  attributes:
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 60
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City
  id: City
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: City
  nameWithType: Address.City
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: City
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 27
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Required]

      [MaxLength(30)]

      public string City { get; set; }
    content.vb: >-
      <Required>

      <MaxLength(30)>

      Public Property City As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 30
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate
  id: ModifiedDate
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: ModifiedDate
  nameWithType: Address.ModifiedDate
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ModifiedDate
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public DateTime ModifiedDate { get; set; }
    content.vb: Public Property ModifiedDate As Date
    parameters: []
    return:
      type: System.DateTime
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion
  id: CountryRegion
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: CountryRegion
  nameWithType: Address.CountryRegion
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CountryRegion
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 32
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public string CountryRegion { get; set; }
    content.vb: Public Property CountryRegion As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince
  id: StateProvince
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: StateProvince
  nameWithType: Address.StateProvince
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StateProvince
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 33
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public string StateProvince { get; set; }
    content.vb: Public Property StateProvince As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode
  id: PostalCode
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: PostalCode
  nameWithType: Address.PostalCode
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PostalCode
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Required]

      [MaxLength(15)]

      public string PostalCode { get; set; }
    content.vb: >-
      <Required>

      <MaxLength(15)>

      Public Property PostalCode As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 15
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid
  id: rowguid
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: rowguid
  nameWithType: Address.rowguid
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: rowguid
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 39
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public Guid rowguid { get; set; }
    content.vb: Public Property rowguid As Guid
    parameters: []
    return:
      type: System.Guid
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress
  id: CustomerAddress
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address
  langs:
  - csharp
  - vb
  name: CustomerAddress
  nameWithType: Address.CustomerAddress
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CustomerAddress
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Address.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [InverseProperty("Address")]

      public virtual ICollection<CustomerAddress> CustomerAddress { get; set; }
    content.vb: >-
      <InverseProperty("Address")>

      Public Overridable Property CustomerAddress As ICollection(Of CustomerAddress)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress}
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Address
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.#ctor
  isExternal: false
  name: Address
  nameWithType: Address.Address
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.Address
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID
  isExternal: false
  name: AddressID
  nameWithType: Address.AddressID
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressID
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1
  isExternal: false
  name: AddressLine1
  nameWithType: Address.AddressLine1
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine1
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2
  isExternal: false
  name: AddressLine2
  nameWithType: Address.AddressLine2
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.AddressLine2
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City
  isExternal: false
  name: City
  nameWithType: Address.City
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.City
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate
  isExternal: false
  name: ModifiedDate
  nameWithType: Address.ModifiedDate
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.ModifiedDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion
  isExternal: false
  name: CountryRegion
  nameWithType: Address.CountryRegion
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CountryRegion
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince
  isExternal: false
  name: StateProvince
  nameWithType: Address.StateProvince
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.StateProvince
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode
  isExternal: false
  name: PostalCode
  nameWithType: Address.PostalCode
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.PostalCode
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid
  isExternal: false
  name: rowguid
  nameWithType: Address.rowguid
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.rowguid
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress
  isExternal: false
  name: CustomerAddress
  nameWithType: Address.CustomerAddress
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Address.CustomerAddress
- uid: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<CustomerAddress>
  nameWithType: ICollection<CustomerAddress>
  fullName: System.Collections.Generic.ICollection<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress>
  nameWithType.vb: ICollection(Of CustomerAddress)
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress)
  name.vb: ICollection(Of CustomerAddress)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
    name: CustomerAddress
    nameWithType: CustomerAddress
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
    name: CustomerAddress
    nameWithType: CustomerAddress
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
