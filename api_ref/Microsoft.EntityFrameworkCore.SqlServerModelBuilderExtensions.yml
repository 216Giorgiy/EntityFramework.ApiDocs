### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  commentId: T:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  id: SqlServerModelBuilderExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder)
  - Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  langs:
  - csharp
  - vb
  name: SqlServerModelBuilderExtensions
  nameWithType: SqlServerModelBuilderExtensions
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlServerModelBuilderExtensions
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSQL Server specific extension methods for <xref href=\"Microsoft.EntityFrameworkCore.ModelBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class SqlServerModelBuilderExtensions
    content.vb: Public Module SqlServerModelBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  id: ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence(ModelBuilder, String, String)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static RelationalSequenceBuilder ForSqlServerHasSequence(this ModelBuilder modelBuilder, string name, string schema = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(modelBuilder As ModelBuilder, name As String, schema As String = Nothing) As RelationalSequenceBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: schema
      type: System.String
      description: 'The schema of the sequence. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
      description: 'A builder to further configure the sequence. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  id: ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence(ModelBuilder, String, Action<RelationalSequenceBuilder>)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, String, Action<RelationalSequenceBuilder>)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.Action<Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 42
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerHasSequence(this ModelBuilder modelBuilder, string name, Action<RelationalSequenceBuilder> builderAction)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(modelBuilder As ModelBuilder, name As String, builderAction As Action(Of RelationalSequenceBuilder)) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: builderAction
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
      description: 'An action that performs configuration of the sequence. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  nameWithType.vb: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, String, Action(Of RelationalSequenceBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder))
  name.vb: ForSqlServerHasSequence(ModelBuilder, String, Action(Of RelationalSequenceBuilder))
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  id: ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence(ModelBuilder, String, String, Action<RelationalSequenceBuilder>)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, String, String, Action<RelationalSequenceBuilder>)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String, System.Action<Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 56
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerHasSequence(this ModelBuilder modelBuilder, string name, string schema, Action<RelationalSequenceBuilder> builderAction)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(modelBuilder As ModelBuilder, name As String, schema As String, builderAction As Action(Of RelationalSequenceBuilder)) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: schema
      type: System.String
      description: 'The schema of the sequence. '
    - id: builderAction
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
      description: 'An action that performs configuration of the sequence. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  nameWithType.vb: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, String, String, Action(Of RelationalSequenceBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder))
  name.vb: ForSqlServerHasSequence(ModelBuilder, String, String, Action(Of RelationalSequenceBuilder))
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  id: ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence<T>(ModelBuilder, String, String)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence<T>(ModelBuilder, String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence<T>(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 80
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static RelationalSequenceBuilder ForSqlServerHasSequence<T>(this ModelBuilder modelBuilder, string name, string schema = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(Of T)(modelBuilder As ModelBuilder, name As String, schema As String = Nothing) As RelationalSequenceBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: schema
      type: System.String
      description: 'The schema of the sequence. '
    typeParameters:
    - id: T
      description: 'The type of values the sequence will generate. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
      description: 'A builder to further configure the sequence. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  nameWithType.vb: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Of T)(ModelBuilder, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Of T)(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String)
  name.vb: ForSqlServerHasSequence(Of T)(ModelBuilder, String, String)
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  id: ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence<T>(ModelBuilder, String, Action<RelationalSequenceBuilder>)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence<T>(ModelBuilder, String, Action<RelationalSequenceBuilder>)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence<T>(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.Action<Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 103
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerHasSequence<T>(this ModelBuilder modelBuilder, string name, Action<RelationalSequenceBuilder> builderAction)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(Of T)(modelBuilder As ModelBuilder, name As String, builderAction As Action(Of RelationalSequenceBuilder)) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: builderAction
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
      description: 'An action that performs configuration of the sequence. '
    typeParameters:
    - id: T
      description: 'The type of values the sequence will generate. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  nameWithType.vb: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Of T)(ModelBuilder, String, Action(Of RelationalSequenceBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Of T)(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder))
  name.vb: ForSqlServerHasSequence(Of T)(ModelBuilder, String, Action(Of RelationalSequenceBuilder))
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  id: ForSqlServerHasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence<T>(ModelBuilder, String, String, Action<RelationalSequenceBuilder>)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence<T>(ModelBuilder, String, String, Action<RelationalSequenceBuilder>)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence<T>(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String, System.Action<Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 118
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerHasSequence<T>(this ModelBuilder modelBuilder, string name, string schema, Action<RelationalSequenceBuilder> builderAction)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(Of T)(modelBuilder As ModelBuilder, name As String, schema As String, builderAction As Action(Of RelationalSequenceBuilder)) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: schema
      type: System.String
      description: 'The schema of the sequence. '
    - id: builderAction
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
      description: 'An action that performs configuration of the sequence. '
    typeParameters:
    - id: T
      description: 'The type of values the sequence will generate. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  nameWithType.vb: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Of T)(ModelBuilder, String, String, Action(Of RelationalSequenceBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Of T)(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder))
  name.vb: ForSqlServerHasSequence(Of T)(ModelBuilder, String, String, Action(Of RelationalSequenceBuilder))
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)
  id: ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence(ModelBuilder, Type, String, String)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, Type, String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.Type, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 142
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static RelationalSequenceBuilder ForSqlServerHasSequence(this ModelBuilder modelBuilder, Type clrType, string name, string schema = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(modelBuilder As ModelBuilder, clrType As Type, name As String, schema As String = Nothing) As RelationalSequenceBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: clrType
      type: System.Type
      description: 'The type of values the sequence will generate. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: schema
      type: System.String
      description: 'The schema of the sequence. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
      description: 'A builder to further configure the sequence. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  id: ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence(ModelBuilder, Type, String, Action<RelationalSequenceBuilder>)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, Type, String, Action<RelationalSequenceBuilder>)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.Type, System.String, System.Action<Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 167
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerHasSequence(this ModelBuilder modelBuilder, Type clrType, string name, Action<RelationalSequenceBuilder> builderAction)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(modelBuilder As ModelBuilder, clrType As Type, name As String, builderAction As Action(Of RelationalSequenceBuilder)) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: clrType
      type: System.Type
      description: 'The type of values the sequence will generate. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: builderAction
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
      description: 'An action that performs configuration of the sequence. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  nameWithType.vb: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, Type, String, Action(Of RelationalSequenceBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.Type, System.String, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder))
  name.vb: ForSqlServerHasSequence(ModelBuilder, Type, String, Action(Of RelationalSequenceBuilder))
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  id: ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerHasSequence(ModelBuilder, Type, String, String, Action<RelationalSequenceBuilder>)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, Type, String, String, Action<RelationalSequenceBuilder>)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.Type, System.String, System.String, System.Action<Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerHasSequence
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 183
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures a database sequence when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerHasSequence(this ModelBuilder modelBuilder, Type clrType, string name, string schema, Action<RelationalSequenceBuilder> builderAction)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerHasSequence(modelBuilder As ModelBuilder, clrType As Type, name As String, schema As String, builderAction As Action(Of RelationalSequenceBuilder)) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: clrType
      type: System.Type
      description: 'The type of values the sequence will generate. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: schema
      type: System.String
      description: 'The schema of the sequence. '
    - id: builderAction
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
      description: 'An action that performs configuration of the sequence. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  nameWithType.vb: SqlServerModelBuilderExtensions.ForSqlServerHasSequence(ModelBuilder, Type, String, String, Action(Of RelationalSequenceBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence(Microsoft.EntityFrameworkCore.ModelBuilder, System.Type, System.String, System.String, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder))
  name.vb: ForSqlServerHasSequence(ModelBuilder, Type, String, String, Action(Of RelationalSequenceBuilder))
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  id: ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerUseSequenceHiLo(ModelBuilder, String, String)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo(ModelBuilder, String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo(Microsoft.EntityFrameworkCore.ModelBuilder, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerUseSequenceHiLo
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 209
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures the model to use a sequence-based hi-lo pattern to generate values for properties\nmarked as <xref href=\"Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd\" data-throw-if-not-resolved=\"false\"></xref>, when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerUseSequenceHiLo(this ModelBuilder modelBuilder, string name = null, string schema = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerUseSequenceHiLo(modelBuilder As ModelBuilder, name As String = Nothing, schema As String = Nothing) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    - id: name
      type: System.String
      description: 'The name of the sequence. '
    - id: schema
      type: System.String
      description: 'The schema of the sequence. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder)
  id: ForSqlServerUseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerUseIdentityColumns(ModelBuilder)
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns(ModelBuilder)
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqlServerUseIdentityColumns
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerModelBuilderExtensions.cs
    startLine: 241
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nConfigures the model to use the SQL Server IDENTITY feature to generate values for properties\nmarked as <xref href=\"Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd\" data-throw-if-not-resolved=\"false\"></xref>, when targeting SQL Server. This is the default\nbehavior when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static ModelBuilder ForSqlServerUseIdentityColumns(this ModelBuilder modelBuilder)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerUseIdentityColumns(modelBuilder As ModelBuilder) As ModelBuilder
    parameters:
    - id: modelBuilder
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The model builder. '
    return:
      type: Microsoft.EntityFrameworkCore.ModelBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  overload: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.ModelBuilder
  commentId: T:Microsoft.EntityFrameworkCore.ModelBuilder
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: ModelBuilder
  nameWithType: ModelBuilder
  fullName: Microsoft.EntityFrameworkCore.ModelBuilder
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence
  isExternal: false
  name: ForSqlServerHasSequence
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerHasSequence
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerHasSequence
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: RelationalSequenceBuilder
  nameWithType: RelationalSequenceBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
  commentId: T:System.Action{Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder}
  parent: System
  definition: System.Action`1
  name: Action<RelationalSequenceBuilder>
  nameWithType: Action<RelationalSequenceBuilder>
  fullName: System.Action<Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder>
  nameWithType.vb: Action(Of RelationalSequenceBuilder)
  fullname.vb: System.Action(Of Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder)
  name.vb: Action(Of RelationalSequenceBuilder)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
    name: RelationalSequenceBuilder
    nameWithType: RelationalSequenceBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
    name: RelationalSequenceBuilder
    nameWithType: RelationalSequenceBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.RelationalSequenceBuilder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd
  commentId: F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo
  isExternal: false
  name: ForSqlServerUseSequenceHiLo
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseSequenceHiLo
- uid: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns
  isExternal: false
  name: ForSqlServerUseIdentityColumns
  nameWithType: SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns
  fullName: Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.ForSqlServerUseIdentityColumns
