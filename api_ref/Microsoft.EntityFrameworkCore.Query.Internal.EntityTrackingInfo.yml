### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  id: EntityTrackingInfo
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,QuerySourceReferenceExpression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.GetIncludedEntities(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IsEnumerableTarget
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySource
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySourceReferenceExpression
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer)
  langs:
  - csharp
  - vb
  name: EntityTrackingInfo
  nameWithType: EntityTrackingInfo
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EntityTrackingInfo
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public class EntityTrackingInfo
    content.vb: Public Class EntityTrackingInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,QuerySourceReferenceExpression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,QuerySourceReferenceExpression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: '#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,QuerySourceReferenceExpression,Microsoft.EntityFrameworkCore.Metadata.IEntityType)'
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  langs:
  - csharp
  - vb
  name: EntityTrackingInfo(QueryCompilationContext, QuerySourceReferenceExpression, IEntityType)
  nameWithType: EntityTrackingInfo.EntityTrackingInfo(QueryCompilationContext, QuerySourceReferenceExpression, IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.EntityTrackingInfo(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext, QuerySourceReferenceExpression, Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public EntityTrackingInfo(QueryCompilationContext queryCompilationContext, QuerySourceReferenceExpression querySourceReferenceExpression, IEntityType entityType)
    content.vb: Public Sub New(queryCompilationContext As QueryCompilationContext, querySourceReferenceExpression As QuerySourceReferenceExpression, entityType As IEntityType)
    parameters:
    - id: queryCompilationContext
      type: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
    - id: querySourceReferenceExpression
      type: QuerySourceReferenceExpression
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IsEnumerableTarget
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IsEnumerableTarget
  id: IsEnumerableTarget
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  langs:
  - csharp
  - vb
  name: IsEnumerableTarget
  nameWithType: EntityTrackingInfo.IsEnumerableTarget
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IsEnumerableTarget
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IsEnumerableTarget
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsEnumerableTarget { get; }
    content.vb: Public Overridable ReadOnly Property IsEnumerableTarget As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySourceReferenceExpression
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySourceReferenceExpression
  id: QuerySourceReferenceExpression
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  langs:
  - csharp
  - vb
  name: QuerySourceReferenceExpression
  nameWithType: EntityTrackingInfo.QuerySourceReferenceExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySourceReferenceExpression
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QuerySourceReferenceExpression
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
    startLine: 87
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual QuerySourceReferenceExpression QuerySourceReferenceExpression { get; }
    content.vb: Public Overridable ReadOnly Property QuerySourceReferenceExpression As QuerySourceReferenceExpression
    parameters: []
    return:
      type: QuerySourceReferenceExpression
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySource
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySource
  id: QuerySource
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  langs:
  - csharp
  - vb
  name: QuerySource
  nameWithType: EntityTrackingInfo.QuerySource
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.QuerySource
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QuerySource
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
    startLine: 93
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IQuerySource QuerySource { get; }
    content.vb: Public Overridable ReadOnly Property QuerySource As IQuerySource
    parameters: []
    return:
      type: IQuerySource
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer)
  id: StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object,Microsoft.EntityFrameworkCore.Storage.ValueBuffer)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  langs:
  - csharp
  - vb
  name: StartTracking(IStateManager, Object, ValueBuffer)
  nameWithType: EntityTrackingInfo.StartTracking(IStateManager, Object, ValueBuffer)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.StartTracking(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager, System.Object, Microsoft.EntityFrameworkCore.Storage.ValueBuffer)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: StartTracking
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
    startLine: 99
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void StartTracking(IStateManager stateManager, object entity, ValueBuffer valueBuffer)
    content.vb: Public Overridable Sub StartTracking(stateManager As IStateManager, entity As Object, valueBuffer As ValueBuffer)
    parameters:
    - id: stateManager
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
    - id: entity
      type: System.Object
    - id: valueBuffer
      type: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.GetIncludedEntities(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.GetIncludedEntities(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object)
  id: GetIncludedEntities(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager,System.Object)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  langs:
  - csharp
  - vb
  name: GetIncludedEntities(IStateManager, Object)
  nameWithType: EntityTrackingInfo.GetIncludedEntities(IStateManager, Object)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.GetIncludedEntities(Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetIncludedEntities
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityTrackingInfo.cs
    startLine: 156
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<EntityTrackingInfo.IncludedEntity> GetIncludedEntities(IStateManager stateManager, object entity)
    content.vb: Public Overridable Function GetIncludedEntities(stateManager As IStateManager, entity As Object) As IEnumerable(Of EntityTrackingInfo.IncludedEntity)
    parameters:
    - id: stateManager
      type: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
    - id: entity
      type: System.Object
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity}
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<EntityTrackingInfo, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<EntityTrackingInfo, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of EntityTrackingInfo, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of EntityTrackingInfo, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<EntityTrackingInfo, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<EntityTrackingInfo, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of EntityTrackingInfo, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of EntityTrackingInfo, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: QueryCompilationContext
  nameWithType: QueryCompilationContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
- uid: QuerySourceReferenceExpression
  isExternal: true
  name: QuerySourceReferenceExpression
  nameWithType: QuerySourceReferenceExpression
  fullName: QuerySourceReferenceExpression
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: IQuerySource
  isExternal: true
  name: IQuerySource
  nameWithType: IQuerySource
  fullName: IQuerySource
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  parent: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: IStateManager
  nameWithType: IStateManager
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ValueBuffer
  nameWithType: ValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EntityTrackingInfo.IncludedEntity>
  nameWithType: IEnumerable<EntityTrackingInfo.IncludedEntity>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity>
  nameWithType.vb: IEnumerable(Of EntityTrackingInfo.IncludedEntity)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity)
  name.vb: IEnumerable(Of EntityTrackingInfo.IncludedEntity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity
    name: EntityTrackingInfo.IncludedEntity
    nameWithType: EntityTrackingInfo.IncludedEntity
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity
    name: EntityTrackingInfo.IncludedEntity
    nameWithType: EntityTrackingInfo.IncludedEntity
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo.IncludedEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
