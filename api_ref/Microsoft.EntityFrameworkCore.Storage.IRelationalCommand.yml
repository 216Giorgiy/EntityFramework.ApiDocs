### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  id: IRelationalCommand
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.CommandText
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.Parameters
  langs:
  - csharp
  - vb
  name: IRelationalCommand
  nameWithType: IRelationalCommand
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IRelationalCommand
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    A command to be executed against a relational database.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: public interface IRelationalCommand
    content.vb: Public Interface IRelationalCommand
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.CommandText
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.CommandText
  id: CommandText
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: CommandText
  nameWithType: IRelationalCommand.CommandText
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.CommandText
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CommandText
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the command text to be executed.\n"
  example: []
  syntax:
    content: string CommandText { get; }
    content.vb: ReadOnly Property CommandText As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.Parameters
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.Parameters
  id: Parameters
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: IRelationalCommand.Parameters
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.Parameters
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Parameters
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 29
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the parameters for the command. \n"
  example: []
  syntax:
    content: IReadOnlyList<IRelationalParameter> Parameters { get; }
    content.vb: ReadOnly Property Parameters As IReadOnlyList(Of IRelationalParameter)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.IRelationalParameter}
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  id: ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: ExecuteNonQuery(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean)
  nameWithType: IRelationalCommand.ExecuteNonQuery(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteNonQuery
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Executes the command with no results.\n"
  example: []
  syntax:
    content: int ExecuteNonQuery(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues = null, bool manageConnection = true)
    content.vb: Function ExecuteNonQuery(connection As IRelationalConnection, parameterValues As IReadOnlyDictionary(Of String, Object) = Nothing, manageConnection As Boolean = True) As Integer
    parameters:
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The connection to execute against. '
    - id: parameterValues
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The values for the parameters. '
    - id: manageConnection
      type: System.Boolean
      description: 'A value indicating whether to open and close the connection as needed. '
    return:
      type: System.Int32
      description: 'The number of rows affected. '
  nameWithType.vb: IRelationalCommand.ExecuteNonQuery(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object), System.Boolean)
  name.vb: ExecuteNonQuery(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean)
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  id: ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: ExecuteNonQueryAsync(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean, CancellationToken)
  nameWithType: IRelationalCommand.ExecuteNonQueryAsync(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteNonQueryAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 53
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously executes the command with no results.\n"
  example: []
  syntax:
    content: Task<int> ExecuteNonQueryAsync(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues = null, bool manageConnection = true, CancellationToken cancellationToken = null)
    content.vb: Function ExecuteNonQueryAsync(connection As IRelationalConnection, parameterValues As IReadOnlyDictionary(Of String, Object) = Nothing, manageConnection As Boolean = True, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The connection to execute against. '
    - id: parameterValues
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The values for the parameters. '
    - id: manageConnection
      type: System.Boolean
      description: 'A value indicating whether to open and close the connection as needed. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n    A task that represents the asynchronous operation. The task result contains the number of rows affected. \n"
  nameWithType.vb: IRelationalCommand.ExecuteNonQueryAsync(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean, CancellationToken)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object), System.Boolean, System.Threading.CancellationToken)
  name.vb: ExecuteNonQueryAsync(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean, CancellationToken)
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  id: ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: ExecuteScalar(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean)
  nameWithType: IRelationalCommand.ExecuteScalar(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteScalar
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 66
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Executes the command with a single scalar result.\n"
  example: []
  syntax:
    content: object ExecuteScalar(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues = null, bool manageConnection = true)
    content.vb: Function ExecuteScalar(connection As IRelationalConnection, parameterValues As IReadOnlyDictionary(Of String, Object) = Nothing, manageConnection As Boolean = True) As Object
    parameters:
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The connection to execute against. '
    - id: parameterValues
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The values for the parameters. '
    - id: manageConnection
      type: System.Boolean
      description: 'A value indicating whether to open and close the connection as needed. '
    return:
      type: System.Object
      description: 'The result of the command. '
  nameWithType.vb: IRelationalCommand.ExecuteScalar(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object), System.Boolean)
  name.vb: ExecuteScalar(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean)
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  id: ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: ExecuteScalarAsync(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean, CancellationToken)
  nameWithType: IRelationalCommand.ExecuteScalarAsync(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteScalarAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously executes the command with a single scalar result.\n"
  example: []
  syntax:
    content: Task<object> ExecuteScalarAsync(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues = null, bool manageConnection = true, CancellationToken cancellationToken = null)
    content.vb: Function ExecuteScalarAsync(connection As IRelationalConnection, parameterValues As IReadOnlyDictionary(Of String, Object) = Nothing, manageConnection As Boolean = True, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
    parameters:
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The connection to execute against. '
    - id: parameterValues
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The values for the parameters. '
    - id: manageConnection
      type: System.Boolean
      description: 'A value indicating whether to open and close the connection as needed. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n    A task that represents the asynchronous operation. The task result contains the result of the command. \n"
  nameWithType.vb: IRelationalCommand.ExecuteScalarAsync(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean, CancellationToken)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object), System.Boolean, System.Threading.CancellationToken)
  name.vb: ExecuteScalarAsync(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean, CancellationToken)
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  id: ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: ExecuteReader(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean)
  nameWithType: IRelationalCommand.ExecuteReader(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteReader
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 94
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Executes the command with a <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalDataReader\" data-throw-if-not-resolved=\"false\"></xref> result.\n"
  example: []
  syntax:
    content: RelationalDataReader ExecuteReader(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues = null, bool manageConnection = true)
    content.vb: Function ExecuteReader(connection As IRelationalConnection, parameterValues As IReadOnlyDictionary(Of String, Object) = Nothing, manageConnection As Boolean = True) As RelationalDataReader
    parameters:
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The connection to execute against. '
    - id: parameterValues
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The values for the parameters. '
    - id: manageConnection
      type: System.Boolean
      description: 'A value indicating whether to open and close the connection as needed. '
    return:
      type: Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
      description: 'The result of the command. '
  nameWithType.vb: IRelationalCommand.ExecuteReader(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object), System.Boolean)
  name.vb: ExecuteReader(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean)
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  id: ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  langs:
  - csharp
  - vb
  name: ExecuteReaderAsync(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean, CancellationToken)
  nameWithType: IRelationalCommand.ExecuteReaderAsync(IRelationalConnection, IReadOnlyDictionary<String, Object>, Boolean, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteReaderAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalCommand.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously executes the command with a <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalDataReader\" data-throw-if-not-resolved=\"false\"></xref> result.\n"
  example: []
  syntax:
    content: Task<RelationalDataReader> ExecuteReaderAsync(IRelationalConnection connection, IReadOnlyDictionary<string, object> parameterValues = null, bool manageConnection = true, CancellationToken cancellationToken = null)
    content.vb: Function ExecuteReaderAsync(connection As IRelationalConnection, parameterValues As IReadOnlyDictionary(Of String, Object) = Nothing, manageConnection As Boolean = True, cancellationToken As CancellationToken = Nothing) As Task(Of RelationalDataReader)
    parameters:
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The connection to execute against. '
    - id: parameterValues
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The values for the parameters. '
    - id: manageConnection
      type: System.Boolean
      description: 'A value indicating whether to open and close the connection as needed. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.RelationalDataReader}
      description: "\n    A task that represents the asynchronous operation. The task result contains the result of the command. \n"
  nameWithType.vb: IRelationalCommand.ExecuteReaderAsync(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean, CancellationToken)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object), System.Boolean, System.Threading.CancellationToken)
  name.vb: ExecuteReaderAsync(IRelationalConnection, IReadOnlyDictionary(Of String, Object), Boolean, CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.IRelationalParameter}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.IRelationalParameter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IRelationalParameter>
  nameWithType: IReadOnlyList<IRelationalParameter>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Storage.IRelationalParameter>
  nameWithType.vb: IReadOnlyList(Of IRelationalParameter)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Storage.IRelationalParameter)
  name.vb: IReadOnlyList(Of IRelationalParameter)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalParameter
    name: IRelationalParameter
    nameWithType: IRelationalParameter
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalParameter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalParameter
    name: IRelationalParameter
    nameWithType: IRelationalParameter
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalParameter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalConnection
  nameWithType: IRelationalConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, Object>
  nameWithType: IReadOnlyDictionary<String, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)
  name.vb: IReadOnlyDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullname.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: RelationalDataReader
  nameWithType: RelationalDataReader
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.RelationalDataReader}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.RelationalDataReader}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RelationalDataReader>
  nameWithType: Task<RelationalDataReader>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.Storage.RelationalDataReader>
  nameWithType.vb: Task(Of RelationalDataReader)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)
  name.vb: Task(Of RelationalDataReader)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
    name: RelationalDataReader
    nameWithType: RelationalDataReader
    fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
    name: RelationalDataReader
    nameWithType: RelationalDataReader
    fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDataReader
  - name: )
    nameWithType: )
    fullName: )
