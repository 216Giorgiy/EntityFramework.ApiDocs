### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1
  id: TaskResultAsyncEnumerable`1
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.#ctor(System.Threading.Tasks.Task{`0})
  - Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.GetEnumerator
  langs:
  - csharp
  - vb
  name: TaskResultAsyncEnumerable<T>
  nameWithType: TaskResultAsyncEnumerable<T>
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/TaskResultAsyncEnumerable.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TaskResultAsyncEnumerable
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/TaskResultAsyncEnumerable.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public sealed class TaskResultAsyncEnumerable<T> : IAsyncEnumerable<T>'
    content.vb: >-
      Public NotInheritable Class TaskResultAsyncEnumerable(Of T)
          Inherits IAsyncEnumerable(Of T)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  nameWithType.vb: TaskResultAsyncEnumerable(Of T)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable(Of T)
  name.vb: TaskResultAsyncEnumerable(Of T)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.#ctor(System.Threading.Tasks.Task{`0})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.#ctor(System.Threading.Tasks.Task{`0})
  id: '#ctor(System.Threading.Tasks.Task{`0})'
  parent: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1
  langs:
  - csharp
  - vb
  name: TaskResultAsyncEnumerable(Task<T>)
  nameWithType: TaskResultAsyncEnumerable<T>.TaskResultAsyncEnumerable(Task<T>)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable<T>.TaskResultAsyncEnumerable(System.Threading.Tasks.Task<T>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/TaskResultAsyncEnumerable.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/TaskResultAsyncEnumerable.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public TaskResultAsyncEnumerable(Task<T> task)
    content.vb: Public Sub New(task As Task(Of T))
    parameters:
    - id: task
      type: System.Threading.Tasks.Task{{T}}
  overload: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.#ctor*
  nameWithType.vb: TaskResultAsyncEnumerable(Of T).TaskResultAsyncEnumerable(Task(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable(Of T).TaskResultAsyncEnumerable(System.Threading.Tasks.Task(Of T))
  name.vb: TaskResultAsyncEnumerable(Task(Of T))
- uid: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.GetEnumerator
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: TaskResultAsyncEnumerable<T>.GetEnumerator()
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/TaskResultAsyncEnumerable.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetEnumerator
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/TaskResultAsyncEnumerable.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public IAsyncEnumerator<T> GetEnumerator()
    content.vb: Public Function GetEnumerator As IAsyncEnumerator(Of T)
    return:
      type: IAsyncEnumerator{{T}}
  overload: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.GetEnumerator*
  nameWithType.vb: TaskResultAsyncEnumerable(Of T).GetEnumerator()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable(Of T).GetEnumerator()
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.#ctor
  isExternal: false
  name: TaskResultAsyncEnumerable
  nameWithType: TaskResultAsyncEnumerable<T>.TaskResultAsyncEnumerable
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable<T>.TaskResultAsyncEnumerable
  nameWithType.vb: TaskResultAsyncEnumerable(Of T).TaskResultAsyncEnumerable
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable(Of T).TaskResultAsyncEnumerable
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.GetEnumerator*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable`1.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: TaskResultAsyncEnumerable<T>.GetEnumerator
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable<T>.GetEnumerator
  nameWithType.vb: TaskResultAsyncEnumerable(Of T).GetEnumerator
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.TaskResultAsyncEnumerable(Of T).GetEnumerator
- uid: IAsyncEnumerator{{T}}
  commentId: '!:IAsyncEnumerator{`0}'
  definition: IAsyncEnumerator`1
  name: IAsyncEnumerator<T>
  nameWithType: IAsyncEnumerator<T>
  fullName: IAsyncEnumerator<T>
  nameWithType.vb: IAsyncEnumerator(Of T)
  fullname.vb: IAsyncEnumerator(Of T)
  name.vb: IAsyncEnumerator(Of T)
  spec.csharp:
  - uid: IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: IAsyncEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: IAsyncEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerator`1
  isExternal: true
  name: IAsyncEnumerator<>
  nameWithType: IAsyncEnumerator<>
  fullName: IAsyncEnumerator<>
  nameWithType.vb: IAsyncEnumerator(Of )
  fullname.vb: IAsyncEnumerator(Of )
  name.vb: IAsyncEnumerator(Of )
  spec.csharp:
  - uid: IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: IAsyncEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: IAsyncEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
