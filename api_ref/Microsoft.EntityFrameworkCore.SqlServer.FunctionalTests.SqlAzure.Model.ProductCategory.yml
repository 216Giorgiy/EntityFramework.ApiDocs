### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  id: ProductCategory
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.#ctor
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.InverseParentProductCategory
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ModifiedDate
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Name
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategory
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategoryID
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Product
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ProductCategoryID
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.rowguid
  langs:
  - csharp
  - vb
  name: ProductCategory
  nameWithType: ProductCategory
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ProductCategory
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 9
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Table("ProductCategory", Schema = "SalesLT")]

      public class ProductCategory
    content.vb: >-
      <Table("ProductCategory", Schema:="SalesLT")>

      Public Class ProductCategory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.TableAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ProductCategory
    namedArguments:
    - name: Schema
      type: System.String
      value: SalesLT
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.#ctor
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.#ctor
  id: '#ctor'
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: ProductCategory()
  nameWithType: ProductCategory.ProductCategory()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ProductCategory()
  type: Constructor
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public ProductCategory()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ProductCategoryID
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ProductCategoryID
  id: ProductCategoryID
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: ProductCategoryID
  nameWithType: ProductCategory.ProductCategoryID
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ProductCategoryID
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ProductCategoryID
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public int ProductCategoryID { get; set; }
    content.vb: Public Property ProductCategoryID As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Name
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Name
  id: Name
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ProductCategory.Name
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Name
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Name
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ModifiedDate
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ModifiedDate
  id: ModifiedDate
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: ModifiedDate
  nameWithType: ProductCategory.ModifiedDate
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ModifiedDate
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ModifiedDate
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public DateTime ModifiedDate { get; set; }
    content.vb: Public Property ModifiedDate As Date
    parameters: []
    return:
      type: System.DateTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategoryID
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategoryID
  id: ParentProductCategoryID
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: ParentProductCategoryID
  nameWithType: ProductCategory.ParentProductCategoryID
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategoryID
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ParentProductCategoryID
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public int ? ParentProductCategoryID { get; set; }
    content.vb: Public Property ParentProductCategoryID As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.rowguid
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.rowguid
  id: rowguid
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: rowguid
  nameWithType: ProductCategory.rowguid
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.rowguid
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: rowguid
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public Guid rowguid { get; set; }
    content.vb: Public Property rowguid As Guid
    parameters: []
    return:
      type: System.Guid
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Product
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Product
  id: Product
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: Product
  nameWithType: ProductCategory.Product
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Product
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Product
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [InverseProperty("ProductCategory")]

      public virtual ICollection<Product> Product { get; set; }
    content.vb: >-
      <InverseProperty("ProductCategory")>

      Public Overridable Property Product As ICollection(Of Product)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product}
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ProductCategory
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategory
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategory
  id: ParentProductCategory
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: ParentProductCategory
  nameWithType: ProductCategory.ParentProductCategory
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.ParentProductCategory
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ParentProductCategory
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 26
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [ForeignKey("ParentProductCategoryID")]

      [InverseProperty("InverseParentProductCategory")]

      public virtual ProductCategory ParentProductCategory { get; set; }
    content.vb: >-
      <ForeignKey("ParentProductCategoryID")>

      <InverseProperty("InverseParentProductCategory")>

      Public Overridable Property ParentProductCategory As ProductCategory
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ParentProductCategoryID
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: InverseParentProductCategory
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.InverseParentProductCategory
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.InverseParentProductCategory
  id: InverseParentProductCategory
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  langs:
  - csharp
  - vb
  name: InverseParentProductCategory
  nameWithType: ProductCategory.InverseParentProductCategory
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.InverseParentProductCategory
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: InverseParentProductCategory
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/ProductCategory.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [InverseProperty("ParentProductCategory")]

      public virtual ICollection<ProductCategory> InverseParentProductCategory { get; set; }
    content.vb: >-
      <InverseProperty("ParentProductCategory")>

      Public Overridable Property InverseParentProductCategory As ICollection(Of ProductCategory)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory}
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ParentProductCategory
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<ProductCategory, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<ProductCategory, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of ProductCategory, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of ProductCategory, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<ProductCategory, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<ProductCategory, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of ProductCategory, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of ProductCategory, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Product>
  nameWithType: ICollection<Product>
  fullName: System.Collections.Generic.ICollection<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product>
  nameWithType.vb: ICollection(Of Product)
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product)
  name.vb: ICollection(Of Product)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product
    name: Product
    nameWithType: Product
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product
    name: Product
    nameWithType: Product
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  isExternal: false
  name: ProductCategory
  nameWithType: ProductCategory
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
- uid: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ProductCategory>
  nameWithType: ICollection<ProductCategory>
  fullName: System.Collections.Generic.ICollection<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory>
  nameWithType.vb: ICollection(Of ProductCategory)
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory)
  name.vb: ICollection(Of ProductCategory)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
    name: ProductCategory
    nameWithType: ProductCategory
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
    name: ProductCategory
    nameWithType: ProductCategory
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.ProductCategory
  - name: )
    nameWithType: )
    fullName: )
