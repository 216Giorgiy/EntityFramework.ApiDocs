### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  commentId: T:Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  id: ListLoggerFactory
  parent: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  children:
  - Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}})
  - Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}},System.Func{System.String,System.Boolean})
  - Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  - Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.CreateLogger(System.String)
  - Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.Dispose
  langs:
  - csharp
  - vb
  name: ListLoggerFactory
  nameWithType: ListLoggerFactory
  fullName: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ListLoggerFactory
    path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
    startLine: 10
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  syntax:
    content: 'public class ListLoggerFactory : ILoggerFactory, IDisposable'
    content.vb: >-
      Public Class ListLoggerFactory
          Implements ILoggerFactory, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Logging.ILoggerFactory
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}})
  id: '#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}})'
  parent: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  langs:
  - csharp
  - vb
  name: ListLoggerFactory(List<Tuple<LogLevel, String>>)
  nameWithType: ListLoggerFactory.ListLoggerFactory(List<Tuple<LogLevel, String>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.ListLoggerFactory(System.Collections.Generic.List<System.Tuple<Microsoft.Extensions.Logging.LogLevel, System.String>>)
  type: Constructor
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  syntax:
    content: public ListLoggerFactory(List<Tuple<LogLevel, string>> log)
    content.vb: Public Sub New(log As List(Of Tuple(Of LogLevel, String)))
    parameters:
    - id: log
      type: System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}}
  nameWithType.vb: ListLoggerFactory.ListLoggerFactory(List(Of Tuple(Of LogLevel, String)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.ListLoggerFactory(System.Collections.Generic.List(Of System.Tuple(Of Microsoft.Extensions.Logging.LogLevel, System.String)))
  name.vb: ListLoggerFactory(List(Of Tuple(Of LogLevel, String)))
- uid: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}},System.Func{System.String,System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}},System.Func{System.String,System.Boolean})
  id: '#ctor(System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}},System.Func{System.String,System.Boolean})'
  parent: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  langs:
  - csharp
  - vb
  name: ListLoggerFactory(List<Tuple<LogLevel, String>>, Func<String, Boolean>)
  nameWithType: ListLoggerFactory.ListLoggerFactory(List<Tuple<LogLevel, String>>, Func<String, Boolean>)
  fullName: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.ListLoggerFactory(System.Collections.Generic.List<System.Tuple<Microsoft.Extensions.Logging.LogLevel, System.String>>, System.Func<System.String, System.Boolean>)
  type: Constructor
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  syntax:
    content: public ListLoggerFactory(List<Tuple<LogLevel, string>> log, Func<string, bool> shouldCreateLogger)
    content.vb: Public Sub New(log As List(Of Tuple(Of LogLevel, String)), shouldCreateLogger As Func(Of String, Boolean))
    parameters:
    - id: log
      type: System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}}
    - id: shouldCreateLogger
      type: System.Func{System.String,System.Boolean}
  nameWithType.vb: ListLoggerFactory.ListLoggerFactory(List(Of Tuple(Of LogLevel, String)), Func(Of String, Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.ListLoggerFactory(System.Collections.Generic.List(Of System.Tuple(Of Microsoft.Extensions.Logging.LogLevel, System.String)), System.Func(Of System.String, System.Boolean))
  name.vb: ListLoggerFactory(List(Of Tuple(Of LogLevel, String)), Func(Of String, Boolean))
- uid: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.CreateLogger(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.CreateLogger(System.String)
  id: CreateLogger(System.String)
  parent: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  langs:
  - csharp
  - vb
  name: CreateLogger(String)
  nameWithType: ListLoggerFactory.CreateLogger(String)
  fullName: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.CreateLogger(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateLogger
    path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
    startLine: 27
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  syntax:
    content: public ILogger CreateLogger(string name)
    content.vb: Public Function CreateLogger(name As String) As ILogger
    parameters:
    - id: name
      type: System.String
    return:
      type: Microsoft.Extensions.Logging.ILogger
  implements:
  - Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  id: AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  parent: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  langs:
  - csharp
  - vb
  name: AddProvider(ILoggerProvider)
  nameWithType: ListLoggerFactory.AddProvider(ILoggerProvider)
  fullName: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddProvider
    path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  syntax:
    content: public void AddProvider(ILoggerProvider provider)
    content.vb: Public Sub AddProvider(provider As ILoggerProvider)
    parameters:
    - id: provider
      type: Microsoft.Extensions.Logging.ILoggerProvider
  implements:
  - Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.Dispose
  commentId: M:Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.Dispose
  id: Dispose
  parent: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ListLoggerFactory.Dispose()
  fullName: Microsoft.EntityFrameworkCore.Tests.TestUtilities.ListLoggerFactory.Dispose()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Dispose
    path: test/Microsoft.EntityFrameworkCore.Tests/TestUtilities/ListLoggerFactory.cs
    startLine: 42
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  commentId: N:Microsoft.EntityFrameworkCore.Tests.TestUtilities
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  nameWithType: Microsoft.EntityFrameworkCore.Tests.TestUtilities
  fullName: Microsoft.EntityFrameworkCore.Tests.TestUtilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Logging.ILoggerFactory
  commentId: T:Microsoft.Extensions.Logging.ILoggerFactory
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: Microsoft.Extensions.Logging.ILoggerFactory
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}}
  commentId: T:System.Collections.Generic.List{System.Tuple{Microsoft.Extensions.Logging.LogLevel,System.String}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Tuple<LogLevel, String>>
  nameWithType: List<Tuple<LogLevel, String>>
  fullName: System.Collections.Generic.List<System.Tuple<Microsoft.Extensions.Logging.LogLevel, System.String>>
  nameWithType.vb: List(Of Tuple(Of LogLevel, String))
  fullname.vb: System.Collections.Generic.List(Of System.Tuple(Of Microsoft.Extensions.Logging.LogLevel, System.String))
  name.vb: List(Of Tuple(Of LogLevel, String))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Extensions.Logging.LogLevel
    name: LogLevel
    nameWithType: LogLevel
    fullName: Microsoft.Extensions.Logging.LogLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func{System.String,System.Boolean}
  commentId: T:System.Func{System.String,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<String, Boolean>
  nameWithType: Func<String, Boolean>
  fullName: System.Func<System.String, System.Boolean>
  nameWithType.vb: Func(Of String, Boolean)
  fullname.vb: System.Func(Of System.String, System.Boolean)
  name.vb: Func(Of String, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)
  commentId: M:Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)
  parent: Microsoft.Extensions.Logging.ILoggerFactory
  isExternal: true
  name: CreateLogger(String)
  nameWithType: ILoggerFactory.CreateLogger(String)
  fullName: Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)
    name: CreateLogger
    nameWithType: ILoggerFactory.CreateLogger
    fullName: Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger(System.String)
    name: CreateLogger
    nameWithType: ILoggerFactory.CreateLogger
    fullName: Microsoft.Extensions.Logging.ILoggerFactory.CreateLogger
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  commentId: M:Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  parent: Microsoft.Extensions.Logging.ILoggerFactory
  isExternal: true
  name: AddProvider(ILoggerProvider)
  nameWithType: ILoggerFactory.AddProvider(ILoggerProvider)
  fullName: Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
    name: AddProvider
    nameWithType: ILoggerFactory.AddProvider
    fullName: Microsoft.Extensions.Logging.ILoggerFactory.AddProvider
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.ILoggerProvider
    name: ILoggerProvider
    nameWithType: ILoggerProvider
    fullName: Microsoft.Extensions.Logging.ILoggerProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)
    name: AddProvider
    nameWithType: ILoggerFactory.AddProvider
    fullName: Microsoft.Extensions.Logging.ILoggerFactory.AddProvider
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Extensions.Logging.ILoggerProvider
    name: ILoggerProvider
    nameWithType: ILoggerProvider
    fullName: Microsoft.Extensions.Logging.ILoggerProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILoggerProvider
  commentId: T:Microsoft.Extensions.Logging.ILoggerProvider
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILoggerProvider
  nameWithType: ILoggerProvider
  fullName: Microsoft.Extensions.Logging.ILoggerProvider
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
