### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  id: QueryOptimizer
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.FlattenSubQuery(SubQueryExpression,IFromClause,QueryModel,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause,QueryModel,GroupJoinClause)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause,QueryModel,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  langs:
  - csharp
  - vb
  name: QueryOptimizer
  nameWithType: QueryOptimizer
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QueryOptimizer
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class QueryOptimizer : SubQueryFromClauseFlattener, IQueryOptimizer'
    content.vb: >-
      Public Class QueryOptimizer
          Inherits SubQueryFromClauseFlattener
          Implements IQueryOptimizer
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  id: Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  langs:
  - csharp
  - vb
  name: Optimize(IReadOnlyCollection<IQueryAnnotation>, QueryModel)
  nameWithType: QueryOptimizer.Optimize(IReadOnlyCollection<IQueryAnnotation>, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation>, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Optimize
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
    startLine: 56
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void Optimize(IReadOnlyCollection<IQueryAnnotation> queryAnnotations, QueryModel queryModel)
    content.vb: Public Overridable Sub Optimize(queryAnnotations As IReadOnlyCollection(Of IQueryAnnotation), queryModel As QueryModel)
    parameters:
    - id: queryAnnotations
      type: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
    - id: queryModel
      type: QueryModel
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  nameWithType.vb: QueryOptimizer.Optimize(IReadOnlyCollection(Of IQueryAnnotation), QueryModel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation), QueryModel)
  name.vb: Optimize(IReadOnlyCollection(Of IQueryAnnotation), QueryModel)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause,QueryModel,System.Int32)
  id: VisitJoinClause(JoinClause,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  langs:
  - csharp
  - vb
  name: VisitJoinClause(JoinClause, QueryModel, Int32)
  nameWithType: QueryOptimizer.VisitJoinClause(JoinClause, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: VisitJoinClause
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
    startLine: 69
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override void VisitJoinClause(JoinClause joinClause, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitJoinClause(joinClause As JoinClause, queryModel As QueryModel, index As Integer)
    parameters:
    - id: joinClause
      type: JoinClause
    - id: queryModel
      type: QueryModel
    - id: index
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause,QueryModel,GroupJoinClause)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause,QueryModel,GroupJoinClause)
  id: VisitJoinClause(JoinClause,QueryModel,GroupJoinClause)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  langs:
  - csharp
  - vb
  name: VisitJoinClause(JoinClause, QueryModel, GroupJoinClause)
  nameWithType: QueryOptimizer.VisitJoinClause(JoinClause, QueryModel, GroupJoinClause)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitJoinClause(JoinClause, QueryModel, GroupJoinClause)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: VisitJoinClause
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
    startLine: 80
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override void VisitJoinClause(JoinClause joinClause, QueryModel queryModel, GroupJoinClause groupJoinClause)
    content.vb: Public Overrides Sub VisitJoinClause(joinClause As JoinClause, queryModel As QueryModel, groupJoinClause As GroupJoinClause)
    parameters:
    - id: joinClause
      type: JoinClause
    - id: queryModel
      type: QueryModel
    - id: groupJoinClause
      type: GroupJoinClause
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  id: VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  langs:
  - csharp
  - vb
  name: VisitGroupJoinClause(GroupJoinClause, QueryModel, Int32)
  nameWithType: QueryOptimizer.VisitGroupJoinClause(GroupJoinClause, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitGroupJoinClause(GroupJoinClause, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: VisitGroupJoinClause
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
    startLine: 116
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override void VisitGroupJoinClause(GroupJoinClause groupJoinClause, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitGroupJoinClause(groupJoinClause As GroupJoinClause, queryModel As QueryModel, index As Integer)
    parameters:
    - id: groupJoinClause
      type: GroupJoinClause
    - id: queryModel
      type: QueryModel
    - id: index
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.FlattenSubQuery(SubQueryExpression,IFromClause,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.FlattenSubQuery(SubQueryExpression,IFromClause,QueryModel,System.Int32)
  id: FlattenSubQuery(SubQueryExpression,IFromClause,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  langs:
  - csharp
  - vb
  name: FlattenSubQuery(SubQueryExpression, IFromClause, QueryModel, Int32)
  nameWithType: QueryOptimizer.FlattenSubQuery(SubQueryExpression, IFromClause, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.FlattenSubQuery(SubQueryExpression, IFromClause, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: FlattenSubQuery
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
    startLine: 159
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected override void FlattenSubQuery(SubQueryExpression subQueryExpression, IFromClause fromClause, QueryModel queryModel, int destinationIndex)
    content.vb: Protected Overrides Sub FlattenSubQuery(subQueryExpression As SubQueryExpression, fromClause As IFromClause, queryModel As QueryModel, destinationIndex As Integer)
    parameters:
    - id: subQueryExpression
      type: SubQueryExpression
    - id: fromClause
      type: IFromClause
    - id: queryModel
      type: QueryModel
    - id: destinationIndex
      type: System.Int32
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  id: VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer
  langs:
  - csharp
  - vb
  name: VisitResultOperator(ResultOperatorBase, QueryModel, Int32)
  nameWithType: QueryOptimizer.VisitResultOperator(ResultOperatorBase, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.VisitResultOperator(ResultOperatorBase, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: VisitResultOperator
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryOptimizer.cs
    startLine: 234
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override void VisitResultOperator(ResultOperatorBase resultOperator, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitResultOperator(resultOperator As ResultOperatorBase, queryModel As QueryModel, index As Integer)
    parameters:
    - id: resultOperator
      type: ResultOperatorBase
    - id: queryModel
      type: QueryModel
    - id: index
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IQueryOptimizer
  nameWithType: IQueryOptimizer
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<QueryOptimizer, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryOptimizer, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of QueryOptimizer, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of QueryOptimizer, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<QueryOptimizer, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryOptimizer, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of QueryOptimizer, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of QueryOptimizer, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizer, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  isExternal: true
  name: Optimize(IReadOnlyCollection<IQueryAnnotation>, QueryModel)
  nameWithType: IQueryOptimizer.Optimize(IReadOnlyCollection<IQueryAnnotation>, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation>, QueryModel)
  nameWithType.vb: IQueryOptimizer.Optimize(IReadOnlyCollection(Of IQueryAnnotation), QueryModel)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation), QueryModel)
  name.vb: Optimize(IReadOnlyCollection(Of IQueryAnnotation), QueryModel)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
    name: Optimize
    nameWithType: IQueryOptimizer.Optimize
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: QueryModel
    name: QueryModel
    nameWithType: QueryModel
    fullName: QueryModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
    name: Optimize
    nameWithType: IQueryOptimizer.Optimize
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: QueryModel
    name: QueryModel
    nameWithType: QueryModel
    fullName: QueryModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IQueryAnnotation>
  nameWithType: IReadOnlyCollection<IQueryAnnotation>
  fullName: System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation>
  nameWithType.vb: IReadOnlyCollection(Of IQueryAnnotation)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation)
  name.vb: IReadOnlyCollection(Of IQueryAnnotation)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: )
    nameWithType: )
    fullName: )
- uid: QueryModel
  isExternal: true
  name: QueryModel
  nameWithType: QueryModel
  fullName: QueryModel
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: JoinClause
  isExternal: true
  name: JoinClause
  nameWithType: JoinClause
  fullName: JoinClause
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GroupJoinClause
  isExternal: true
  name: GroupJoinClause
  nameWithType: GroupJoinClause
  fullName: GroupJoinClause
- uid: SubQueryExpression
  isExternal: true
  name: SubQueryExpression
  nameWithType: SubQueryExpression
  fullName: SubQueryExpression
- uid: IFromClause
  commentId: '!:IFromClause'
  isExternal: true
  name: IFromClause
  nameWithType: IFromClause
  fullName: IFromClause
- uid: ResultOperatorBase
  isExternal: true
  name: ResultOperatorBase
  nameWithType: ResultOperatorBase
  fullName: ResultOperatorBase
