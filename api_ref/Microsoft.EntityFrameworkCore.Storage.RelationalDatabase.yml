### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  id: RelationalDatabase
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory,Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer,Microsoft.EntityFrameworkCore.Update.IBatchExecutor,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: RelationalDatabase
  nameWithType: RelationalDatabase
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationalDatabase
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    The main interaction point between a context and the database provider.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: 'public class RelationalDatabase : Database, IDatabase'
    content.vb: >-
      Public Class RelationalDatabase
          Inherits Database
          Implements IDatabase
  inheritance:
  - System.Object
  - Microsoft.EntityFrameworkCore.Storage.Database
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDatabase
  inheritedMembers:
  - Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery``1(Remotion.Linq.QueryModel)
  - Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery``1(Remotion.Linq.QueryModel)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory,Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer,Microsoft.EntityFrameworkCore.Update.IBatchExecutor,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory,Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer,Microsoft.EntityFrameworkCore.Update.IBatchExecutor,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)
  id: '#ctor(Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory,Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer,Microsoft.EntityFrameworkCore.Update.IBatchExecutor,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)'
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  langs:
  - csharp
  - vb
  name: RelationalDatabase(IQueryCompilationContextFactory, ICommandBatchPreparer, IBatchExecutor, IRelationalConnection)
  nameWithType: RelationalDatabase.RelationalDatabase(IQueryCompilationContextFactory, ICommandBatchPreparer, IBatchExecutor, IRelationalConnection)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.RelationalDatabase(Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory, Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer, Microsoft.EntityFrameworkCore.Update.IBatchExecutor, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalDatabase\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RelationalDatabase(IQueryCompilationContextFactory queryCompilationContextFactory, ICommandBatchPreparer batchPreparer, IBatchExecutor batchExecutor, IRelationalConnection connection)
    content.vb: Public Sub New(queryCompilationContextFactory As IQueryCompilationContextFactory, batchPreparer As ICommandBatchPreparer, batchExecutor As IBatchExecutor, connection As IRelationalConnection)
    parameters:
    - id: queryCompilationContextFactory
      type: Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: batchPreparer
      type: Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: batchExecutor
      type: Microsoft.EntityFrameworkCore.Update.IBatchExecutor
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Update.IBatchExecutor" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" data-throw-if-not-resolved="false"></xref> to be used. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  id: SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  langs:
  - csharp
  - vb
  name: SaveChanges(IReadOnlyList<IUpdateEntry>)
  nameWithType: RelationalDatabase.SaveChanges(IReadOnlyList<IUpdateEntry>)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChanges
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
    startLine: 56
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Persists changes from the supplied entries to the database.\n"
  example: []
  syntax:
    content: public override int SaveChanges(IReadOnlyList<IUpdateEntry> entries)
    content.vb: Public Overrides Function SaveChanges(entries As IReadOnlyList(Of IUpdateEntry)) As Integer
    parameters:
    - id: entries
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
      description: 'Entries representing the changes to be persisted. '
    return:
      type: System.Int32
      description: 'The number of state entries persisted to the database. '
  overridden: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  nameWithType.vb: RelationalDatabase.SaveChanges(IReadOnlyList(Of IUpdateEntry))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry))
  name.vb: SaveChanges(IReadOnlyList(Of IUpdateEntry))
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  id: SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(IReadOnlyList<IUpdateEntry>, CancellationToken)
  nameWithType: RelationalDatabase.SaveChangesAsync(IReadOnlyList<IUpdateEntry>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SaveChangesAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabase.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously persists changes from the supplied entries to the database.\n"
  example: []
  syntax:
    content: public override Task<int> SaveChangesAsync(IReadOnlyList<IUpdateEntry> entries, CancellationToken cancellationToken = null)
    content.vb: Public Overrides Function SaveChangesAsync(entries As IReadOnlyList(Of IUpdateEntry), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: entries
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
      description: 'Entries representing the changes to be persisted. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n    A task that represents the asynchronous save operation. The task result contains the\n    number of entries persisted to the database.\n"
  overridden: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  nameWithType.vb: RelationalDatabase.SaveChangesAsync(IReadOnlyList(Of IUpdateEntry), CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry), System.Threading.CancellationToken)
  name.vb: SaveChangesAsync(IReadOnlyList(Of IUpdateEntry), CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Storage.Database
  commentId: T:Microsoft.EntityFrameworkCore.Storage.Database
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Database
  nameWithType: Database
  fullName: Microsoft.EntityFrameworkCore.Storage.Database
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabase
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDatabase
  nameWithType: IDatabase
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase
- uid: Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery``1(Remotion.Linq.QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery``1(Remotion.Linq.QueryModel)
  parent: Microsoft.EntityFrameworkCore.Storage.Database
  isExternal: true
  name: CompileQuery<TResult>(QueryModel)
  nameWithType: Database.CompileQuery<TResult>(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery<TResult>(Remotion.Linq.QueryModel)
  nameWithType.vb: Database.CompileQuery(Of TResult)(QueryModel)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery(Of TResult)(Remotion.Linq.QueryModel)
  name.vb: CompileQuery(Of TResult)(QueryModel)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery``1(Remotion.Linq.QueryModel)
    name: CompileQuery<TResult>
    nameWithType: Database.CompileQuery<TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.QueryModel
    name: QueryModel
    nameWithType: QueryModel
    fullName: Remotion.Linq.QueryModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery``1(Remotion.Linq.QueryModel)
    name: CompileQuery(Of TResult)
    nameWithType: Database.CompileQuery(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.QueryModel
    name: QueryModel
    nameWithType: QueryModel
    fullName: Remotion.Linq.QueryModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery``1(Remotion.Linq.QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery``1(Remotion.Linq.QueryModel)
  parent: Microsoft.EntityFrameworkCore.Storage.Database
  isExternal: true
  name: CompileAsyncQuery<TResult>(QueryModel)
  nameWithType: Database.CompileAsyncQuery<TResult>(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery<TResult>(Remotion.Linq.QueryModel)
  nameWithType.vb: Database.CompileAsyncQuery(Of TResult)(QueryModel)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery(Of TResult)(Remotion.Linq.QueryModel)
  name.vb: CompileAsyncQuery(Of TResult)(QueryModel)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery``1(Remotion.Linq.QueryModel)
    name: CompileAsyncQuery<TResult>
    nameWithType: Database.CompileAsyncQuery<TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.QueryModel
    name: QueryModel
    nameWithType: QueryModel
    fullName: Remotion.Linq.QueryModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery``1(Remotion.Linq.QueryModel)
    name: CompileAsyncQuery(Of TResult)
    nameWithType: Database.CompileAsyncQuery(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.CompileAsyncQuery(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.QueryModel
    name: QueryModel
    nameWithType: QueryModel
    fullName: Remotion.Linq.QueryModel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
  isExternal: false
  name: RelationalDatabase
  nameWithType: RelationalDatabase
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabase
- uid: Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: IQueryCompilationContextFactory
  nameWithType: IQueryCompilationContextFactory
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory
- uid: Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer
  commentId: T:Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer
  parent: Microsoft.EntityFrameworkCore.Update
  isExternal: false
  name: ICommandBatchPreparer
  nameWithType: ICommandBatchPreparer
  fullName: Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer
- uid: Microsoft.EntityFrameworkCore.Update.IBatchExecutor
  commentId: T:Microsoft.EntityFrameworkCore.Update.IBatchExecutor
  parent: Microsoft.EntityFrameworkCore.Update
  isExternal: false
  name: IBatchExecutor
  nameWithType: IBatchExecutor
  fullName: Microsoft.EntityFrameworkCore.Update.IBatchExecutor
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalConnection
  nameWithType: IRelationalConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: Microsoft.EntityFrameworkCore.Update
  commentId: N:Microsoft.EntityFrameworkCore.Update
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Update
  nameWithType: Microsoft.EntityFrameworkCore.Update
  fullName: Microsoft.EntityFrameworkCore.Update
- uid: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  parent: Microsoft.EntityFrameworkCore.Storage.Database
  isExternal: true
  name: SaveChanges(IReadOnlyList<IUpdateEntry>)
  nameWithType: Database.SaveChanges(IReadOnlyList<IUpdateEntry>)
  fullName: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>)
  nameWithType.vb: Database.SaveChanges(IReadOnlyList(Of IUpdateEntry))
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry))
  name.vb: SaveChanges(IReadOnlyList(Of IUpdateEntry))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
    name: SaveChanges
    nameWithType: Database.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
    name: SaveChanges
    nameWithType: Database.SaveChanges
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.SaveChanges
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IUpdateEntry>
  nameWithType: IReadOnlyList<IUpdateEntry>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>
  nameWithType.vb: IReadOnlyList(Of IUpdateEntry)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry)
  name.vb: IReadOnlyList(Of IUpdateEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.Database
  isExternal: true
  name: SaveChangesAsync(IReadOnlyList<IUpdateEntry>, CancellationToken)
  nameWithType: Database.SaveChangesAsync(IReadOnlyList<IUpdateEntry>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>, System.Threading.CancellationToken)
  nameWithType.vb: Database.SaveChangesAsync(IReadOnlyList(Of IUpdateEntry), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry), System.Threading.CancellationToken)
  name.vb: SaveChangesAsync(IReadOnlyList(Of IUpdateEntry), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
    name: SaveChangesAsync
    nameWithType: Database.SaveChangesAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
    name: SaveChangesAsync
    nameWithType: Database.SaveChangesAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.Database.SaveChangesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
