### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  id: RelationalExpressionExtensions
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  - Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  - Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(System.Linq.Expressions.Expression)
  langs:
  - csharp
  - vb
  name: RelationalExpressionExtensions
  nameWithType: RelationalExpressionExtensions
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationalExpressionExtensions
    path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
    startLine: 10
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Internal
  syntax:
    content: public static class RelationalExpressionExtensions
    content.vb: Public Module RelationalExpressionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(System.Linq.Expressions.Expression)
  id: TryGetColumnExpression(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  langs:
  - csharp
  - vb
  name: TryGetColumnExpression(Expression)
  nameWithType: RelationalExpressionExtensions.TryGetColumnExpression(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TryGetColumnExpression
    path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Internal
  syntax:
    content: public static ColumnExpression TryGetColumnExpression(this Expression expression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetColumnExpression(expression As Expression) As ColumnExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  overload: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression(System.Linq.Expressions.Expression)
  id: IsAliasWithColumnExpression(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsAliasWithColumnExpression(Expression)
  nameWithType: RelationalExpressionExtensions.IsAliasWithColumnExpression(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsAliasWithColumnExpression
    path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Internal
  syntax:
    content: public static bool IsAliasWithColumnExpression(this Expression expression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAliasWithColumnExpression(expression As Expression) As Boolean
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression(System.Linq.Expressions.Expression)
  id: IsAliasWithSelectExpression(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsAliasWithSelectExpression(Expression)
  nameWithType: RelationalExpressionExtensions.IsAliasWithSelectExpression(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsAliasWithSelectExpression
    path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Internal
  syntax:
    content: public static bool IsAliasWithSelectExpression(this Expression expression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAliasWithSelectExpression(expression As Expression) As Boolean
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  id: HasColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  langs:
  - csharp
  - vb
  name: HasColumnExpression(AliasExpression)
  nameWithType: RelationalExpressionExtensions.HasColumnExpression(AliasExpression)
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasColumnExpression
    path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Internal
  syntax:
    content: public static bool HasColumnExpression(this AliasExpression aliasExpression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasColumnExpression(aliasExpression As AliasExpression) As Boolean
    parameters:
    - id: aliasExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  id: TryGetColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  langs:
  - csharp
  - vb
  name: TryGetColumnExpression(AliasExpression)
  nameWithType: RelationalExpressionExtensions.TryGetColumnExpression(AliasExpression)
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TryGetColumnExpression
    path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Internal
  syntax:
    content: public static ColumnExpression TryGetColumnExpression(this AliasExpression aliasExpression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TryGetColumnExpression(aliasExpression As AliasExpression) As ColumnExpression
    parameters:
    - id: aliasExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
    return:
      type: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  overload: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression(System.Linq.Expressions.Expression)
  id: IsSimpleExpression(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsSimpleExpression(Expression)
  nameWithType: RelationalExpressionExtensions.IsSimpleExpression(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsSimpleExpression
    path: src/Microsoft.EntityFrameworkCore.Relational/Extensions/RelationalExpressionExtensions.cs
    startLine: 27
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Internal
  syntax:
    content: public static bool IsSimpleExpression(this Expression expression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSimpleExpression(expression As Expression) As Boolean
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression
  isExternal: false
  name: TryGetColumnExpression
  nameWithType: RelationalExpressionExtensions.TryGetColumnExpression
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.TryGetColumnExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: ColumnExpression
  nameWithType: ColumnExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Microsoft.EntityFrameworkCore.Query.Expressions
  commentId: N:Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Expressions
  nameWithType: Microsoft.EntityFrameworkCore.Query.Expressions
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression
  isExternal: false
  name: IsAliasWithColumnExpression
  nameWithType: RelationalExpressionExtensions.IsAliasWithColumnExpression
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithColumnExpression
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression
  isExternal: false
  name: IsAliasWithSelectExpression
  nameWithType: RelationalExpressionExtensions.IsAliasWithSelectExpression
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsAliasWithSelectExpression
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression
  isExternal: false
  name: HasColumnExpression
  nameWithType: RelationalExpressionExtensions.HasColumnExpression
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.HasColumnExpression
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: AliasExpression
  nameWithType: AliasExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
- uid: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression
  isExternal: false
  name: IsSimpleExpression
  nameWithType: RelationalExpressionExtensions.IsSimpleExpression
  fullName: Microsoft.EntityFrameworkCore.Internal.RelationalExpressionExtensions.IsSimpleExpression
