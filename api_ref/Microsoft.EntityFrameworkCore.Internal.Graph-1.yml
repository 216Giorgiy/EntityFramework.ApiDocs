### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1
  commentId: T:Microsoft.EntityFrameworkCore.Internal.Graph`1
  id: Graph`1
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
  - Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
  - Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  - Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices
  langs:
  - csharp
  - vb
  name: Graph<TVertex>
  nameWithType: Graph<TVertex>
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Graph
    path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public abstract class Graph<TVertex>
    content.vb: Public MustInherit Class Graph(Of TVertex)
    typeParameters:
    - id: TVertex
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Graph(Of TVertex)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex)
  name.vb: Graph(Of TVertex)
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices
  commentId: P:Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices
  id: Vertices
  parent: Microsoft.EntityFrameworkCore.Internal.Graph`1
  langs:
  - csharp
  - vb
  name: Vertices
  nameWithType: Graph<TVertex>.Vertices
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.Vertices
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Vertices
    path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<TVertex> Vertices { get; }
    content.vb: Public MustOverride ReadOnly Property Vertices As IEnumerable(Of TVertex)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TVertex}}
  overload: Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices*
  nameWithType.vb: Graph(Of TVertex).Vertices
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).Vertices
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
  id: GetOutgoingNeighbours(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Graph`1
  langs:
  - csharp
  - vb
  name: GetOutgoingNeighbours(TVertex)
  nameWithType: Graph<TVertex>.GetOutgoingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetOutgoingNeighbours(TVertex)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOutgoingNeighbours
    path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<TVertex> GetOutgoingNeighbours(TVertex from)
    content.vb: Public MustOverride Function GetOutgoingNeighbours(from As TVertex) As IEnumerable(Of TVertex)
    parameters:
    - id: from
      type: '{TVertex}'
    return:
      type: System.Collections.Generic.IEnumerable{{TVertex}}
  overload: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours*
  nameWithType.vb: Graph(Of TVertex).GetOutgoingNeighbours(TVertex)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetOutgoingNeighbours(TVertex)
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
  id: GetIncomingNeighbours(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Graph`1
  langs:
  - csharp
  - vb
  name: GetIncomingNeighbours(TVertex)
  nameWithType: Graph<TVertex>.GetIncomingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetIncomingNeighbours(TVertex)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetIncomingNeighbours
    path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public abstract IEnumerable<TVertex> GetIncomingNeighbours(TVertex to)
    content.vb: Public MustOverride Function GetIncomingNeighbours(to As TVertex) As IEnumerable(Of TVertex)
    parameters:
    - id: to
      type: '{TVertex}'
    return:
      type: System.Collections.Generic.IEnumerable{{TVertex}}
  overload: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours*
  nameWithType.vb: Graph(Of TVertex).GetIncomingNeighbours(TVertex)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetIncomingNeighbours(TVertex)
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  id: GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  parent: Microsoft.EntityFrameworkCore.Internal.Graph`1
  langs:
  - csharp
  - vb
  name: GetUnreachableVertices(IReadOnlyList<TVertex>)
  nameWithType: Graph<TVertex>.GetUnreachableVertices(IReadOnlyList<TVertex>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList<TVertex>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetUnreachableVertices
    path: src/Microsoft.EntityFrameworkCore/Internal/Graph.cs
    startLine: 36
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual ISet<TVertex> GetUnreachableVertices(IReadOnlyList<TVertex> roots)
    content.vb: Public Overridable Function GetUnreachableVertices(roots As IReadOnlyList(Of TVertex)) As ISet(Of TVertex)
    parameters:
    - id: roots
      type: System.Collections.Generic.IReadOnlyList{{TVertex}}
    return:
      type: ISet{{TVertex}}
  overload: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices*
  nameWithType.vb: Graph(Of TVertex).GetUnreachableVertices(IReadOnlyList(Of TVertex))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetUnreachableVertices(System.Collections.Generic.IReadOnlyList(Of TVertex))
  name.vb: GetUnreachableVertices(IReadOnlyList(Of TVertex))
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices
  isExternal: false
  name: Vertices
  nameWithType: Graph<TVertex>.Vertices
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.Vertices
  nameWithType.vb: Graph(Of TVertex).Vertices
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).Vertices
- uid: System.Collections.Generic.IEnumerable{{TVertex}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TVertex>
  nameWithType: IEnumerable<TVertex>
  fullName: System.Collections.Generic.IEnumerable<TVertex>
  nameWithType.vb: IEnumerable(Of TVertex)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TVertex)
  name.vb: IEnumerable(Of TVertex)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours
  isExternal: false
  name: GetOutgoingNeighbours
  nameWithType: Graph<TVertex>.GetOutgoingNeighbours
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetOutgoingNeighbours
  nameWithType.vb: Graph(Of TVertex).GetOutgoingNeighbours
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetOutgoingNeighbours
- uid: '{TVertex}'
  commentId: '!:TVertex'
  definition: TVertex
  name: TVertex
  nameWithType: TVertex
  fullName: TVertex
- uid: TVertex
  isExternal: false
  name: TVertex
  nameWithType: TVertex
  fullName: TVertex
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours
  isExternal: false
  name: GetIncomingNeighbours
  nameWithType: Graph<TVertex>.GetIncomingNeighbours
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetIncomingNeighbours
  nameWithType.vb: Graph(Of TVertex).GetIncomingNeighbours
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetIncomingNeighbours
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices
  isExternal: false
  name: GetUnreachableVertices
  nameWithType: Graph<TVertex>.GetUnreachableVertices
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetUnreachableVertices
  nameWithType.vb: Graph(Of TVertex).GetUnreachableVertices
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetUnreachableVertices
- uid: System.Collections.Generic.IReadOnlyList{{TVertex}}
  commentId: T:System.Collections.Generic.IReadOnlyList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<TVertex>
  nameWithType: IReadOnlyList<TVertex>
  fullName: System.Collections.Generic.IReadOnlyList<TVertex>
  nameWithType.vb: IReadOnlyList(Of TVertex)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of TVertex)
  name.vb: IReadOnlyList(Of TVertex)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: ISet{{TVertex}}
  commentId: '!:ISet{`0}'
  definition: ISet`1
  name: ISet<TVertex>
  nameWithType: ISet<TVertex>
  fullName: ISet<TVertex>
  nameWithType.vb: ISet(Of TVertex)
  fullname.vb: ISet(Of TVertex)
  name.vb: ISet(Of TVertex)
  spec.csharp:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: ISet`1
  isExternal: true
  name: ISet<>
  nameWithType: ISet<>
  fullName: ISet<>
  nameWithType.vb: ISet(Of )
  fullname.vb: ISet(Of )
  name.vb: ISet(Of )
  spec.csharp:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ISet`1
    name: ISet
    nameWithType: ISet
    fullName: ISet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
