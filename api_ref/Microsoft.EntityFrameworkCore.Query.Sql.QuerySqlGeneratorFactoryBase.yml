### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  commentId: T:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  id: QuerySqlGeneratorFactoryBase
  parent: Microsoft.EntityFrameworkCore.Query.Sql
  children:
  - Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper)
  - Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CommandBuilderFactory
  - Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.ParameterNameGeneratorFactory
  - Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.RelationalTypeMapper
  - Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.SqlGenerationHelper
  langs:
  - csharp
  - vb
  name: QuerySqlGeneratorFactoryBase
  nameWithType: QuerySqlGeneratorFactoryBase
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QuerySqlGeneratorFactoryBase
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    A base class for query SQL generators.\n"
  example: []
  syntax:
    content: 'public abstract class QuerySqlGeneratorFactoryBase : IQuerySqlGeneratorFactory'
    content.vb: >-
      Public MustInherit Class QuerySqlGeneratorFactoryBase
          Implements IQuerySqlGeneratorFactory
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper)
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper)'
  parent: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  langs:
  - csharp
  - vb
  name: QuerySqlGeneratorFactoryBase(IRelationalCommandBuilderFactory, ISqlGenerationHelper, IParameterNameGeneratorFactory, IRelationalTypeMapper)
  nameWithType: QuerySqlGeneratorFactoryBase.QuerySqlGeneratorFactoryBase(IRelationalCommandBuilderFactory, ISqlGenerationHelper, IParameterNameGeneratorFactory, IRelationalTypeMapper)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.QuerySqlGeneratorFactoryBase(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory, Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper, Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory, Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Specialised constructor for use only by derived class.\n"
  example: []
  syntax:
    content: protected QuerySqlGeneratorFactoryBase(IRelationalCommandBuilderFactory commandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IRelationalTypeMapper relationalTypeMapper)
    content.vb: Protected Sub New(commandBuilderFactory As IRelationalCommandBuilderFactory, sqlGenerationHelper As ISqlGenerationHelper, parameterNameGeneratorFactory As IParameterNameGeneratorFactory, relationalTypeMapper As IRelationalTypeMapper)
    parameters:
    - id: commandBuilderFactory
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
      description: 'The command builder factory. '
    - id: sqlGenerationHelper
      type: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
      description: 'The SQL generation helper. '
    - id: parameterNameGeneratorFactory
      type: Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
      description: 'The parameter name generator factory. '
    - id: relationalTypeMapper
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
      description: 'The relational type mapper. '
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CommandBuilderFactory
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CommandBuilderFactory
  id: CommandBuilderFactory
  parent: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  langs:
  - csharp
  - vb
  name: CommandBuilderFactory
  nameWithType: QuerySqlGeneratorFactoryBase.CommandBuilderFactory
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CommandBuilderFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CommandBuilderFactory
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets the command builder factory.\n"
  example: []
  syntax:
    content: protected virtual IRelationalCommandBuilderFactory CommandBuilderFactory { get; }
    content.vb: Protected Overridable ReadOnly Property CommandBuilderFactory As IRelationalCommandBuilderFactory
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
      description: "\n    The command builder factory.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.SqlGenerationHelper
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.SqlGenerationHelper
  id: SqlGenerationHelper
  parent: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  langs:
  - csharp
  - vb
  name: SqlGenerationHelper
  nameWithType: QuerySqlGeneratorFactoryBase.SqlGenerationHelper
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.SqlGenerationHelper
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlGenerationHelper
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets the SQL generation helper.\n"
  example: []
  syntax:
    content: protected virtual ISqlGenerationHelper SqlGenerationHelper { get; }
    content.vb: Protected Overridable ReadOnly Property SqlGenerationHelper As ISqlGenerationHelper
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
      description: "\n    The SQL generation helper.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.ParameterNameGeneratorFactory
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.ParameterNameGeneratorFactory
  id: ParameterNameGeneratorFactory
  parent: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  langs:
  - csharp
  - vb
  name: ParameterNameGeneratorFactory
  nameWithType: QuerySqlGeneratorFactoryBase.ParameterNameGeneratorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.ParameterNameGeneratorFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ParameterNameGeneratorFactory
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 63
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets the parameter name generator factory.\n"
  example: []
  syntax:
    content: protected virtual IParameterNameGeneratorFactory ParameterNameGeneratorFactory { get; }
    content.vb: Protected Overridable ReadOnly Property ParameterNameGeneratorFactory As IParameterNameGeneratorFactory
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
      description: "\n    The parameter name generator factory.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.RelationalTypeMapper
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.RelationalTypeMapper
  id: RelationalTypeMapper
  parent: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  langs:
  - csharp
  - vb
  name: RelationalTypeMapper
  nameWithType: QuerySqlGeneratorFactoryBase.RelationalTypeMapper
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.RelationalTypeMapper
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationalTypeMapper
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 71
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets the relational type mapper.\n"
  example: []
  syntax:
    content: protected virtual IRelationalTypeMapper RelationalTypeMapper { get; }
    content.vb: Protected Overridable ReadOnly Property RelationalTypeMapper As IRelationalTypeMapper
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
      description: "\n    The relational type mapper.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  id: CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  langs:
  - csharp
  - vb
  name: CreateDefault(SelectExpression)
  nameWithType: QuerySqlGeneratorFactoryBase.CreateDefault(SelectExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateDefault
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 80
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Creates a default query SQL generator.\n"
  example: []
  syntax:
    content: public abstract IQuerySqlGenerator CreateDefault(SelectExpression selectExpression)
    content.vb: Public MustOverride Function CreateDefault(selectExpression As SelectExpression) As IQuerySqlGenerator
    parameters:
    - id: selectExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: 'The select expression. '
    return:
      type: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
      description: "\n    The new default query SQL generator.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
  id: CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase
  langs:
  - csharp
  - vb
  name: CreateFromSql(SelectExpression, String, Expression)
  nameWithType: QuerySqlGeneratorFactoryBase.CreateFromSql(SelectExpression, String, Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.QuerySqlGeneratorFactoryBase.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, System.String, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateFromSql
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/QuerySqlGeneratorFactoryBase.cs
    startLine: 91
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Creates a query SQL generator for a FromSql query.\n"
  example: []
  syntax:
    content: public virtual IQuerySqlGenerator CreateFromSql(SelectExpression selectExpression, string sql, Expression arguments)
    content.vb: Public Overridable Function CreateFromSql(selectExpression As SelectExpression, sql As String, arguments As Expression) As IQuerySqlGenerator
    parameters:
    - id: selectExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: 'The select expression. '
    - id: sql
      type: System.String
      description: 'The SQL. '
    - id: arguments
      type: System.Linq.Expressions.Expression
      description: 'The arguments. '
    return:
      type: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
      description: "\n    The query SQL generator.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Query.Sql
  commentId: N:Microsoft.EntityFrameworkCore.Query.Sql
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Sql
  nameWithType: Microsoft.EntityFrameworkCore.Query.Sql
  fullName: Microsoft.EntityFrameworkCore.Query.Sql
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory
  parent: Microsoft.EntityFrameworkCore.Query.Sql
  isExternal: false
  name: IQuerySqlGeneratorFactory
  nameWithType: IQuerySqlGeneratorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalCommandBuilderFactory
  nameWithType: IRelationalCommandBuilderFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
- uid: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ISqlGenerationHelper
  nameWithType: ISqlGenerationHelper
  fullName: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
- uid: Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IParameterNameGeneratorFactory
  nameWithType: IParameterNameGeneratorFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalTypeMapper
  nameWithType: IRelationalTypeMapper
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory
  isExternal: false
  name: CreateDefault(SelectExpression)
  nameWithType: IQuerySqlGeneratorFactory.CreateDefault(SelectExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
    name: CreateDefault
    nameWithType: IQuerySqlGeneratorFactory.CreateDefault
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
    name: SelectExpression
    nameWithType: SelectExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
    name: CreateDefault
    nameWithType: IQuerySqlGeneratorFactory.CreateDefault
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateDefault
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
    name: SelectExpression
    nameWithType: SelectExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: SelectExpression
  nameWithType: SelectExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  commentId: T:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  parent: Microsoft.EntityFrameworkCore.Query.Sql
  isExternal: false
  name: IQuerySqlGenerator
  nameWithType: IQuerySqlGenerator
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
- uid: Microsoft.EntityFrameworkCore.Query.Expressions
  commentId: N:Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Expressions
  nameWithType: Microsoft.EntityFrameworkCore.Query.Expressions
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory
  isExternal: true
  name: CreateFromSql(SelectExpression, String, Expression)
  nameWithType: IQuerySqlGeneratorFactory.CreateFromSql(SelectExpression, String, Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, System.String, System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
    name: CreateFromSql
    nameWithType: IQuerySqlGeneratorFactory.CreateFromSql
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
    name: SelectExpression
    nameWithType: SelectExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.String,System.Linq.Expressions.Expression)
    name: CreateFromSql
    nameWithType: IQuerySqlGeneratorFactory.CreateFromSql
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGeneratorFactory.CreateFromSql
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
    name: SelectExpression
    nameWithType: SelectExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
