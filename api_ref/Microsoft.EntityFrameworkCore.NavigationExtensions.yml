### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.NavigationExtensions
  commentId: T:Microsoft.EntityFrameworkCore.NavigationExtensions
  id: NavigationExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  - Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  - Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  - Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  langs:
  - csharp
  - vb
  name: NavigationExtensions
  nameWithType: NavigationExtensions
  fullName: Microsoft.EntityFrameworkCore.NavigationExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: NavigationExtensions
    path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Extension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.INavigation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class NavigationExtensions
    content.vb: Public Module NavigationExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  commentId: M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  id: IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.NavigationExtensions
  langs:
  - csharp
  - vb
  name: IsDependentToPrincipal(INavigation)
  nameWithType: NavigationExtensions.IsDependentToPrincipal(INavigation)
  fullName: Microsoft.EntityFrameworkCore.NavigationExtensions.IsDependentToPrincipal(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IsDependentToPrincipal
    path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets a value indicating whether the given navigation property is the navigation property on the dependent entity\n    type that points to the principal entity.\n"
  example: []
  syntax:
    content: public static bool IsDependentToPrincipal(this INavigation navigation)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDependentToPrincipal(navigation As INavigation) As Boolean
    parameters:
    - id: navigation
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
      description: 'The navigation property to check. '
    return:
      type: System.Boolean
      description: "\n    True if the given navigation property is the navigation property on the dependent entity\n    type that points to the principal entity, otherwise false.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  commentId: M:Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  id: IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.NavigationExtensions
  langs:
  - csharp
  - vb
  name: IsCollection(INavigation)
  nameWithType: NavigationExtensions.IsCollection(INavigation)
  fullName: Microsoft.EntityFrameworkCore.NavigationExtensions.IsCollection(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IsCollection
    path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
    startLine: 34
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets a value indicating whether the given navigation property is a collection property.\n"
  example: []
  syntax:
    content: public static bool IsCollection(this INavigation navigation)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsCollection(navigation As INavigation) As Boolean
    parameters:
    - id: navigation
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
      description: 'The navigation property to check. '
    return:
      type: System.Boolean
      description: "\n    True if this is a collection property, false if it is a reference property.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  commentId: M:Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  id: FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.NavigationExtensions
  langs:
  - csharp
  - vb
  name: FindInverse(INavigation)
  nameWithType: NavigationExtensions.FindInverse(INavigation)
  fullName: Microsoft.EntityFrameworkCore.NavigationExtensions.FindInverse(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: FindInverse
    path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets the navigation property on the other end of the relationship. Returns null if\n    there is no navigation property defined on the other end of the relationship.\n"
  example: []
  syntax:
    content: public static INavigation FindInverse(this INavigation navigation)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindInverse(navigation As INavigation) As INavigation
    parameters:
    - id: navigation
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
      description: 'The navigation property to find the inverse of. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
      description: "\n    The inverse navigation, or null if none is defined.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  commentId: M:Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  id: GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.NavigationExtensions
  langs:
  - csharp
  - vb
  name: GetTargetType(INavigation)
  nameWithType: NavigationExtensions.GetTargetType(INavigation)
  fullName: Microsoft.EntityFrameworkCore.NavigationExtensions.GetTargetType(Microsoft.EntityFrameworkCore.Metadata.INavigation)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetTargetType
    path: src/Microsoft.EntityFrameworkCore/Extensions/NavigationExtensions.cs
    startLine: 64
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets the entity type that a given navigation property will hold an instance of\n    (or hold instances of if it is a collection navigation).\n"
  example: []
  syntax:
    content: public static IEntityType GetTargetType(this INavigation navigation)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetTargetType(navigation As INavigation) As IEntityType
    parameters:
    - id: navigation
      type: Microsoft.EntityFrameworkCore.Metadata.INavigation
      description: 'The navigation property to find the target entity type of. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The target entity type. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.INavigation
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: INavigation
  nameWithType: INavigation
  fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
