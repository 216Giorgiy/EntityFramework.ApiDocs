### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  id: EntityQueryModelVisitor
  parent: Microsoft.EntityFrameworkCore.Query
  children:
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor,Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler,Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource,Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping(IQuerySource,System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(System.Linq.Expressions.MemberExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression``1(System.Linq.Expressions.MemberExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression``1(System.Linq.Expressions.Expression,System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},IQuerySource,``0})
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod(System.Type,System.Linq.Expressions.Expression,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression(AdditionalFromClause,QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(GroupJoinClause,QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(JoinClause,QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression(MainFromClause,QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor``1(QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda``1
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor``1(QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations(QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(Microsoft.EntityFrameworkCore.Query.IncludeSpecification,System.Type,System.Linq.Expressions.Expression,System.Boolean)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel,System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification})
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod(System.Reflection.MethodInfo)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryContextParameter
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression,IQuerySource,System.Boolean)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence(QueryModel,System.Type)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults``1(QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause(AdditionalFromClause,QueryModel,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause(JoinClause,QueryModel,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause(MainFromClause,QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering(Ordering,QueryModel,OrderByClause,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause,QueryModel)
  - Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause(WhereClause,QueryModel,System.Int32)
  langs:
  - csharp
  - vb
  name: EntityQueryModelVisitor
  nameWithType: EntityQueryModelVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityQueryModelVisitor
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n<p>\n    The core visitor that processes a query to be executed.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: 'public abstract class EntityQueryModelVisitor : QueryModelVisitorBase'
    content.vb: >-
      Public MustInherit Class EntityQueryModelVisitor
          Inherits QueryModelVisitorBase
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryContextParameter
  commentId: F:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryContextParameter
  id: QueryContextParameter
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: QueryContextParameter
  nameWithType: EntityQueryModelVisitor.QueryContextParameter
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryContextParameter
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QueryContextParameter
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 42
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nExpression to reference the <xref href=\"Microsoft.EntityFrameworkCore.Query.QueryContext\" data-throw-if-not-resolved=\"false\"></xref> parameter for a query.\n"
  example: []
  syntax:
    content: public static readonly ParameterExpression QueryContextParameter
    content.vb: Public Shared ReadOnly QueryContextParameter As ParameterExpression
    return:
      type: System.Linq.Expressions.ParameterExpression
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod(System.Reflection.MethodInfo)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod(System.Reflection.MethodInfo)
  id: IsPropertyMethod(System.Reflection.MethodInfo)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: IsPropertyMethod(MethodInfo)
  nameWithType: EntityQueryModelVisitor.IsPropertyMethod(MethodInfo)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod(System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsPropertyMethod
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 54
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nDetermines if a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> is referencing the <xref href=\"Microsoft.EntityFrameworkCore.EF.Property%60%601(System.Object%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> method.\n"
  example: []
  syntax:
    content: public static bool IsPropertyMethod(MethodInfo methodInfo)
    content.vb: Public Shared Function IsPropertyMethod(methodInfo As MethodInfo) As Boolean
    parameters:
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: 'The method info to check. '
    return:
      type: System.Boolean
      description: "\nTrue if <em>methodInfo</em> is referencing <xref href=\"Microsoft.EntityFrameworkCore.EF.Property%60%601(System.Object%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>; otherwise fale;\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: CreatePropertyExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CreatePropertyExpression(Expression, IProperty)
  nameWithType: EntityQueryModelVisitor.CreatePropertyExpression(Expression, IProperty)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression(System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreatePropertyExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCreates an expression to access the given property on an given entity.\n"
  example: []
  syntax:
    content: public static Expression CreatePropertyExpression(Expression target, IProperty property)
    content.vb: Public Shared Function CreatePropertyExpression(target As Expression, property As IProperty) As Expression
    parameters:
    - id: target
      type: System.Linq.Expressions.Expression
      description: 'The entity. '
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
      description: 'The property to be accessed. '
    return:
      type: System.Linq.Expressions.Expression
      description: 'The newly created expression. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor,Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler,Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource,Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor,Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler,Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource,Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)
  id: '#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor,Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler,Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource,Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)'
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: EntityQueryModelVisitor(IQueryOptimizer, INavigationRewritingExpressionVisitorFactory, ISubQueryMemberPushDownExpressionVisitor, IQuerySourceTracingExpressionVisitorFactory, IEntityResultFindingExpressionVisitorFactory, ITaskBlockingExpressionVisitor, IMemberAccessBindingExpressionVisitorFactory, IOrderingExpressionVisitorFactory, IProjectionExpressionVisitorFactory, IEntityQueryableExpressionVisitorFactory, IQueryAnnotationExtractor, IResultOperatorHandler, IEntityMaterializerSource, IExpressionPrinter, QueryCompilationContext)
  nameWithType: EntityQueryModelVisitor.EntityQueryModelVisitor(IQueryOptimizer, INavigationRewritingExpressionVisitorFactory, ISubQueryMemberPushDownExpressionVisitor, IQuerySourceTracingExpressionVisitorFactory, IEntityResultFindingExpressionVisitorFactory, ITaskBlockingExpressionVisitor, IMemberAccessBindingExpressionVisitorFactory, IOrderingExpressionVisitorFactory, IProjectionExpressionVisitorFactory, IEntityQueryableExpressionVisitorFactory, IQueryAnnotationExtractor, IResultOperatorHandler, IEntityMaterializerSource, IExpressionPrinter, QueryCompilationContext)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.EntityQueryModelVisitor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor, Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler, Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource, Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter, Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 141
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected EntityQueryModelVisitor(IQueryOptimizer queryOptimizer, INavigationRewritingExpressionVisitorFactory navigationRewritingExpressionVisitorFactory, ISubQueryMemberPushDownExpressionVisitor subQueryMemberPushDownExpressionVisitor, IQuerySourceTracingExpressionVisitorFactory querySourceTracingExpressionVisitorFactory, IEntityResultFindingExpressionVisitorFactory entityResultFindingExpressionVisitorFactory, ITaskBlockingExpressionVisitor taskBlockingExpressionVisitor, IMemberAccessBindingExpressionVisitorFactory memberAccessBindingExpressionVisitorFactory, IOrderingExpressionVisitorFactory orderingExpressionVisitorFactory, IProjectionExpressionVisitorFactory projectionExpressionVisitorFactory, IEntityQueryableExpressionVisitorFactory entityQueryableExpressionVisitorFactory, IQueryAnnotationExtractor queryAnnotationExtractor, IResultOperatorHandler resultOperatorHandler, IEntityMaterializerSource entityMaterializerSource, IExpressionPrinter expressionPrinter, QueryCompilationContext queryCompilationContext)
    content.vb: Protected Sub New(queryOptimizer As IQueryOptimizer, navigationRewritingExpressionVisitorFactory As INavigationRewritingExpressionVisitorFactory, subQueryMemberPushDownExpressionVisitor As ISubQueryMemberPushDownExpressionVisitor, querySourceTracingExpressionVisitorFactory As IQuerySourceTracingExpressionVisitorFactory, entityResultFindingExpressionVisitorFactory As IEntityResultFindingExpressionVisitorFactory, taskBlockingExpressionVisitor As ITaskBlockingExpressionVisitor, memberAccessBindingExpressionVisitorFactory As IMemberAccessBindingExpressionVisitorFactory, orderingExpressionVisitorFactory As IOrderingExpressionVisitorFactory, projectionExpressionVisitorFactory As IProjectionExpressionVisitorFactory, entityQueryableExpressionVisitorFactory As IEntityQueryableExpressionVisitorFactory, queryAnnotationExtractor As IQueryAnnotationExtractor, resultOperatorHandler As IResultOperatorHandler, entityMaterializerSource As IEntityMaterializerSource, expressionPrinter As IExpressionPrinter, queryCompilationContext As QueryCompilationContext)
    parameters:
    - id: queryOptimizer
      type: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
    - id: navigationRewritingExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory\" data-throw-if-not-resolved=\"false\"></xref> to be used when\nprocessing the query.\n"
    - id: subQueryMemberPushDownExpressionVisitor
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor\" data-throw-if-not-resolved=\"false\"></xref> to be used when\nprocessing the query.\n"
    - id: querySourceTracingExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory\" data-throw-if-not-resolved=\"false\"></xref> to be used when\nprocessing the query.\n"
    - id: entityResultFindingExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory\" data-throw-if-not-resolved=\"false\"></xref> to be used when\nprocessing the query.\n"
    - id: taskBlockingExpressionVisitor
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
    - id: memberAccessBindingExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory\" data-throw-if-not-resolved=\"false\"></xref> to be used when\nprocessing the query.\n"
    - id: orderingExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
    - id: projectionExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory\" data-throw-if-not-resolved=\"false\"></xref> to be used when processing the\nquery.\n"
    - id: entityQueryableExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory
      description: "\nThe <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory\" data-throw-if-not-resolved=\"false\"></xref> to be used when\nprocessing the query.\n"
    - id: queryAnnotationExtractor
      type: Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
    - id: resultOperatorHandler
      type: Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
    - id: entityMaterializerSource
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
    - id: expressionPrinter
      type: Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
    - id: queryCompilationContext
      type: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext" data-throw-if-not-resolved="false"></xref> to be used when processing the query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression
  commentId: P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression
  id: Expression
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: EntityQueryModelVisitor.Expression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Expression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 195
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nGets the expression that represents this query.\n"
  example: []
  syntax:
    content: public virtual Expression Expression { get; set; }
    content.vb: Public Overridable Property Expression As Expression
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter
  commentId: P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter
  id: CurrentParameter
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CurrentParameter
  nameWithType: EntityQueryModelVisitor.CurrentParameter
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CurrentParameter
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 210
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nGets the expression for the current parameter.\n"
  example: []
  syntax:
    content: public virtual ParameterExpression CurrentParameter { get; set; }
    content.vb: Public Overridable Property CurrentParameter As ParameterExpression
    parameters: []
    return:
      type: System.Linq.Expressions.ParameterExpression
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
  commentId: P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
  id: QueryCompilationContext
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: QueryCompilationContext
  nameWithType: EntityQueryModelVisitor.QueryCompilationContext
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QueryCompilationContext
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 225
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nGets the <xref href=\"Microsoft.EntityFrameworkCore.Query.QueryCompilationContext\" data-throw-if-not-resolved=\"false\"></xref> being used for this query.\n"
  example: []
  syntax:
    content: public virtual QueryCompilationContext QueryCompilationContext { get; }
    content.vb: Public Overridable ReadOnly Property QueryCompilationContext As QueryCompilationContext
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider
  commentId: P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider
  id: LinqOperatorProvider
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: LinqOperatorProvider
  nameWithType: EntityQueryModelVisitor.LinqOperatorProvider
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LinqOperatorProvider
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 230
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nGets the <xref href=\"Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider\" data-throw-if-not-resolved=\"false\"></xref> being used for this query.\n"
  example: []
  syntax:
    content: public virtual ILinqOperatorProvider LinqOperatorProvider { get; }
    content.vb: Public Overridable ReadOnly Property LinqOperatorProvider As ILinqOperatorProvider
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor``1(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor``1(QueryModel)
  id: CreateQueryExecutor``1(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CreateQueryExecutor<TResult>(QueryModel)
  nameWithType: EntityQueryModelVisitor.CreateQueryExecutor<TResult>(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor<TResult>(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateQueryExecutor
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 238
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCreates an action to execute this query.\n"
  example: []
  syntax:
    content: public virtual Func<QueryContext, IEnumerable<TResult>> CreateQueryExecutor<TResult>(QueryModel queryModel)
    content.vb: Public Overridable Function CreateQueryExecutor(Of TResult)(queryModel As QueryModel) As Func(Of QueryContext, IEnumerable(Of TResult))
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    typeParameters:
    - id: TResult
      description: 'The type of results that the query returns. '
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable{{TResult}}}
      description: 'An action that returns the results of the query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor*
  nameWithType.vb: EntityQueryModelVisitor.CreateQueryExecutor(Of TResult)(QueryModel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor(Of TResult)(QueryModel)
  name.vb: CreateQueryExecutor(Of TResult)(QueryModel)
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor``1(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor``1(QueryModel)
  id: CreateAsyncQueryExecutor``1(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CreateAsyncQueryExecutor<TResult>(QueryModel)
  nameWithType: EntityQueryModelVisitor.CreateAsyncQueryExecutor<TResult>(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor<TResult>(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateAsyncQueryExecutor
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 278
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCreates an action to asynchronously execute this query.\n"
  example: []
  syntax:
    content: public virtual Func<QueryContext, IAsyncEnumerable<TResult>> CreateAsyncQueryExecutor<TResult>(QueryModel queryModel)
    content.vb: Public Overridable Function CreateAsyncQueryExecutor(Of TResult)(queryModel As QueryModel) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    typeParameters:
    - id: TResult
      description: 'The type of results that the query returns. '
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
      description: 'An action that asynchronously returns the results of the query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor*
  nameWithType.vb: EntityQueryModelVisitor.CreateAsyncQueryExecutor(Of TResult)(QueryModel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor(Of TResult)(QueryModel)
  name.vb: CreateAsyncQueryExecutor(Of TResult)(QueryModel)
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions
  id: InterceptExceptions
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: InterceptExceptions()
  nameWithType: EntityQueryModelVisitor.InterceptExceptions()
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InterceptExceptions
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 315
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nExecutes the query and logs any exceptions that occur.\n"
  example: []
  syntax:
    content: protected virtual void InterceptExceptions()
    content.vb: Protected Overridable Sub InterceptExceptions
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations(QueryModel)
  id: ExtractQueryAnnotations(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: ExtractQueryAnnotations(QueryModel)
  nameWithType: EntityQueryModelVisitor.ExtractQueryAnnotations(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExtractQueryAnnotations
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 329
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nPopulates <xref href=\"Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations\" data-throw-if-not-resolved=\"false\"></xref> based on annotations found in the query.\n"
  example: []
  syntax:
    content: protected virtual void ExtractQueryAnnotations(QueryModel queryModel)
    content.vb: Protected Overridable Sub ExtractQueryAnnotations(queryModel As QueryModel)
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel)
  id: OptimizeQueryModel(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: OptimizeQueryModel(QueryModel)
  nameWithType: EntityQueryModelVisitor.OptimizeQueryModel(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OptimizeQueryModel
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 341
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nApplies optimizations to the query.\n"
  example: []
  syntax:
    content: protected virtual void OptimizeQueryModel(QueryModel queryModel)
    content.vb: Protected Overridable Sub OptimizeQueryModel(queryModel As QueryModel)
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence(QueryModel,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence(QueryModel,System.Type)
  id: SingleResultToSequence(QueryModel,System.Type)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: SingleResultToSequence(QueryModel, Type)
  nameWithType: EntityQueryModelVisitor.SingleResultToSequence(QueryModel, Type)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence(QueryModel, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SingleResultToSequence
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 367
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nConverts the results of the query from a single result to a series of results.\n"
  example: []
  syntax:
    content: protected virtual void SingleResultToSequence(QueryModel queryModel, Type type = null)
    content.vb: Protected Overridable Sub SingleResultToSequence(queryModel As QueryModel, type As Type = Nothing)
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: type
      type: System.Type
      description: 'The type of results returned by the query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel)
  id: IncludeNavigations(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: IncludeNavigations(QueryModel)
  nameWithType: EntityQueryModelVisitor.IncludeNavigations(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IncludeNavigations
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 385
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nIncludes related data requested in the LINQ query.\n"
  example: []
  syntax:
    content: protected virtual void IncludeNavigations(QueryModel queryModel)
    content.vb: Protected Overridable Sub IncludeNavigations(queryModel As QueryModel)
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel,System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel,System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification})
  id: IncludeNavigations(QueryModel,System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification})
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: IncludeNavigations(QueryModel, IReadOnlyCollection<IncludeSpecification>)
  nameWithType: EntityQueryModelVisitor.IncludeNavigations(QueryModel, IReadOnlyCollection<IncludeSpecification>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel, System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.IncludeSpecification>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IncludeNavigations
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 471
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nIncludes related data requested in the LINQ query.\n"
  example: []
  syntax:
    content: protected virtual void IncludeNavigations(QueryModel queryModel, IReadOnlyCollection<IncludeSpecification> includeSpecifications)
    content.vb: Protected Overridable Sub IncludeNavigations(queryModel As QueryModel, includeSpecifications As IReadOnlyCollection(Of IncludeSpecification))
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: includeSpecifications
      type: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification}
      description: 'Related data to be included. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations*
  nameWithType.vb: EntityQueryModelVisitor.IncludeNavigations(QueryModel, IReadOnlyCollection(Of IncludeSpecification))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(QueryModel, System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.IncludeSpecification))
  name.vb: IncludeNavigations(QueryModel, IReadOnlyCollection(Of IncludeSpecification))
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(Microsoft.EntityFrameworkCore.Query.IncludeSpecification,System.Type,System.Linq.Expressions.Expression,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(Microsoft.EntityFrameworkCore.Query.IncludeSpecification,System.Type,System.Linq.Expressions.Expression,System.Boolean)
  id: IncludeNavigations(Microsoft.EntityFrameworkCore.Query.IncludeSpecification,System.Type,System.Linq.Expressions.Expression,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: IncludeNavigations(IncludeSpecification, Type, Expression, Boolean)
  nameWithType: EntityQueryModelVisitor.IncludeNavigations(IncludeSpecification, Type, Expression, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations(Microsoft.EntityFrameworkCore.Query.IncludeSpecification, System.Type, System.Linq.Expressions.Expression, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IncludeNavigations
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 557
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nIncludes a specific navigation property requested in the LINQ query.\n"
  example: []
  syntax:
    content: protected virtual void IncludeNavigations(IncludeSpecification includeSpecification, Type resultType, Expression accessorExpression, bool querySourceRequiresTracking)
    content.vb: Protected Overridable Sub IncludeNavigations(includeSpecification As IncludeSpecification, resultType As Type, accessorExpression As Expression, querySourceRequiresTracking As Boolean)
    parameters:
    - id: includeSpecification
      type: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
      description: 'The navigation property to be included. '
    - id: resultType
      type: System.Type
      description: 'The type of results returned by the query. '
    - id: accessorExpression
      type: System.Linq.Expressions.Expression
      description: 'Expression for the navigation property to be included. '
    - id: querySourceRequiresTracking
      type: System.Boolean
      description: 'A value indicating whether results of this query are to be tracked. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults``1(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults``1(QueryModel)
  id: TrackEntitiesInResults``1(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: TrackEntitiesInResults<TResult>(QueryModel)
  nameWithType: EntityQueryModelVisitor.TrackEntitiesInResults<TResult>(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults<TResult>(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TrackEntitiesInResults
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 572
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nApplies tracking behavior to the query.\n"
  example: []
  syntax:
    content: protected virtual void TrackEntitiesInResults<TResult>(QueryModel queryModel)
    content.vb: Protected Overridable Sub TrackEntitiesInResults(Of TResult)(queryModel As QueryModel)
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    typeParameters:
    - id: TResult
      description: 'The type of results returned by the query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults*
  nameWithType.vb: EntityQueryModelVisitor.TrackEntitiesInResults(Of TResult)(QueryModel)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults(Of TResult)(QueryModel)
  name.vb: TrackEntitiesInResults(Of TResult)(QueryModel)
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda``1
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda``1
  id: CreateExecutorLambda``1
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CreateExecutorLambda<TResults>()
  nameWithType: EntityQueryModelVisitor.CreateExecutorLambda<TResults>()
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda<TResults>()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateExecutorLambda
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 691
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCreates an action to execute this query.\n"
  example: []
  syntax:
    content: protected virtual Func<QueryContext, TResults> CreateExecutorLambda<TResults>()
    content.vb: Protected Overridable Function CreateExecutorLambda(Of TResults) As Func(Of QueryContext, TResults)
    typeParameters:
    - id: TResults
      description: 'The type of results that the query returns. '
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResults}}
      description: 'An action that returns the results of the query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda*
  nameWithType.vb: EntityQueryModelVisitor.CreateExecutorLambda(Of TResults)()
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda(Of TResults)()
  name.vb: CreateExecutorLambda(Of TResults)()
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel)
  id: VisitQueryModel(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitQueryModel(QueryModel)
  nameWithType: EntityQueryModelVisitor.VisitQueryModel(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitQueryModel
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 716
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits the root <see cref=\"!:QueryModel\"></see> node.\n"
  example: []
  syntax:
    content: public override void VisitQueryModel(QueryModel queryModel)
    content.vb: Public Overrides Sub VisitQueryModel(queryModel As QueryModel)
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'The query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause(MainFromClause,QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause(MainFromClause,QueryModel)
  id: VisitMainFromClause(MainFromClause,QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitMainFromClause(MainFromClause, QueryModel)
  nameWithType: EntityQueryModelVisitor.VisitMainFromClause(MainFromClause, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause(MainFromClause, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitMainFromClause
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 733
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits the <see cref=\"!:MainFromClause\"></see> node.\n"
  example: []
  syntax:
    content: public override void VisitMainFromClause(MainFromClause fromClause, QueryModel queryModel)
    content.vb: Public Overrides Sub VisitMainFromClause(fromClause As MainFromClause, queryModel As QueryModel)
    parameters:
    - id: fromClause
      type: MainFromClause
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression(MainFromClause,QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression(MainFromClause,QueryModel)
  id: CompileMainFromClauseExpression(MainFromClause,QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CompileMainFromClauseExpression(MainFromClause, QueryModel)
  nameWithType: EntityQueryModelVisitor.CompileMainFromClauseExpression(MainFromClause, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression(MainFromClause, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CompileMainFromClauseExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 761
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCompiles the <see cref=\"!:MainFromClause\"></see> node.\n"
  example: []
  syntax:
    content: protected virtual Expression CompileMainFromClauseExpression(MainFromClause mainFromClause, QueryModel queryModel)
    content.vb: Protected Overridable Function CompileMainFromClauseExpression(mainFromClause As MainFromClause, queryModel As QueryModel) As Expression
    parameters:
    - id: mainFromClause
      type: MainFromClause
      description: 'The node being compiled. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    return:
      type: System.Linq.Expressions.Expression
      description: 'The compiled result. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause(AdditionalFromClause,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause(AdditionalFromClause,QueryModel,System.Int32)
  id: VisitAdditionalFromClause(AdditionalFromClause,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitAdditionalFromClause(AdditionalFromClause, QueryModel, Int32)
  nameWithType: EntityQueryModelVisitor.VisitAdditionalFromClause(AdditionalFromClause, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause(AdditionalFromClause, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitAdditionalFromClause
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 776
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits <see cref=\"!:AdditionalFromClause\"></see> nodes.\n"
  example: []
  syntax:
    content: public override void VisitAdditionalFromClause(AdditionalFromClause fromClause, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitAdditionalFromClause(fromClause As AdditionalFromClause, queryModel As QueryModel, index As Integer)
    parameters:
    - id: fromClause
      type: AdditionalFromClause
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: index
      type: System.Int32
      description: 'Index of the node being visited. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression(AdditionalFromClause,QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression(AdditionalFromClause,QueryModel)
  id: CompileAdditionalFromClauseExpression(AdditionalFromClause,QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CompileAdditionalFromClauseExpression(AdditionalFromClause, QueryModel)
  nameWithType: EntityQueryModelVisitor.CompileAdditionalFromClauseExpression(AdditionalFromClause, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression(AdditionalFromClause, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CompileAdditionalFromClauseExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 817
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCompiles <see cref=\"!:AdditionalFromClause\"></see> nodes.\n"
  example: []
  syntax:
    content: protected virtual Expression CompileAdditionalFromClauseExpression(AdditionalFromClause additionalFromClause, QueryModel queryModel)
    content.vb: Protected Overridable Function CompileAdditionalFromClauseExpression(additionalFromClause As AdditionalFromClause, queryModel As QueryModel) As Expression
    parameters:
    - id: additionalFromClause
      type: AdditionalFromClause
      description: 'The node being compiled. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    return:
      type: System.Linq.Expressions.Expression
      description: 'The compiled result. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause(JoinClause,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause(JoinClause,QueryModel,System.Int32)
  id: VisitJoinClause(JoinClause,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitJoinClause(JoinClause, QueryModel, Int32)
  nameWithType: EntityQueryModelVisitor.VisitJoinClause(JoinClause, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause(JoinClause, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitJoinClause
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 832
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits <see cref=\"!:JoinClause\"></see> nodes.\n"
  example: []
  syntax:
    content: public override void VisitJoinClause(JoinClause joinClause, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitJoinClause(joinClause As JoinClause, queryModel As QueryModel, index As Integer)
    parameters:
    - id: joinClause
      type: JoinClause
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: index
      type: System.Int32
      description: 'Index of the node being visited. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(JoinClause,QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(JoinClause,QueryModel)
  id: CompileJoinClauseInnerSequenceExpression(JoinClause,QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CompileJoinClauseInnerSequenceExpression(JoinClause, QueryModel)
  nameWithType: EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(JoinClause, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(JoinClause, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CompileJoinClauseInnerSequenceExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 886
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCompiles <see cref=\"!:JoinClause\"></see> nodes.\n"
  example: []
  syntax:
    content: protected virtual Expression CompileJoinClauseInnerSequenceExpression(JoinClause joinClause, QueryModel queryModel)
    content.vb: Protected Overridable Function CompileJoinClauseInnerSequenceExpression(joinClause As JoinClause, queryModel As QueryModel) As Expression
    parameters:
    - id: joinClause
      type: JoinClause
      description: 'The node being compiled. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    return:
      type: System.Linq.Expressions.Expression
      description: 'The compiled result. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  id: VisitGroupJoinClause(GroupJoinClause,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitGroupJoinClause(GroupJoinClause, QueryModel, Int32)
  nameWithType: EntityQueryModelVisitor.VisitGroupJoinClause(GroupJoinClause, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause(GroupJoinClause, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitGroupJoinClause
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 901
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits <see cref=\"!:GroupJoinClause\"></see> nodes\n"
  example: []
  syntax:
    content: public override void VisitGroupJoinClause(GroupJoinClause groupJoinClause, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitGroupJoinClause(groupJoinClause As GroupJoinClause, queryModel As QueryModel, index As Integer)
    parameters:
    - id: groupJoinClause
      type: GroupJoinClause
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: index
      type: System.Int32
      description: 'Index of the node being visited. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(GroupJoinClause,QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(GroupJoinClause,QueryModel)
  id: CompileGroupJoinInnerSequenceExpression(GroupJoinClause,QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: CompileGroupJoinInnerSequenceExpression(GroupJoinClause, QueryModel)
  nameWithType: EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(GroupJoinClause, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(GroupJoinClause, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CompileGroupJoinInnerSequenceExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 961
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nCompiles <see cref=\"!:GroupJoinClause\"></see> nodes.\n"
  example: []
  syntax:
    content: protected virtual Expression CompileGroupJoinInnerSequenceExpression(GroupJoinClause groupJoinClause, QueryModel queryModel)
    content.vb: Protected Overridable Function CompileGroupJoinInnerSequenceExpression(groupJoinClause As GroupJoinClause, queryModel As QueryModel) As Expression
    parameters:
    - id: groupJoinClause
      type: GroupJoinClause
      description: 'The node being compiled. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    return:
      type: System.Linq.Expressions.Expression
      description: 'The compiled result. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause(WhereClause,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause(WhereClause,QueryModel,System.Int32)
  id: VisitWhereClause(WhereClause,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitWhereClause(WhereClause, QueryModel, Int32)
  nameWithType: EntityQueryModelVisitor.VisitWhereClause(WhereClause, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause(WhereClause, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitWhereClause
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 976
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits <see cref=\"!:WhereClause\"></see> nodes.\n"
  example: []
  syntax:
    content: public override void VisitWhereClause(WhereClause whereClause, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitWhereClause(whereClause As WhereClause, queryModel As QueryModel, index As Integer)
    parameters:
    - id: whereClause
      type: WhereClause
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: index
      type: System.Int32
      description: 'Index of the node being visited. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering(Ordering,QueryModel,OrderByClause,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering(Ordering,QueryModel,OrderByClause,System.Int32)
  id: VisitOrdering(Ordering,QueryModel,OrderByClause,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitOrdering(Ordering, QueryModel, OrderByClause, Int32)
  nameWithType: EntityQueryModelVisitor.VisitOrdering(Ordering, QueryModel, OrderByClause, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering(Ordering, QueryModel, OrderByClause, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitOrdering
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 998
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits <see cref=\"!:Ordering\"></see> nodes.\n"
  example: []
  syntax:
    content: public override void VisitOrdering(Ordering ordering, QueryModel queryModel, OrderByClause orderByClause, int index)
    content.vb: Public Overrides Sub VisitOrdering(ordering As Ordering, queryModel As QueryModel, orderByClause As OrderByClause, index As Integer)
    parameters:
    - id: ordering
      type: Ordering
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: orderByClause
      type: OrderByClause
      description: 'The <see cref="!:OrderByClause"></see> for the ordering. '
    - id: index
      type: System.Int32
      description: 'Index of the node being visited. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause,QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause,QueryModel)
  id: VisitSelectClause(SelectClause,QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitSelectClause(SelectClause, QueryModel)
  nameWithType: EntityQueryModelVisitor.VisitSelectClause(SelectClause, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause(SelectClause, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitSelectClause
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1026
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits <see cref=\"!:SelectClause\"></see> nodes.\n"
  example: []
  syntax:
    content: public override void VisitSelectClause(SelectClause selectClause, QueryModel queryModel)
    content.vb: Public Overrides Sub VisitSelectClause(selectClause As SelectClause, queryModel As QueryModel)
    parameters:
    - id: selectClause
      type: SelectClause
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  id: VisitResultOperator(ResultOperatorBase,QueryModel,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: VisitResultOperator(ResultOperatorBase, QueryModel, Int32)
  nameWithType: EntityQueryModelVisitor.VisitResultOperator(ResultOperatorBase, QueryModel, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator(ResultOperatorBase, QueryModel, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitResultOperator
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1070
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nVisits <see cref=\"!:ResultOperatorBase\"></see> nodes.\n"
  example: []
  syntax:
    content: public override void VisitResultOperator(ResultOperatorBase resultOperator, QueryModel queryModel, int index)
    content.vb: Public Overrides Sub VisitResultOperator(resultOperator As ResultOperatorBase, queryModel As QueryModel, index As Integer)
    parameters:
    - id: resultOperator
      type: ResultOperatorBase
      description: 'The node being visited. '
    - id: queryModel
      type: QueryModel
      description: 'The query. '
    - id: index
      type: System.Int32
      description: 'Index of the node being visited. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression,IQuerySource,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression,IQuerySource,System.Boolean)
  id: ReplaceClauseReferences(System.Linq.Expressions.Expression,IQuerySource,System.Boolean)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: ReplaceClauseReferences(Expression, IQuerySource, Boolean)
  nameWithType: EntityQueryModelVisitor.ReplaceClauseReferences(Expression, IQuerySource, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences(System.Linq.Expressions.Expression, IQuerySource, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ReplaceClauseReferences
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1210
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nTranslates a re-linq query model expression into a compiled query expression.\n"
  example: []
  syntax:
    content: public virtual Expression ReplaceClauseReferences(Expression expression, IQuerySource querySource = null, bool inProjection = false)
    content.vb: Public Overridable Function ReplaceClauseReferences(expression As Expression, querySource As IQuerySource = Nothing, inProjection As Boolean = False) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The re-linq query model expression. '
    - id: querySource
      type: IQuerySource
      description: 'The query source. '
    - id: inProjection
      type: System.Boolean
      description: 'True when the expression is a projector. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\nA compiled query expression fragment.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping(IQuerySource,System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping(IQuerySource,System.Linq.Expressions.Expression)
  id: AddOrUpdateMapping(IQuerySource,System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: AddOrUpdateMapping(IQuerySource, Expression)
  nameWithType: EntityQueryModelVisitor.AddOrUpdateMapping(IQuerySource, Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping(IQuerySource, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddOrUpdateMapping
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1253
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nAdds or updates the expression mapped to a query source.\n"
  example: []
  syntax:
    content: public virtual void AddOrUpdateMapping(IQuerySource querySource, Expression expression)
    content.vb: Public Overridable Sub AddOrUpdateMapping(querySource As IQuerySource, expression As Expression)
    parameters:
    - id: querySource
      type: IQuerySource
      description: 'The query source. '
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The expression mapped to the query source. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression)
  id: BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindMethodCallToValueBuffer(MethodCallExpression, Expression)
  nameWithType: EntityQueryModelVisitor.BindMethodCallToValueBuffer(MethodCallExpression, Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindMethodCallToValueBuffer
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1272
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a method call to a value buffer access.\n"
  example: []
  syntax:
    content: public virtual Expression BindMethodCallToValueBuffer(MethodCallExpression methodCallExpression, Expression expression)
    content.vb: Public Overridable Function BindMethodCallToValueBuffer(methodCallExpression As MethodCallExpression, expression As Expression) As Expression
    parameters:
    - id: methodCallExpression
      type: System.Linq.Expressions.MethodCallExpression
      description: 'The method call expression. '
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The target expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\nA value buffer access expression.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)
  id: BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindMemberToValueBuffer(MemberExpression, Expression)
  nameWithType: EntityQueryModelVisitor.BindMemberToValueBuffer(MemberExpression, Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindMemberToValueBuffer
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1293
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a member access to a value buffer access.\n"
  example: []
  syntax:
    content: public virtual Expression BindMemberToValueBuffer(MemberExpression memberExpression, Expression expression)
    content.vb: Public Overridable Function BindMemberToValueBuffer(memberExpression As MemberExpression, expression As Expression) As Expression
    parameters:
    - id: memberExpression
      type: System.Linq.Expressions.MemberExpression
      description: 'The member access expression. '
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The target expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\nA value buffer access expression.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod(System.Type,System.Linq.Expressions.Expression,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod(System.Type,System.Linq.Expressions.Expression,System.Int32)
  id: BindReadValueMethod(System.Type,System.Linq.Expressions.Expression,System.Int32)
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindReadValueMethod(Type, Expression, Int32)
  nameWithType: EntityQueryModelVisitor.BindReadValueMethod(Type, Expression, Int32)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod(System.Type, System.Linq.Expressions.Expression, System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindReadValueMethod
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1316
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a value buffer read.\n"
  example: []
  syntax:
    content: public virtual Expression BindReadValueMethod(Type memberType, Expression expression, int index)
    content.vb: Public Overridable Function BindReadValueMethod(memberType As Type, expression As Expression, index As Integer) As Expression
    parameters:
    - id: memberType
      type: System.Type
      description: 'Type of the member. '
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The target expression. '
    - id: index
      type: System.Int32
      description: 'A value buffer index. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\nA value buffer read expression.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression``1(System.Linq.Expressions.Expression,System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},IQuerySource,``0})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression``1(System.Linq.Expressions.Expression,System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},IQuerySource,``0})
  id: BindNavigationPathPropertyExpression``1(System.Linq.Expressions.Expression,System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},IQuerySource,``0})
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindNavigationPathPropertyExpression<TResult>(Expression, Func<IEnumerable<IPropertyBase>, IQuerySource, TResult>)
  nameWithType: EntityQueryModelVisitor.BindNavigationPathPropertyExpression<TResult>(Expression, Func<IEnumerable<IPropertyBase>, IQuerySource, TResult>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression<TResult>(System.Linq.Expressions.Expression, System.Func<System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IPropertyBase>, IQuerySource, TResult>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindNavigationPathPropertyExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1337
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a navigation path property expression.\n"
  example: []
  syntax:
    content: public virtual TResult BindNavigationPathPropertyExpression<TResult>(Expression propertyExpression, Func<IEnumerable<IPropertyBase>, IQuerySource, TResult> propertyBinder)
    content.vb: Public Overridable Function BindNavigationPathPropertyExpression(Of TResult)(propertyExpression As Expression, propertyBinder As Func(Of IEnumerable(Of IPropertyBase), IQuerySource, TResult)) As TResult
    parameters:
    - id: propertyExpression
      type: System.Linq.Expressions.Expression
      description: 'The property expression. '
    - id: propertyBinder
      type: System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},IQuerySource,{TResult}}
      description: 'The property binder. '
    typeParameters:
    - id: TResult
      description: 'Type of the result. '
    return:
      type: '{TResult}'
      description: "\nA TResult.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression*
  nameWithType.vb: EntityQueryModelVisitor.BindNavigationPathPropertyExpression(Of TResult)(Expression, Func(Of IEnumerable(Of IPropertyBase), IQuerySource, TResult))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression(Of TResult)(System.Linq.Expressions.Expression, System.Func(Of System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IPropertyBase), IQuerySource, TResult))
  name.vb: BindNavigationPathPropertyExpression(Of TResult)(Expression, Func(Of IEnumerable(Of IPropertyBase), IQuerySource, TResult))
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(System.Linq.Expressions.MemberExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(System.Linq.Expressions.MemberExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  id: BindMemberExpression(System.Linq.Expressions.MemberExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindMemberExpression(MemberExpression, Action<IProperty, IQuerySource>)
  nameWithType: EntityQueryModelVisitor.BindMemberExpression(MemberExpression, Action<IProperty, IQuerySource>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(System.Linq.Expressions.MemberExpression, System.Action<Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindMemberExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1352
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a member expression.\n"
  example: []
  syntax:
    content: public virtual void BindMemberExpression(MemberExpression memberExpression, Action<IProperty, IQuerySource> memberBinder)
    content.vb: Public Overridable Sub BindMemberExpression(memberExpression As MemberExpression, memberBinder As Action(Of IProperty, IQuerySource))
    parameters:
    - id: memberExpression
      type: System.Linq.Expressions.MemberExpression
      description: 'The member access expression. '
    - id: memberBinder
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource}
      description: 'The member binder. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression*
  nameWithType.vb: EntityQueryModelVisitor.BindMemberExpression(MemberExpression, Action(Of IProperty, IQuerySource))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(System.Linq.Expressions.MemberExpression, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource))
  name.vb: BindMemberExpression(MemberExpression, Action(Of IProperty, IQuerySource))
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression``1(System.Linq.Expressions.MemberExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression``1(System.Linq.Expressions.MemberExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  id: BindMemberExpression``1(System.Linq.Expressions.MemberExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindMemberExpression<TResult>(MemberExpression, IQuerySource, Func<IProperty, IQuerySource, TResult>)
  nameWithType: EntityQueryModelVisitor.BindMemberExpression<TResult>(MemberExpression, IQuerySource, Func<IProperty, IQuerySource, TResult>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression<TResult>(System.Linq.Expressions.MemberExpression, IQuerySource, System.Func<Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindMemberExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1378
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a member expression.\n"
  example: []
  syntax:
    content: public virtual TResult BindMemberExpression<TResult>(MemberExpression memberExpression, IQuerySource querySource, Func<IProperty, IQuerySource, TResult> memberBinder)
    content.vb: Public Overridable Function BindMemberExpression(Of TResult)(memberExpression As MemberExpression, querySource As IQuerySource, memberBinder As Func(Of IProperty, IQuerySource, TResult)) As TResult
    parameters:
    - id: memberExpression
      type: System.Linq.Expressions.MemberExpression
      description: 'The member access expression. '
    - id: querySource
      type: IQuerySource
      description: 'The query source. '
    - id: memberBinder
      type: System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,{TResult}}
      description: 'The member binder. '
    typeParameters:
    - id: TResult
      description: 'Type of the result. '
    return:
      type: '{TResult}'
      description: "\nA TResult.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression*
  nameWithType.vb: EntityQueryModelVisitor.BindMemberExpression(Of TResult)(MemberExpression, IQuerySource, Func(Of IProperty, IQuerySource, TResult))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression(Of TResult)(System.Linq.Expressions.MemberExpression, IQuerySource, System.Func(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult))
  name.vb: BindMemberExpression(Of TResult)(MemberExpression, IQuerySource, Func(Of IProperty, IQuerySource, TResult))
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  id: BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,IQuerySource,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindMethodCallExpression<TResult>(MethodCallExpression, IQuerySource, Func<IProperty, IQuerySource, TResult>)
  nameWithType: EntityQueryModelVisitor.BindMethodCallExpression<TResult>(MethodCallExpression, IQuerySource, Func<IProperty, IQuerySource, TResult>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression<TResult>(System.Linq.Expressions.MethodCallExpression, IQuerySource, System.Func<Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindMethodCallExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1407
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a method call expression.\n"
  example: []
  syntax:
    content: public virtual TResult BindMethodCallExpression<TResult>(MethodCallExpression methodCallExpression, IQuerySource querySource, Func<IProperty, IQuerySource, TResult> methodCallBinder)
    content.vb: Public Overridable Function BindMethodCallExpression(Of TResult)(methodCallExpression As MethodCallExpression, querySource As IQuerySource, methodCallBinder As Func(Of IProperty, IQuerySource, TResult)) As TResult
    parameters:
    - id: methodCallExpression
      type: System.Linq.Expressions.MethodCallExpression
      description: 'The method call expression. '
    - id: querySource
      type: IQuerySource
      description: 'The query source. '
    - id: methodCallBinder
      type: System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,{TResult}}
      description: 'The method call binder. '
    typeParameters:
    - id: TResult
      description: 'Type of the result. '
    return:
      type: '{TResult}'
      description: "\nA TResult.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression*
  nameWithType.vb: EntityQueryModelVisitor.BindMethodCallExpression(Of TResult)(MethodCallExpression, IQuerySource, Func(Of IProperty, IQuerySource, TResult))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(Of TResult)(System.Linq.Expressions.MethodCallExpression, IQuerySource, System.Func(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult))
  name.vb: BindMethodCallExpression(Of TResult)(MethodCallExpression, IQuerySource, Func(Of IProperty, IQuerySource, TResult))
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  id: BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0})
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindMethodCallExpression<TResult>(MethodCallExpression, Func<IProperty, IQuerySource, TResult>)
  nameWithType: EntityQueryModelVisitor.BindMethodCallExpression<TResult>(MethodCallExpression, Func<IProperty, IQuerySource, TResult>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression<TResult>(System.Linq.Expressions.MethodCallExpression, System.Func<Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindMethodCallExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1521
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a method call expression.\n"
  example: []
  syntax:
    content: public virtual TResult BindMethodCallExpression<TResult>(MethodCallExpression methodCallExpression, Func<IProperty, IQuerySource, TResult> methodCallBinder)
    content.vb: Public Overridable Function BindMethodCallExpression(Of TResult)(methodCallExpression As MethodCallExpression, methodCallBinder As Func(Of IProperty, IQuerySource, TResult)) As TResult
    parameters:
    - id: methodCallExpression
      type: System.Linq.Expressions.MethodCallExpression
      description: 'The method call expression. '
    - id: methodCallBinder
      type: System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,{TResult}}
      description: 'The method call binder. '
    typeParameters:
    - id: TResult
      description: 'Type of the result. '
    return:
      type: '{TResult}'
      description: "\nA TResult.\n"
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression*
  nameWithType.vb: EntityQueryModelVisitor.BindMethodCallExpression(Of TResult)(MethodCallExpression, Func(Of IProperty, IQuerySource, TResult))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(Of TResult)(System.Linq.Expressions.MethodCallExpression, System.Func(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult))
  name.vb: BindMethodCallExpression(Of TResult)(MethodCallExpression, Func(Of IProperty, IQuerySource, TResult))
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  id: BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression,System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource})
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  langs:
  - csharp
  - vb
  name: BindMethodCallExpression(MethodCallExpression, Action<IProperty, IQuerySource>)
  nameWithType: EntityQueryModelVisitor.BindMethodCallExpression(MethodCallExpression, Action<IProperty, IQuerySource>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression, System.Action<Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BindMethodCallExpression
    path: src/Microsoft.EntityFrameworkCore/Query/EntityQueryModelVisitor.cs
    startLine: 1536
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nBinds a method call expression.\n"
  example: []
  syntax:
    content: public virtual void BindMethodCallExpression(MethodCallExpression methodCallExpression, Action<IProperty, IQuerySource> methodCallBinder)
    content.vb: Public Overridable Sub BindMethodCallExpression(methodCallExpression As MethodCallExpression, methodCallBinder As Action(Of IProperty, IQuerySource))
    parameters:
    - id: methodCallExpression
      type: System.Linq.Expressions.MethodCallExpression
      description: 'The method call expression. '
    - id: methodCallBinder
      type: System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource}
      description: 'The method call binder. '
  overload: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression*
  nameWithType.vb: EntityQueryModelVisitor.BindMethodCallExpression(MethodCallExpression, Action(Of IProperty, IQuerySource))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(System.Linq.Expressions.MethodCallExpression, System.Action(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource))
  name.vb: BindMethodCallExpression(MethodCallExpression, Action(Of IProperty, IQuerySource))
references:
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryContext
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: QueryContext
  nameWithType: QueryContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.EF.Property``1(System.Object,System.String)
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod
  isExternal: false
  name: IsPropertyMethod
  nameWithType: EntityQueryModelVisitor.IsPropertyMethod
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IsPropertyMethod
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression
  isExternal: false
  name: CreatePropertyExpression
  nameWithType: EntityQueryModelVisitor.CreatePropertyExpression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreatePropertyExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IProperty
  nameWithType: IProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: EntityQueryModelVisitor
  nameWithType: EntityQueryModelVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IQueryOptimizer
  nameWithType: IQueryOptimizer
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: INavigationRewritingExpressionVisitorFactory
  nameWithType: INavigationRewritingExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.INavigationRewritingExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: ISubQueryMemberPushDownExpressionVisitor
  nameWithType: ISubQueryMemberPushDownExpressionVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ISubQueryMemberPushDownExpressionVisitor
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: IQuerySourceTracingExpressionVisitorFactory
  nameWithType: IQuerySourceTracingExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IQuerySourceTracingExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: IEntityResultFindingExpressionVisitorFactory
  nameWithType: IEntityResultFindingExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IEntityResultFindingExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: ITaskBlockingExpressionVisitor
  nameWithType: ITaskBlockingExpressionVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.ITaskBlockingExpressionVisitor
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: IMemberAccessBindingExpressionVisitorFactory
  nameWithType: IMemberAccessBindingExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMemberAccessBindingExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: IOrderingExpressionVisitorFactory
  nameWithType: IOrderingExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IOrderingExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  isExternal: false
  name: IProjectionExpressionVisitorFactory
  nameWithType: IProjectionExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IProjectionExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  isExternal: false
  name: IEntityQueryableExpressionVisitorFactory
  nameWithType: IEntityQueryableExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.IEntityQueryableExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IQueryAnnotationExtractor
  nameWithType: IQueryAnnotationExtractor
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryAnnotationExtractor
- uid: Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler
  commentId: T:Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: IResultOperatorHandler
  nameWithType: IResultOperatorHandler
  fullName: Microsoft.EntityFrameworkCore.Query.IResultOperatorHandler
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: IEntityMaterializerSource
  nameWithType: IEntityMaterializerSource
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IExpressionPrinter
  nameWithType: IExpressionPrinter
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IExpressionPrinter
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
  commentId: P:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
  parent: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  isExternal: false
  name: QueryCompilationContext
  nameWithType: EntityQueryModelVisitor.QueryCompilationContext
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.#ctor
  isExternal: false
  name: EntityQueryModelVisitor
  nameWithType: EntityQueryModelVisitor.EntityQueryModelVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.EntityQueryModelVisitor
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: QueryCompilationContext
  nameWithType: QueryCompilationContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  commentId: N:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  nameWithType: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression
  isExternal: false
  name: Expression
  nameWithType: EntityQueryModelVisitor.Expression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.Expression
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter
  isExternal: false
  name: CurrentParameter
  nameWithType: EntityQueryModelVisitor.CurrentParameter
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CurrentParameter
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
  isExternal: false
  name: QueryCompilationContext
  nameWithType: EntityQueryModelVisitor.QueryCompilationContext
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.QueryCompilationContext
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: ILinqOperatorProvider
  nameWithType: ILinqOperatorProvider
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider
  isExternal: false
  name: LinqOperatorProvider
  nameWithType: EntityQueryModelVisitor.LinqOperatorProvider
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.LinqOperatorProvider
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor
  isExternal: false
  name: CreateQueryExecutor<TResult>
  nameWithType: EntityQueryModelVisitor.CreateQueryExecutor<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor<TResult>
  nameWithType.vb: EntityQueryModelVisitor.CreateQueryExecutor(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor(Of TResult)
  name.vb: CreateQueryExecutor(Of TResult)
- uid: QueryModel
  isExternal: true
  name: QueryModel
  nameWithType: QueryModel
  fullName: QueryModel
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable{{TResult}}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, IEnumerable<TResult>>
  nameWithType: Func<QueryContext, IEnumerable<TResult>>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IEnumerable<TResult>>
  nameWithType.vb: Func(Of QueryContext, IEnumerable(Of TResult))
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of QueryContext, IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor
  isExternal: false
  name: CreateAsyncQueryExecutor<TResult>
  nameWithType: EntityQueryModelVisitor.CreateAsyncQueryExecutor<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor<TResult>
  nameWithType.vb: EntityQueryModelVisitor.CreateAsyncQueryExecutor(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateAsyncQueryExecutor(Of TResult)
  name.vb: CreateAsyncQueryExecutor(Of TResult)
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, IAsyncEnumerable<TResult>>
  nameWithType: Func<QueryContext, IAsyncEnumerable<TResult>>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable<TResult>>
  nameWithType.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable(Of TResult))
  name.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions
  isExternal: false
  name: InterceptExceptions
  nameWithType: EntityQueryModelVisitor.InterceptExceptions
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.InterceptExceptions
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  isExternal: false
  name: QueryAnnotations
  nameWithType: QueryCompilationContext.QueryAnnotations
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations
  isExternal: false
  name: ExtractQueryAnnotations
  nameWithType: EntityQueryModelVisitor.ExtractQueryAnnotations
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ExtractQueryAnnotations
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel
  isExternal: false
  name: OptimizeQueryModel
  nameWithType: EntityQueryModelVisitor.OptimizeQueryModel
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.OptimizeQueryModel
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence
  isExternal: false
  name: SingleResultToSequence
  nameWithType: EntityQueryModelVisitor.SingleResultToSequence
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.SingleResultToSequence
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations
  isExternal: false
  name: IncludeNavigations
  nameWithType: EntityQueryModelVisitor.IncludeNavigations
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.IncludeNavigations
- uid: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.IncludeSpecification}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IncludeSpecification>
  nameWithType: IReadOnlyCollection<IncludeSpecification>
  fullName: System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.IncludeSpecification>
  nameWithType.vb: IReadOnlyCollection(Of IncludeSpecification)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.IncludeSpecification)
  name.vb: IReadOnlyCollection(Of IncludeSpecification)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
    name: IncludeSpecification
    nameWithType: IncludeSpecification
    fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
    name: IncludeSpecification
    nameWithType: IncludeSpecification
    fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  commentId: T:Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: IncludeSpecification
  nameWithType: IncludeSpecification
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults
  isExternal: false
  name: TrackEntitiesInResults<TResult>
  nameWithType: EntityQueryModelVisitor.TrackEntitiesInResults<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults<TResult>
  nameWithType.vb: EntityQueryModelVisitor.TrackEntitiesInResults(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.TrackEntitiesInResults(Of TResult)
  name.vb: TrackEntitiesInResults(Of TResult)
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda
  isExternal: false
  name: CreateExecutorLambda<TResults>
  nameWithType: EntityQueryModelVisitor.CreateExecutorLambda<TResults>
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda<TResults>
  nameWithType.vb: EntityQueryModelVisitor.CreateExecutorLambda(Of TResults)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateExecutorLambda(Of TResults)
  name.vb: CreateExecutorLambda(Of TResults)
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResults}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, TResults>
  nameWithType: Func<QueryContext, TResults>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, TResults>
  nameWithType.vb: Func(Of QueryContext, TResults)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, TResults)
  name.vb: Func(Of QueryContext, TResults)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResults
    nameWithType: TResults
    fullName: TResults
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResults
    nameWithType: TResults
    fullName: TResults
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel
  isExternal: false
  name: VisitQueryModel
  nameWithType: EntityQueryModelVisitor.VisitQueryModel
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause
  isExternal: false
  name: VisitMainFromClause
  nameWithType: EntityQueryModelVisitor.VisitMainFromClause
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitMainFromClause
- uid: MainFromClause
  isExternal: true
  name: MainFromClause
  nameWithType: MainFromClause
  fullName: MainFromClause
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression
  isExternal: false
  name: CompileMainFromClauseExpression
  nameWithType: EntityQueryModelVisitor.CompileMainFromClauseExpression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileMainFromClauseExpression
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause
  isExternal: false
  name: VisitAdditionalFromClause
  nameWithType: EntityQueryModelVisitor.VisitAdditionalFromClause
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitAdditionalFromClause
- uid: AdditionalFromClause
  isExternal: true
  name: AdditionalFromClause
  nameWithType: AdditionalFromClause
  fullName: AdditionalFromClause
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression
  isExternal: false
  name: CompileAdditionalFromClauseExpression
  nameWithType: EntityQueryModelVisitor.CompileAdditionalFromClauseExpression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileAdditionalFromClauseExpression
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause
  isExternal: false
  name: VisitJoinClause
  nameWithType: EntityQueryModelVisitor.VisitJoinClause
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitJoinClause
- uid: JoinClause
  isExternal: true
  name: JoinClause
  nameWithType: JoinClause
  fullName: JoinClause
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression
  isExternal: false
  name: CompileJoinClauseInnerSequenceExpression
  nameWithType: EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileJoinClauseInnerSequenceExpression
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause
  isExternal: false
  name: VisitGroupJoinClause
  nameWithType: EntityQueryModelVisitor.VisitGroupJoinClause
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitGroupJoinClause
- uid: GroupJoinClause
  isExternal: true
  name: GroupJoinClause
  nameWithType: GroupJoinClause
  fullName: GroupJoinClause
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression
  isExternal: false
  name: CompileGroupJoinInnerSequenceExpression
  nameWithType: EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CompileGroupJoinInnerSequenceExpression
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause
  isExternal: false
  name: VisitWhereClause
  nameWithType: EntityQueryModelVisitor.VisitWhereClause
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitWhereClause
- uid: WhereClause
  isExternal: true
  name: WhereClause
  nameWithType: WhereClause
  fullName: WhereClause
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering
  isExternal: false
  name: VisitOrdering
  nameWithType: EntityQueryModelVisitor.VisitOrdering
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitOrdering
- uid: Ordering
  isExternal: true
  name: Ordering
  nameWithType: Ordering
  fullName: Ordering
- uid: OrderByClause
  isExternal: true
  name: OrderByClause
  nameWithType: OrderByClause
  fullName: OrderByClause
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause
  isExternal: false
  name: VisitSelectClause
  nameWithType: EntityQueryModelVisitor.VisitSelectClause
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitSelectClause
- uid: SelectClause
  isExternal: true
  name: SelectClause
  nameWithType: SelectClause
  fullName: SelectClause
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator
  isExternal: false
  name: VisitResultOperator
  nameWithType: EntityQueryModelVisitor.VisitResultOperator
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitResultOperator
- uid: ResultOperatorBase
  isExternal: true
  name: ResultOperatorBase
  nameWithType: ResultOperatorBase
  fullName: ResultOperatorBase
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences
  isExternal: false
  name: ReplaceClauseReferences
  nameWithType: EntityQueryModelVisitor.ReplaceClauseReferences
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.ReplaceClauseReferences
- uid: IQuerySource
  isExternal: true
  name: IQuerySource
  nameWithType: IQuerySource
  fullName: IQuerySource
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping
  isExternal: false
  name: AddOrUpdateMapping
  nameWithType: EntityQueryModelVisitor.AddOrUpdateMapping
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.AddOrUpdateMapping
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer
  isExternal: false
  name: BindMethodCallToValueBuffer
  nameWithType: EntityQueryModelVisitor.BindMethodCallToValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallToValueBuffer
- uid: System.Linq.Expressions.MethodCallExpression
  commentId: T:System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer
  isExternal: false
  name: BindMemberToValueBuffer
  nameWithType: EntityQueryModelVisitor.BindMemberToValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberToValueBuffer
- uid: System.Linq.Expressions.MemberExpression
  commentId: T:System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod
  isExternal: false
  name: BindReadValueMethod
  nameWithType: EntityQueryModelVisitor.BindReadValueMethod
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindReadValueMethod
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression
  isExternal: false
  name: BindNavigationPathPropertyExpression<TResult>
  nameWithType: EntityQueryModelVisitor.BindNavigationPathPropertyExpression<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression<TResult>
  nameWithType.vb: EntityQueryModelVisitor.BindNavigationPathPropertyExpression(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindNavigationPathPropertyExpression(Of TResult)
  name.vb: BindNavigationPathPropertyExpression(Of TResult)
- uid: System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},IQuerySource,{TResult}}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase},IQuerySource,``0}
  parent: System
  definition: System.Func`3
  name: Func<IEnumerable<IPropertyBase>, IQuerySource, TResult>
  nameWithType: Func<IEnumerable<IPropertyBase>, IQuerySource, TResult>
  fullName: System.Func<System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IPropertyBase>, IQuerySource, TResult>
  nameWithType.vb: Func(Of IEnumerable(Of IPropertyBase), IQuerySource, TResult)
  fullname.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IPropertyBase), IQuerySource, TResult)
  name.vb: Func(Of IEnumerable(Of IPropertyBase), IQuerySource, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQuerySource
    name: IQuerySource
    nameWithType: IQuerySource
    fullName: IQuerySource
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQuerySource
    name: IQuerySource
    nameWithType: IQuerySource
    fullName: IQuerySource
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression
  isExternal: false
  name: BindMemberExpression
  nameWithType: EntityQueryModelVisitor.BindMemberExpression
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMemberExpression
- uid: System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource}
  commentId: T:System.Action{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource}
  parent: System
  definition: System.Action`2
  name: Action<IProperty, IQuerySource>
  nameWithType: Action<IProperty, IQuerySource>
  fullName: System.Action<Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource>
  nameWithType.vb: Action(Of IProperty, IQuerySource)
  fullname.vb: System.Action(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource)
  name.vb: Action(Of IProperty, IQuerySource)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQuerySource
    name: IQuerySource
    nameWithType: IQuerySource
    fullName: IQuerySource
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQuerySource
    name: IQuerySource
    nameWithType: IQuerySource
    fullName: IQuerySource
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,{TResult}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,IQuerySource,``0}
  parent: System
  definition: System.Func`3
  name: Func<IProperty, IQuerySource, TResult>
  nameWithType: Func<IProperty, IQuerySource, TResult>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult>
  nameWithType.vb: Func(Of IProperty, IQuerySource, TResult)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, IQuerySource, TResult)
  name.vb: Func(Of IProperty, IQuerySource, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQuerySource
    name: IQuerySource
    nameWithType: IQuerySource
    fullName: IQuerySource
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IQuerySource
    name: IQuerySource
    nameWithType: IQuerySource
    fullName: IQuerySource
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression
  isExternal: false
  name: BindMethodCallExpression<TResult>
  nameWithType: EntityQueryModelVisitor.BindMethodCallExpression<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression<TResult>
  nameWithType.vb: EntityQueryModelVisitor.BindMethodCallExpression(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.BindMethodCallExpression(Of TResult)
  name.vb: BindMethodCallExpression(Of TResult)
