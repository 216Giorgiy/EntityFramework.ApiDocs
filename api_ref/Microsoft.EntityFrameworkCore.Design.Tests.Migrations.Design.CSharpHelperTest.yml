### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  commentId: T:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  id: CSharpHelperTest
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  children:
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Identifier_works(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works(System.Object,System.String)
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTime
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTimeOffset
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_max_value
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_min_value
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_empty_ByteArray
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_Guid
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_ByteArray
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_StringArray
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_multiline_string
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_NullableInt
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_ByteArray
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_StringArray
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_TimeSpan
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Namespace_works(System.String[],System.String)
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Reference_works(System.Type,System.String)
  - Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.UnknownLiteral_throws_when_unknown
  langs:
  - csharp
  - vb
  name: CSharpHelperTest
  nameWithType: CSharpHelperTest
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CSharpHelperTest
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 11
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: public class CSharpHelperTest
    content.vb: Public Class CSharpHelperTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works(System.Object,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works(System.Object,System.String)
  id: Literal_works(System.Object,System.String)
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works(Object, String)
  nameWithType: CSharpHelperTest.Literal_works(Object, String)
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works(System.Object, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"single-line string with \"", "\"single-line string with \\\"\""})]

      [InlineData(new object[]{true, "true"})]

      [InlineData(new object[]{false, "false"})]

      [InlineData(new object[]{(byte)42, "(byte)42"})]

      [InlineData(new object[]{'A', "'A'"})]

      [InlineData(new object[]{'\'', "'\\''"})]

      [InlineData(new object[]{4.2, "4.2"})]

      [InlineData(new object[]{-1.7976931348623157E+308, "-1.7976931348623157E+308"})]

      [InlineData(new object[]{1.7976931348623157E+308, "1.7976931348623157E+308"})]

      [InlineData(new object[]{4.2F, "4.2f"})]

      [InlineData(new object[]{-3.402823E+38F, "-3.402823E+38f"})]

      [InlineData(new object[]{3.402823E+38F, "3.402823E+38f"})]

      [InlineData(new object[]{42, "42"})]

      [InlineData(new object[]{42L, "42L"})]

      [InlineData(new object[]{9000000000000000000L, "9000000000000000000L"})]

      [InlineData(new object[]{(sbyte)42, "(sbyte)42"})]

      [InlineData(new object[]{(short)42, "(short)42"})]

      [InlineData(new object[]{42U, "42u"})]

      [InlineData(new object[]{42UL, "42ul"})]

      [InlineData(new object[]{18000000000000000000UL, "18000000000000000000ul"})]

      [InlineData(new object[]{(ushort)42, "(ushort)42"})]

      [InlineData(new object[]{"", "\"\""})]

      [InlineData(new object[]{CSharpHelperTest.SomeEnum.Default, "CSharpHelperTest.SomeEnum.Default"})]

      public void Literal_works(object value, string expected)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"single-line string with """, """single-line string with \"""""})>

      <InlineData(New Object() {True, "true"})>

      <InlineData(New Object() {False, "false"})>

      <InlineData(New Object() {CType(42, Byte), "(byte)42"})>

      <InlineData(New Object() {"A"c, "'A'"})>

      <InlineData(New Object() {"'"c, "'\''"})>

      <InlineData(New Object() {4.2, "4.2"})>

      <InlineData(New Object() {-1.7976931348623157E+308, "-1.7976931348623157E+308"})>

      <InlineData(New Object() {1.7976931348623157E+308, "1.7976931348623157E+308"})>

      <InlineData(New Object() {4.2F, "4.2f"})>

      <InlineData(New Object() {-3.402823E+38F, "-3.402823E+38f"})>

      <InlineData(New Object() {3.402823E+38F, "3.402823E+38f"})>

      <InlineData(New Object() {42, "42"})>

      <InlineData(New Object() {42L, "42L"})>

      <InlineData(New Object() {9000000000000000000L, "9000000000000000000L"})>

      <InlineData(New Object() {CType(42, SByte), "(sbyte)42"})>

      <InlineData(New Object() {CType(42, Short), "(short)42"})>

      <InlineData(New Object() {42UI, "42u"})>

      <InlineData(New Object() {42UL, "42ul"})>

      <InlineData(New Object() {18000000000000000000UL, "18000000000000000000ul"})>

      <InlineData(New Object() {CType(42, UShort), "(ushort)42"})>

      <InlineData(New Object() {"", """"""})>

      <InlineData(New Object() {CSharpHelperTest.SomeEnum.Default, "CSharpHelperTest.SomeEnum.Default"})>

      Public Sub Literal_works(value As Object, expected As String)
    parameters:
    - id: value
      type: System.Object
    - id: expected
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_empty_ByteArray
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_empty_ByteArray
  id: Literal_works_when_empty_ByteArray
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_empty_ByteArray()
  nameWithType: CSharpHelperTest.Literal_works_when_empty_ByteArray()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_empty_ByteArray()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_empty_ByteArray
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_empty_ByteArray()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_empty_ByteArray
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_ByteArray
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_ByteArray
  id: Literal_works_when_single_ByteArray
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_single_ByteArray()
  nameWithType: CSharpHelperTest.Literal_works_when_single_ByteArray()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_ByteArray()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_single_ByteArray
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 95
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_single_ByteArray()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_single_ByteArray
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_ByteArray
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_ByteArray
  id: Literal_works_when_many_ByteArray
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_many_ByteArray()
  nameWithType: CSharpHelperTest.Literal_works_when_many_ByteArray()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_ByteArray()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_many_ByteArray
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 101
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_many_ByteArray()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_many_ByteArray
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_multiline_string
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_multiline_string
  id: Literal_works_when_multiline_string
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_multiline_string()
  nameWithType: CSharpHelperTest.Literal_works_when_multiline_string()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_multiline_string()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_multiline_string
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 107
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_multiline_string()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_multiline_string
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTime
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTime
  id: Literal_works_when_DateTime
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_DateTime()
  nameWithType: CSharpHelperTest.Literal_works_when_DateTime()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTime()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_DateTime
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 113
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      [UseCulture("de-DE")]

      public void Literal_works_when_DateTime()
    content.vb: >-
      <Fact>

      <UseCulture("de-DE")>

      Public Sub Literal_works_when_DateTime
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  - type: Microsoft.EntityFrameworkCore.Specification.Tests.TestUtilities.Xunit.UseCultureAttribute
    ctor: Microsoft.EntityFrameworkCore.Specification.Tests.TestUtilities.Xunit.UseCultureAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: de-DE
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTimeOffset
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTimeOffset
  id: Literal_works_when_DateTimeOffset
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_DateTimeOffset()
  nameWithType: CSharpHelperTest.Literal_works_when_DateTimeOffset()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_DateTimeOffset()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_DateTimeOffset
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 120
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      [UseCulture("de-DE")]

      public void Literal_works_when_DateTimeOffset()
    content.vb: >-
      <Fact>

      <UseCulture("de-DE")>

      Public Sub Literal_works_when_DateTimeOffset
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  - type: Microsoft.EntityFrameworkCore.Specification.Tests.TestUtilities.Xunit.UseCultureAttribute
    ctor: Microsoft.EntityFrameworkCore.Specification.Tests.TestUtilities.Xunit.UseCultureAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: de-DE
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal
  id: Literal_works_when_decimal
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_decimal()
  nameWithType: CSharpHelperTest.Literal_works_when_decimal()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_decimal
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 127
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_decimal()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_decimal
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_max_value
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_max_value
  id: Literal_works_when_decimal_max_value
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_decimal_max_value()
  nameWithType: CSharpHelperTest.Literal_works_when_decimal_max_value()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_max_value()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_decimal_max_value
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 133
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_decimal_max_value()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_decimal_max_value
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_min_value
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_min_value
  id: Literal_works_when_decimal_min_value
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_decimal_min_value()
  nameWithType: CSharpHelperTest.Literal_works_when_decimal_min_value()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_decimal_min_value()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_decimal_min_value
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 139
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_decimal_min_value()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_decimal_min_value
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_Guid
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_Guid
  id: Literal_works_when_Guid
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_Guid()
  nameWithType: CSharpHelperTest.Literal_works_when_Guid()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_Guid()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_Guid
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 145
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_Guid()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_Guid
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_TimeSpan
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_TimeSpan
  id: Literal_works_when_TimeSpan
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_TimeSpan()
  nameWithType: CSharpHelperTest.Literal_works_when_TimeSpan()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_TimeSpan()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_TimeSpan
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 151
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_TimeSpan()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_TimeSpan
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_NullableInt
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_NullableInt
  id: Literal_works_when_NullableInt
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_NullableInt()
  nameWithType: CSharpHelperTest.Literal_works_when_NullableInt()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_NullableInt()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_NullableInt
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 157
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_NullableInt()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_NullableInt
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_StringArray
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_StringArray
  id: Literal_works_when_single_StringArray
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_single_StringArray()
  nameWithType: CSharpHelperTest.Literal_works_when_single_StringArray()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_single_StringArray()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_single_StringArray
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 163
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_single_StringArray()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_single_StringArray
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_StringArray
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_StringArray
  id: Literal_works_when_many_StringArray
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Literal_works_when_many_StringArray()
  nameWithType: CSharpHelperTest.Literal_works_when_many_StringArray()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Literal_works_when_many_StringArray()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Literal_works_when_many_StringArray
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 170
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void Literal_works_when_many_StringArray()
    content.vb: >-
      <Fact>

      Public Sub Literal_works_when_many_StringArray
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.UnknownLiteral_throws_when_unknown
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.UnknownLiteral_throws_when_unknown
  id: UnknownLiteral_throws_when_unknown
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: UnknownLiteral_throws_when_unknown()
  nameWithType: CSharpHelperTest.UnknownLiteral_throws_when_unknown()
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.UnknownLiteral_throws_when_unknown()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UnknownLiteral_throws_when_unknown
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 177
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Fact]

      public void UnknownLiteral_throws_when_unknown()
    content.vb: >-
      <Fact>

      Public Sub UnknownLiteral_throws_when_unknown
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Reference_works(System.Type,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Reference_works(System.Type,System.String)
  id: Reference_works(System.Type,System.String)
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Reference_works(Type, String)
  nameWithType: CSharpHelperTest.Reference_works(Type, String)
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Reference_works(System.Type, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Reference_works
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 185
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{typeof (int), "int"})]

      [InlineData(new object[]{typeof (int ? ), "int?"})]

      [InlineData(new object[]{typeof (int[]), "int[]"})]

      [InlineData(new object[]{typeof (int[, ]), "int[,]"})]

      [InlineData(new object[]{typeof (int[][]), "int[][]"})]

      [InlineData(new object[]{typeof (Generic<int>), "Generic<int>"})]

      [InlineData(new object[]{typeof (CSharpHelperTest.Nested), "CSharpHelperTest.Nested"})]

      [InlineData(new object[]{typeof (Generic<Generic<int>>), "Generic<Generic<int>>"})]

      [InlineData(new object[]{typeof (MultiGeneric<int, int>), "MultiGeneric<int, int>"})]

      [InlineData(new object[]{typeof (CSharpHelperTest.NestedGeneric<int>), "CSharpHelperTest.NestedGeneric<int>"})]

      [InlineData(new object[]{typeof (CSharpHelperTest.Nested.DoubleNested), "CSharpHelperTest.Nested.DoubleNested"})]

      public void Reference_works(Type type, string expected)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {GetType(Integer), "int"})>

      <InlineData(New Object() {GetType(Integer?), "int?"})>

      <InlineData(New Object() {GetType(Integer()), "int[]"})>

      <InlineData(New Object() {GetType(Integer(,)), "int[,]"})>

      <InlineData(New Object() {GetType(Integer()()), "int[][]"})>

      <InlineData(New Object() {GetType(Generic(Of Integer)), "Generic<int>"})>

      <InlineData(New Object() {GetType(CSharpHelperTest.Nested), "CSharpHelperTest.Nested"})>

      <InlineData(New Object() {GetType(Generic(Of Generic(Of Integer))), "Generic<Generic<int>>"})>

      <InlineData(New Object() {GetType(MultiGeneric(Of Integer, Integer)), "MultiGeneric<int, int>"})>

      <InlineData(New Object() {GetType(CSharpHelperTest.NestedGeneric(Of Integer)), "CSharpHelperTest.NestedGeneric<int>"})>

      <InlineData(New Object() {GetType(CSharpHelperTest.Nested.DoubleNested), "CSharpHelperTest.Nested.DoubleNested"})>

      Public Sub Reference_works(type As Type, expected As String)
    parameters:
    - id: type
      type: System.Type
    - id: expected
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Identifier_works(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Identifier_works(System.String,System.String)
  id: Identifier_works(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Identifier_works(String, String)
  nameWithType: CSharpHelperTest.Identifier_works(String, String)
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Identifier_works(System.String, System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Identifier_works
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 216
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"dash-er", "dasher"})]

      [InlineData(new object[]{"params", "@params"})]

      [InlineData(new object[]{"true", "@true"})]

      [InlineData(new object[]{"yield", "yield"})]

      [InlineData(new object[]{"spac ed", "spaced"})]

      [InlineData(new object[]{"1nders", "_1nders"})]

      [InlineData(new object[]{"name.space", "@namespace"})]

      [InlineData(new object[]{"$", "_"})]

      public void Identifier_works(string input, string expected)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"dash-er", "dasher"})>

      <InlineData(New Object() {"params", "@params"})>

      <InlineData(New Object() {"true", "@true"})>

      <InlineData(New Object() {"yield", "yield"})>

      <InlineData(New Object() {"spac ed", "spaced"})>

      <InlineData(New Object() {"1nders", "_1nders"})>

      <InlineData(New Object() {"name.space", "@namespace"})>

      <InlineData(New Object() {"$", "_"})>

      Public Sub Identifier_works(input As String, expected As String)
    parameters:
    - id: input
      type: System.String
    - id: expected
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Namespace_works(System.String[],System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Namespace_works(System.String[],System.String)
  id: Namespace_works(System.String[],System.String)
  parent: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest
  langs:
  - csharp
  - vb
  name: Namespace_works(String[], String)
  nameWithType: CSharpHelperTest.Namespace_works(String[], String)
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Namespace_works(System.String[], System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Namespace_works
    path: test/Microsoft.EntityFrameworkCore.Design.Tests/Migrations/Design/CSharpHelperTest.cs
    startLine: 230
  assemblies:
  - Microsoft.EntityFrameworkCore.Design.Tests
  namespace: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{new string[]{"WebApplication1", "Migration"}, "WebApplication1.Migration"})]

      [InlineData(new object[]{new string[]{"WebApplication1.Migration"}, "WebApplication1.Migration"})]

      [InlineData(new object[]{new string[]{"ef-xplat.namespace"}, "efxplat.@namespace"})]

      [InlineData(new object[]{new string[]{"#", "$"}, "_._"})]

      [InlineData(new object[]{new string[]{""}, "_"})]

      [InlineData(new object[]{new string[]{}, "_"})]

      [InlineData(new object[]{new string[]{null}, "_"})]

      public void Namespace_works(string[] input, string excepted)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {New String() {"WebApplication1", "Migration"}, "WebApplication1.Migration"})>

      <InlineData(New Object() {New String() {"WebApplication1.Migration"}, "WebApplication1.Migration"})>

      <InlineData(New Object() {New String() {"ef-xplat.namespace"}, "efxplat.@namespace"})>

      <InlineData(New Object() {New String() {"#", "$"}, "_._"})>

      <InlineData(New Object() {New String() {""}, "_"})>

      <InlineData(New Object() {New String() {}, "_"})>

      <InlineData(New Object() {New String() {Nothing}, "_"})>

      Public Sub Namespace_works(input As String(), excepted As String)
    parameters:
    - id: input
      type: System.String[]
    - id: excepted
      type: System.String
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: CSharpHelperTest.Namespace_works(String(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design.CSharpHelperTest.Namespace_works(System.String(), System.String)
  name.vb: Namespace_works(String(), String)
references:
- uid: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  commentId: N:Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  nameWithType: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
  fullName: Microsoft.EntityFrameworkCore.Design.Tests.Migrations.Design
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
