### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  id: SqlServerTypeMapperTest
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_FK_max_length_is_preferred_if_specified
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_key_with_max_length_is_picked_up_by_FK
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Can_map_by_type_name(System.String,System.Type,System.Nullable{System.Int32},System.Boolean)
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping_for_nullable_CLR_types
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_null_values
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_sequence_types
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_strings_and_byte_arrays
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_values
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_binary_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_binary_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_binary_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_long_array
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_fixed_length_binary_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_binary_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_rowversion_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_rowversion_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_binary_mapping
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping_ansi
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DbTypes
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DDL_types
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DbTypes
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DDL_types
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_store_type_if_preferred_if_specified
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_with_store_type_is_picked_up_by_FK
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_max_length_is_preferred_if_specified
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_unicode_is_preferred_if_specified
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_max_length_is_picked_up_by_FK
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_unicode_is_picked_up_by_FK
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_property_types
  - Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_types
  langs:
  - csharp
  - vb
  name: SqlServerTypeMapperTest
  nameWithType: SqlServerTypeMapperTest
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlServerTypeMapperTest
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: 'public class SqlServerTypeMapperTest : RelationalTypeMapperTestBase'
    content.vb: >-
      Public Class SqlServerTypeMapperTest
          Inherits RelationalTypeMapperTestBase
  inheritance:
  - System.Object
  - Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase
  inheritedMembers:
  - Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType
  - Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DDL_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DDL_types
  id: Does_simple_SQL_Server_mappings_to_DDL_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_simple_SQL_Server_mappings_to_DDL_types()
  nameWithType: SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DDL_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DDL_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_simple_SQL_Server_mappings_to_DDL_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_simple_SQL_Server_mappings_to_DDL_types()
    content.vb: >-
      <Fact>

      Public Sub Does_simple_SQL_Server_mappings_to_DDL_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types
  id: Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types()
  nameWithType: SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 34
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types()
    content.vb: >-
      <Fact>

      Public Sub Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DDL_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DDL_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DDL_types
  id: Does_simple_SQL_Server_mappings_for_enums_to_DDL_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_simple_SQL_Server_mappings_for_enums_to_DDL_types()
  nameWithType: SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DDL_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DDL_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_simple_SQL_Server_mappings_for_enums_to_DDL_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 50
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_simple_SQL_Server_mappings_for_enums_to_DDL_types()
    content.vb: >-
      <Fact>

      Public Sub Does_simple_SQL_Server_mappings_for_enums_to_DDL_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DbTypes
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DbTypes
  id: Does_simple_SQL_Server_mappings_to_DbTypes
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_simple_SQL_Server_mappings_to_DbTypes()
  nameWithType: SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DbTypes()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_to_DbTypes()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_simple_SQL_Server_mappings_to_DbTypes
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 63
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_simple_SQL_Server_mappings_to_DbTypes()
    content.vb: >-
      <Fact>

      Public Sub Does_simple_SQL_Server_mappings_to_DbTypes
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes
  id: Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes()
  nameWithType: SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes()
    content.vb: >-
      <Fact>

      Public Sub Does_simple_SQL_Server_mappings_for_nullable_CLR_types_to_DbTypes
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DbTypes
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DbTypes
  id: Does_simple_SQL_Server_mappings_for_enums_to_DbTypes
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_simple_SQL_Server_mappings_for_enums_to_DbTypes()
  nameWithType: SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DbTypes()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_simple_SQL_Server_mappings_for_enums_to_DbTypes()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_simple_SQL_Server_mappings_for_enums_to_DbTypes
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 99
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_simple_SQL_Server_mappings_for_enums_to_DbTypes()
    content.vb: >-
      <Fact>

      Public Sub Does_simple_SQL_Server_mappings_for_enums_to_DbTypes
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping
  id: Does_decimal_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_decimal_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_decimal_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_decimal_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 112
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_decimal_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_decimal_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping_for_nullable_CLR_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping_for_nullable_CLR_types
  id: Does_decimal_mapping_for_nullable_CLR_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_decimal_mapping_for_nullable_CLR_types()
  nameWithType: SqlServerTypeMapperTest.Does_decimal_mapping_for_nullable_CLR_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_decimal_mapping_for_nullable_CLR_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_decimal_mapping_for_nullable_CLR_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 121
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_decimal_mapping_for_nullable_CLR_types()
    content.vb: >-
      <Fact>

      Public Sub Does_decimal_mapping_for_nullable_CLR_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  id: Does_non_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 130
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_non_key_SQL_Server_string_mapping(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_non_key_SQL_Server_string_mapping(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping(System.Nullable(Of System.Boolean))
  name.vb: Does_non_key_SQL_Server_string_mapping(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length(System.Nullable{System.Boolean})
  id: Does_non_key_SQL_Server_string_mapping_with_max_length(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping_with_max_length(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping_with_max_length
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 144
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_non_key_SQL_Server_string_mapping_with_max_length(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_non_key_SQL_Server_string_mapping_with_max_length(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length(System.Nullable(Of System.Boolean))
  name.vb: Does_non_key_SQL_Server_string_mapping_with_max_length(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string(System.Nullable{System.Boolean})
  id: Does_non_key_SQL_Server_string_mapping_with_long_string(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping_with_long_string(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping_with_long_string
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 158
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_non_key_SQL_Server_string_mapping_with_long_string(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_non_key_SQL_Server_string_mapping_with_long_string(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string(System.Nullable(Of System.Boolean))
  name.vb: Does_non_key_SQL_Server_string_mapping_with_long_string(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(System.Nullable{System.Boolean})
  id: Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 172
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(System.Nullable(Of System.Boolean))
  name.vb: Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping(System.Nullable{System.Boolean})
  id: Does_non_key_SQL_Server_required_string_mapping(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_required_string_mapping(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_required_string_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 186
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_non_key_SQL_Server_required_string_mapping(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_non_key_SQL_Server_required_string_mapping(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping(System.Nullable(Of System.Boolean))
  name.vb: Does_non_key_SQL_Server_required_string_mapping(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  id: Does_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_key_SQL_Server_string_mapping(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_key_SQL_Server_string_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 200
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_key_SQL_Server_string_mapping(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_key_SQL_Server_string_mapping(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping(System.Nullable(Of System.Boolean))
  name.vb: Does_key_SQL_Server_string_mapping(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  id: Does_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_foreign_key_SQL_Server_string_mapping(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_foreign_key_SQL_Server_string_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 219
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_foreign_key_SQL_Server_string_mapping(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_foreign_key_SQL_Server_string_mapping(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping(System.Nullable(Of System.Boolean))
  name.vb: Does_foreign_key_SQL_Server_string_mapping(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  id: Does_required_foreign_key_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_required_foreign_key_SQL_Server_string_mapping(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_required_foreign_key_SQL_Server_string_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 240
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_required_foreign_key_SQL_Server_string_mapping(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_required_foreign_key_SQL_Server_string_mapping(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping(System.Nullable(Of System.Boolean))
  name.vb: Does_required_foreign_key_SQL_Server_string_mapping(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  id: Does_indexed_column_SQL_Server_string_mapping(System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_indexed_column_SQL_Server_string_mapping(Nullable<Boolean>)
  nameWithType: SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping(Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping(System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_indexed_column_SQL_Server_string_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 262
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{true})]

      [InlineData(null)]

      public void Does_indexed_column_SQL_Server_string_mapping(bool ? unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {True})>

      <InlineData(Nothing)>

      Public Sub Does_indexed_column_SQL_Server_string_mapping(unicode As Boolean?)
    parameters:
    - id: unicode
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping(Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping(System.Nullable(Of System.Boolean))
  name.vb: Does_indexed_column_SQL_Server_string_mapping(Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_ansi
  id: Does_non_key_SQL_Server_string_mapping_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 281
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_string_mapping_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_string_mapping_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_ansi
  id: Does_non_key_SQL_Server_string_mapping_with_max_length_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping_with_max_length_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping_with_max_length_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 293
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_string_mapping_with_max_length_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_string_mapping_with_max_length_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string_ansi
  id: Does_non_key_SQL_Server_string_mapping_with_long_string_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping_with_long_string_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_long_string_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping_with_long_string_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 305
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_string_mapping_with_long_string_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_string_mapping_with_long_string_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi
  id: Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 317
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_string_mapping_with_max_length_with_long_string_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping_ansi
  id: Does_non_key_SQL_Server_required_string_mapping_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_required_string_mapping_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_string_mapping_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_required_string_mapping_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 329
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_required_string_mapping_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_required_string_mapping_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping_ansi
  id: Does_key_SQL_Server_string_mapping_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_key_SQL_Server_string_mapping_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_string_mapping_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_key_SQL_Server_string_mapping_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 341
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_key_SQL_Server_string_mapping_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_key_SQL_Server_string_mapping_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping_ansi
  id: Does_foreign_key_SQL_Server_string_mapping_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_foreign_key_SQL_Server_string_mapping_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_string_mapping_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_foreign_key_SQL_Server_string_mapping_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 358
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_foreign_key_SQL_Server_string_mapping_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_foreign_key_SQL_Server_string_mapping_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping_ansi
  id: Does_required_foreign_key_SQL_Server_string_mapping_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_required_foreign_key_SQL_Server_string_mapping_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_string_mapping_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_required_foreign_key_SQL_Server_string_mapping_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 377
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_required_foreign_key_SQL_Server_string_mapping_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_required_foreign_key_SQL_Server_string_mapping_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping_ansi
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping_ansi
  id: Does_indexed_column_SQL_Server_string_mapping_ansi
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_indexed_column_SQL_Server_string_mapping_ansi()
  nameWithType: SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping_ansi()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_string_mapping_ansi()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_indexed_column_SQL_Server_string_mapping_ansi
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 397
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_indexed_column_SQL_Server_string_mapping_ansi()
    content.vb: >-
      <Fact>

      Public Sub Does_indexed_column_SQL_Server_string_mapping_ansi
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping
  id: Does_non_key_SQL_Server_binary_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_binary_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_binary_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 414
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_binary_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_binary_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length
  id: Does_non_key_SQL_Server_binary_mapping_with_max_length
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_binary_mapping_with_max_length()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_binary_mapping_with_max_length
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 425
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_binary_mapping_with_max_length()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_binary_mapping_with_max_length
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_long_array
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_long_array
  id: Does_non_key_SQL_Server_binary_mapping_with_long_array
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_binary_mapping_with_long_array()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_long_array()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_long_array()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_binary_mapping_with_long_array
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 436
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_binary_mapping_with_long_array()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_binary_mapping_with_long_array
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array
  id: Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 447
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_binary_mapping_with_max_length_with_long_array
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_binary_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_binary_mapping
  id: Does_non_key_SQL_Server_required_binary_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_required_binary_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_binary_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_binary_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_required_binary_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 458
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_required_binary_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_required_binary_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_fixed_length_binary_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_fixed_length_binary_mapping
  id: Does_non_key_SQL_Server_fixed_length_binary_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_fixed_length_binary_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_fixed_length_binary_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_fixed_length_binary_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_fixed_length_binary_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 469
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_fixed_length_binary_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_fixed_length_binary_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_binary_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_binary_mapping
  id: Does_key_SQL_Server_binary_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_key_SQL_Server_binary_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_key_SQL_Server_binary_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_key_SQL_Server_binary_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_key_SQL_Server_binary_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 481
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_key_SQL_Server_binary_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_key_SQL_Server_binary_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_binary_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_binary_mapping
  id: Does_foreign_key_SQL_Server_binary_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_foreign_key_SQL_Server_binary_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_binary_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_foreign_key_SQL_Server_binary_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_foreign_key_SQL_Server_binary_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 495
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_foreign_key_SQL_Server_binary_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_foreign_key_SQL_Server_binary_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_binary_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_binary_mapping
  id: Does_required_foreign_key_SQL_Server_binary_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_required_foreign_key_SQL_Server_binary_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_binary_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_required_foreign_key_SQL_Server_binary_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_required_foreign_key_SQL_Server_binary_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 511
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_required_foreign_key_SQL_Server_binary_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_required_foreign_key_SQL_Server_binary_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_binary_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_binary_mapping
  id: Does_indexed_column_SQL_Server_binary_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_indexed_column_SQL_Server_binary_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_binary_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_indexed_column_SQL_Server_binary_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_indexed_column_SQL_Server_binary_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 528
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_indexed_column_SQL_Server_binary_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_indexed_column_SQL_Server_binary_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_rowversion_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_rowversion_mapping
  id: Does_non_key_SQL_Server_rowversion_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_rowversion_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_rowversion_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_rowversion_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_rowversion_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 542
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_rowversion_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_rowversion_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_rowversion_mapping
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_rowversion_mapping
  id: Does_non_key_SQL_Server_required_rowversion_mapping
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_non_key_SQL_Server_required_rowversion_mapping()
  nameWithType: SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_rowversion_mapping()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_non_key_SQL_Server_required_rowversion_mapping()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_non_key_SQL_Server_required_rowversion_mapping
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 557
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_non_key_SQL_Server_required_rowversion_mapping()
    content.vb: >-
      <Fact>

      Public Sub Does_non_key_SQL_Server_required_rowversion_mapping
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens
  id: Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens()
  nameWithType: SqlServerTypeMapperTest.Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 573
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens()
    content.vb: >-
      <Fact>

      Public Sub Does_not_do_rowversion_mapping_for_non_computed_concurrency_tokens
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_sequence_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_sequence_types
  id: Does_default_mappings_for_sequence_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_default_mappings_for_sequence_types()
  nameWithType: SqlServerTypeMapperTest.Does_default_mappings_for_sequence_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_sequence_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_default_mappings_for_sequence_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 611
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_default_mappings_for_sequence_types()
    content.vb: >-
      <Fact>

      Public Sub Does_default_mappings_for_sequence_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_strings_and_byte_arrays
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_strings_and_byte_arrays
  id: Does_default_mappings_for_strings_and_byte_arrays
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_default_mappings_for_strings_and_byte_arrays()
  nameWithType: SqlServerTypeMapperTest.Does_default_mappings_for_strings_and_byte_arrays()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_strings_and_byte_arrays()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_default_mappings_for_strings_and_byte_arrays
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 620
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_default_mappings_for_strings_and_byte_arrays()
    content.vb: >-
      <Fact>

      Public Sub Does_default_mappings_for_strings_and_byte_arrays
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_values
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_values
  id: Does_default_mappings_for_values
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_default_mappings_for_values()
  nameWithType: SqlServerTypeMapperTest.Does_default_mappings_for_values()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_values()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_default_mappings_for_values
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 627
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_default_mappings_for_values()
    content.vb: >-
      <Fact>

      Public Sub Does_default_mappings_for_values
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_null_values
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_null_values
  id: Does_default_mappings_for_null_values
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Does_default_mappings_for_null_values()
  nameWithType: SqlServerTypeMapperTest.Does_default_mappings_for_null_values()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Does_default_mappings_for_null_values()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Does_default_mappings_for_null_values
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 635
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Does_default_mappings_for_null_values()
    content.vb: >-
      <Fact>

      Public Sub Does_default_mappings_for_null_values
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_types
  id: Throws_for_unrecognized_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Throws_for_unrecognized_types()
  nameWithType: SqlServerTypeMapperTest.Throws_for_unrecognized_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Throws_for_unrecognized_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 643
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Throws_for_unrecognized_types()
    content.vb: >-
      <Fact>

      Public Sub Throws_for_unrecognized_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_property_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_property_types
  id: Throws_for_unrecognized_property_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Throws_for_unrecognized_property_types()
  nameWithType: SqlServerTypeMapperTest.Throws_for_unrecognized_property_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Throws_for_unrecognized_property_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Throws_for_unrecognized_property_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 650
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Throws_for_unrecognized_property_types()
    content.vb: >-
      <Fact>

      Public Sub Throws_for_unrecognized_property_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Can_map_by_type_name(System.String,System.Type,System.Nullable{System.Int32},System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Can_map_by_type_name(System.String,System.Type,System.Nullable{System.Int32},System.Boolean)
  id: Can_map_by_type_name(System.String,System.Type,System.Nullable{System.Int32},System.Boolean)
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Can_map_by_type_name(String, Type, Nullable<Int32>, Boolean)
  nameWithType: SqlServerTypeMapperTest.Can_map_by_type_name(String, Type, Nullable<Int32>, Boolean)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Can_map_by_type_name(System.String, System.Type, System.Nullable<System.Int32>, System.Boolean)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_map_by_type_name
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 658
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Theory]

      [InlineData(new object[]{"VARCHAR", typeof (string), 8000, false})]

      [InlineData(new object[]{"VarCHaR", typeof (string), 8000, false})]

      [InlineData(new object[]{"float", typeof (double), null, false})]

      [InlineData(new object[]{"timestamp", typeof (byte[]), 8, false})]

      [InlineData(new object[]{"nvarchar(max)", typeof (string), 4000, true})]

      [InlineData(new object[]{"nvarchar(333)", typeof (string), 333, true})]

      [InlineData(new object[]{"bigint", typeof (long), null, false})]

      [InlineData(new object[]{"binary varying", typeof (byte[]), 8000, false})]

      [InlineData(new object[]{"binary varying(max)", typeof (byte[]), 8000, false})]

      [InlineData(new object[]{"binary varying(333)", typeof (byte[]), 333, false})]

      [InlineData(new object[]{"binary", typeof (byte[]), 8000, false})]

      [InlineData(new object[]{"binary(333)", typeof (byte[]), 333, false})]

      [InlineData(new object[]{"bit", typeof (bool), null, false})]

      [InlineData(new object[]{"char varying", typeof (string), 8000, false})]

      [InlineData(new object[]{"char varying(max)", typeof (string), 8000, false})]

      [InlineData(new object[]{"char varying(333)", typeof (string), 333, false})]

      [InlineData(new object[]{"char", typeof (string), 8000, false})]

      [InlineData(new object[]{"char(333)", typeof (string), 333, false})]

      [InlineData(new object[]{"character varying", typeof (string), 8000, false})]

      [InlineData(new object[]{"character varying(max)", typeof (string), 8000, false})]

      [InlineData(new object[]{"character varying(333)", typeof (string), 333, false})]

      [InlineData(new object[]{"character", typeof (string), 8000, false})]

      [InlineData(new object[]{"character(333)", typeof (string), 333, false})]

      [InlineData(new object[]{"date", typeof (DateTime), null, false})]

      [InlineData(new object[]{"datetime", typeof (DateTime), null, false})]

      [InlineData(new object[]{"datetime2", typeof (DateTime), null, false})]

      [InlineData(new object[]{"datetimeoffset", typeof (DateTimeOffset), null, false})]

      [InlineData(new object[]{"dec", typeof (decimal), null, false})]

      [InlineData(new object[]{"decimal", typeof (decimal), null, false})]

      [InlineData(new object[]{"float", typeof (double), null, false})]

      [InlineData(new object[]{"float(10, 8)", typeof (double), null, false})]

      [InlineData(new object[]{"image", typeof (byte[]), 8000, false})]

      [InlineData(new object[]{"int", typeof (int), null, false})]

      [InlineData(new object[]{"money", typeof (decimal), null, false})]

      [InlineData(new object[]{"national char varying", typeof (string), 4000, true})]

      [InlineData(new object[]{"national char varying(max)", typeof (string), 4000, true})]

      [InlineData(new object[]{"national char varying(333)", typeof (string), 333, true})]

      [InlineData(new object[]{"national character varying", typeof (string), 4000, true})]

      [InlineData(new object[]{"national character varying(max)", typeof (string), 4000, true})]

      [InlineData(new object[]{"national character varying(333)", typeof (string), 333, true})]

      [InlineData(new object[]{"national character", typeof (string), 4000, true})]

      [InlineData(new object[]{"national character(333)", typeof (string), 333, true})]

      [InlineData(new object[]{"nchar", typeof (string), 4000, true})]

      [InlineData(new object[]{"nchar(333)", typeof (string), 333, true})]

      [InlineData(new object[]{"ntext", typeof (string), 4000, true})]

      [InlineData(new object[]{"numeric", typeof (decimal), null, false})]

      [InlineData(new object[]{"nvarchar", typeof (string), 4000, true})]

      [InlineData(new object[]{"nvarchar(max)", typeof (string), 4000, true})]

      [InlineData(new object[]{"nvarchar(333)", typeof (string), 333, true})]

      [InlineData(new object[]{"real", typeof (float), null, false})]

      [InlineData(new object[]{"rowversion", typeof (byte[]), 8, false})]

      [InlineData(new object[]{"smalldatetime", typeof (DateTime), null, false})]

      [InlineData(new object[]{"smallint", typeof (short), null, false})]

      [InlineData(new object[]{"smallmoney", typeof (decimal), null, false})]

      [InlineData(new object[]{"text", typeof (string), 8000, false})]

      [InlineData(new object[]{"time", typeof (TimeSpan), null, false})]

      [InlineData(new object[]{"timestamp", typeof (byte[]), 8, false})]

      [InlineData(new object[]{"tinyint", typeof (byte), null, false})]

      [InlineData(new object[]{"uniqueidentifier", typeof (Guid), null, false})]

      [InlineData(new object[]{"varbinary", typeof (byte[]), 8000, false})]

      [InlineData(new object[]{"varbinary(max)", typeof (byte[]), 8000, false})]

      [InlineData(new object[]{"varbinary(333)", typeof (byte[]), 333, false})]

      [InlineData(new object[]{"varchar", typeof (string), 8000, false})]

      [InlineData(new object[]{"varchar(max)", typeof (string), 8000, false})]

      [InlineData(new object[]{"varchar(333)", typeof (string), 333, false})]

      [InlineData(new object[]{"xml", typeof (string), 4000, true})]

      public void Can_map_by_type_name(string typeName, Type clrType, int ? size, bool unicode)
    content.vb: >-
      <Theory>

      <InlineData(New Object() {"VARCHAR", GetType(String), 8000, False})>

      <InlineData(New Object() {"VarCHaR", GetType(String), 8000, False})>

      <InlineData(New Object() {"float", GetType(Double), Nothing, False})>

      <InlineData(New Object() {"timestamp", GetType(Byte()), 8, False})>

      <InlineData(New Object() {"nvarchar(max)", GetType(String), 4000, True})>

      <InlineData(New Object() {"nvarchar(333)", GetType(String), 333, True})>

      <InlineData(New Object() {"bigint", GetType(Long), Nothing, False})>

      <InlineData(New Object() {"binary varying", GetType(Byte()), 8000, False})>

      <InlineData(New Object() {"binary varying(max)", GetType(Byte()), 8000, False})>

      <InlineData(New Object() {"binary varying(333)", GetType(Byte()), 333, False})>

      <InlineData(New Object() {"binary", GetType(Byte()), 8000, False})>

      <InlineData(New Object() {"binary(333)", GetType(Byte()), 333, False})>

      <InlineData(New Object() {"bit", GetType(Boolean), Nothing, False})>

      <InlineData(New Object() {"char varying", GetType(String), 8000, False})>

      <InlineData(New Object() {"char varying(max)", GetType(String), 8000, False})>

      <InlineData(New Object() {"char varying(333)", GetType(String), 333, False})>

      <InlineData(New Object() {"char", GetType(String), 8000, False})>

      <InlineData(New Object() {"char(333)", GetType(String), 333, False})>

      <InlineData(New Object() {"character varying", GetType(String), 8000, False})>

      <InlineData(New Object() {"character varying(max)", GetType(String), 8000, False})>

      <InlineData(New Object() {"character varying(333)", GetType(String), 333, False})>

      <InlineData(New Object() {"character", GetType(String), 8000, False})>

      <InlineData(New Object() {"character(333)", GetType(String), 333, False})>

      <InlineData(New Object() {"date", GetType(Date), Nothing, False})>

      <InlineData(New Object() {"datetime", GetType(Date), Nothing, False})>

      <InlineData(New Object() {"datetime2", GetType(Date), Nothing, False})>

      <InlineData(New Object() {"datetimeoffset", GetType(DateTimeOffset), Nothing, False})>

      <InlineData(New Object() {"dec", GetType(Decimal), Nothing, False})>

      <InlineData(New Object() {"decimal", GetType(Decimal), Nothing, False})>

      <InlineData(New Object() {"float", GetType(Double), Nothing, False})>

      <InlineData(New Object() {"float(10, 8)", GetType(Double), Nothing, False})>

      <InlineData(New Object() {"image", GetType(Byte()), 8000, False})>

      <InlineData(New Object() {"int", GetType(Integer), Nothing, False})>

      <InlineData(New Object() {"money", GetType(Decimal), Nothing, False})>

      <InlineData(New Object() {"national char varying", GetType(String), 4000, True})>

      <InlineData(New Object() {"national char varying(max)", GetType(String), 4000, True})>

      <InlineData(New Object() {"national char varying(333)", GetType(String), 333, True})>

      <InlineData(New Object() {"national character varying", GetType(String), 4000, True})>

      <InlineData(New Object() {"national character varying(max)", GetType(String), 4000, True})>

      <InlineData(New Object() {"national character varying(333)", GetType(String), 333, True})>

      <InlineData(New Object() {"national character", GetType(String), 4000, True})>

      <InlineData(New Object() {"national character(333)", GetType(String), 333, True})>

      <InlineData(New Object() {"nchar", GetType(String), 4000, True})>

      <InlineData(New Object() {"nchar(333)", GetType(String), 333, True})>

      <InlineData(New Object() {"ntext", GetType(String), 4000, True})>

      <InlineData(New Object() {"numeric", GetType(Decimal), Nothing, False})>

      <InlineData(New Object() {"nvarchar", GetType(String), 4000, True})>

      <InlineData(New Object() {"nvarchar(max)", GetType(String), 4000, True})>

      <InlineData(New Object() {"nvarchar(333)", GetType(String), 333, True})>

      <InlineData(New Object() {"real", GetType(Single), Nothing, False})>

      <InlineData(New Object() {"rowversion", GetType(Byte()), 8, False})>

      <InlineData(New Object() {"smalldatetime", GetType(Date), Nothing, False})>

      <InlineData(New Object() {"smallint", GetType(Short), Nothing, False})>

      <InlineData(New Object() {"smallmoney", GetType(Decimal), Nothing, False})>

      <InlineData(New Object() {"text", GetType(String), 8000, False})>

      <InlineData(New Object() {"time", GetType(TimeSpan), Nothing, False})>

      <InlineData(New Object() {"timestamp", GetType(Byte()), 8, False})>

      <InlineData(New Object() {"tinyint", GetType(Byte), Nothing, False})>

      <InlineData(New Object() {"uniqueidentifier", GetType(Guid), Nothing, False})>

      <InlineData(New Object() {"varbinary", GetType(Byte()), 8000, False})>

      <InlineData(New Object() {"varbinary(max)", GetType(Byte()), 8000, False})>

      <InlineData(New Object() {"varbinary(333)", GetType(Byte()), 333, False})>

      <InlineData(New Object() {"varchar", GetType(String), 8000, False})>

      <InlineData(New Object() {"varchar(max)", GetType(String), 8000, False})>

      <InlineData(New Object() {"varchar(333)", GetType(String), 333, False})>

      <InlineData(New Object() {"xml", GetType(String), 4000, True})>

      Public Sub Can_map_by_type_name(typeName As String, clrType As Type, size As Integer?, unicode As Boolean)
    parameters:
    - id: typeName
      type: System.String
    - id: clrType
      type: System.Type
    - id: size
      type: System.Nullable{System.Int32}
    - id: unicode
      type: System.Boolean
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: SqlServerTypeMapperTest.Can_map_by_type_name(String, Type, Nullable(Of Int32), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Can_map_by_type_name(System.String, System.Type, System.Nullable(Of System.Int32), System.Boolean)
  name.vb: Can_map_by_type_name(String, Type, Nullable(Of Int32), Boolean)
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_with_store_type_is_picked_up_by_FK
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_with_store_type_is_picked_up_by_FK
  id: Key_with_store_type_is_picked_up_by_FK
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Key_with_store_type_is_picked_up_by_FK()
  nameWithType: SqlServerTypeMapperTest.Key_with_store_type_is_picked_up_by_FK()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_with_store_type_is_picked_up_by_FK()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Key_with_store_type_is_picked_up_by_FK
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 735
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Key_with_store_type_is_picked_up_by_FK()
    content.vb: >-
      <Fact>

      Public Sub Key_with_store_type_is_picked_up_by_FK
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_max_length_is_picked_up_by_FK
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_max_length_is_picked_up_by_FK
  id: String_key_with_max_length_is_picked_up_by_FK
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: String_key_with_max_length_is_picked_up_by_FK()
  nameWithType: SqlServerTypeMapperTest.String_key_with_max_length_is_picked_up_by_FK()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_max_length_is_picked_up_by_FK()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: String_key_with_max_length_is_picked_up_by_FK
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 750
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void String_key_with_max_length_is_picked_up_by_FK()
    content.vb: >-
      <Fact>

      Public Sub String_key_with_max_length_is_picked_up_by_FK
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_key_with_max_length_is_picked_up_by_FK
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_key_with_max_length_is_picked_up_by_FK
  id: Binary_key_with_max_length_is_picked_up_by_FK
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Binary_key_with_max_length_is_picked_up_by_FK()
  nameWithType: SqlServerTypeMapperTest.Binary_key_with_max_length_is_picked_up_by_FK()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_key_with_max_length_is_picked_up_by_FK()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Binary_key_with_max_length_is_picked_up_by_FK
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 765
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Binary_key_with_max_length_is_picked_up_by_FK()
    content.vb: >-
      <Fact>

      Public Sub Binary_key_with_max_length_is_picked_up_by_FK
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_unicode_is_picked_up_by_FK
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_unicode_is_picked_up_by_FK
  id: String_key_with_unicode_is_picked_up_by_FK
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: String_key_with_unicode_is_picked_up_by_FK()
  nameWithType: SqlServerTypeMapperTest.String_key_with_unicode_is_picked_up_by_FK()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_key_with_unicode_is_picked_up_by_FK()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: String_key_with_unicode_is_picked_up_by_FK
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 780
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void String_key_with_unicode_is_picked_up_by_FK()
    content.vb: >-
      <Fact>

      Public Sub String_key_with_unicode_is_picked_up_by_FK
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_store_type_if_preferred_if_specified
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_store_type_if_preferred_if_specified
  id: Key_store_type_if_preferred_if_specified
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Key_store_type_if_preferred_if_specified()
  nameWithType: SqlServerTypeMapperTest.Key_store_type_if_preferred_if_specified()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Key_store_type_if_preferred_if_specified()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Key_store_type_if_preferred_if_specified
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 795
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Key_store_type_if_preferred_if_specified()
    content.vb: >-
      <Fact>

      Public Sub Key_store_type_if_preferred_if_specified
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_max_length_is_preferred_if_specified
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_max_length_is_preferred_if_specified
  id: String_FK_max_length_is_preferred_if_specified
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: String_FK_max_length_is_preferred_if_specified()
  nameWithType: SqlServerTypeMapperTest.String_FK_max_length_is_preferred_if_specified()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_max_length_is_preferred_if_specified()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: String_FK_max_length_is_preferred_if_specified
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 810
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void String_FK_max_length_is_preferred_if_specified()
    content.vb: >-
      <Fact>

      Public Sub String_FK_max_length_is_preferred_if_specified
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_FK_max_length_is_preferred_if_specified
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_FK_max_length_is_preferred_if_specified
  id: Binary_FK_max_length_is_preferred_if_specified
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: Binary_FK_max_length_is_preferred_if_specified()
  nameWithType: SqlServerTypeMapperTest.Binary_FK_max_length_is_preferred_if_specified()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.Binary_FK_max_length_is_preferred_if_specified()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Binary_FK_max_length_is_preferred_if_specified
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 825
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void Binary_FK_max_length_is_preferred_if_specified()
    content.vb: >-
      <Fact>

      Public Sub Binary_FK_max_length_is_preferred_if_specified
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_unicode_is_preferred_if_specified
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_unicode_is_preferred_if_specified
  id: String_FK_unicode_is_preferred_if_specified
  parent: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest
  langs:
  - csharp
  - vb
  name: String_FK_unicode_is_preferred_if_specified()
  nameWithType: SqlServerTypeMapperTest.String_FK_unicode_is_preferred_if_specified()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests.SqlServerTypeMapperTest.String_FK_unicode_is_preferred_if_specified()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: String_FK_unicode_is_preferred_if_specified
    path: test/Microsoft.EntityFrameworkCore.SqlServer.Tests/SqlServerTypeMapperTest.cs
    startLine: 840
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.Tests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.Tests
  syntax:
    content: >-
      [Fact]

      public void String_FK_unicode_is_preferred_if_specified()
    content.vb: >-
      <Fact>

      Public Sub String_FK_unicode_is_preferred_if_specified
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.Tests
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.Tests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.Tests
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.Tests
  fullName: Microsoft.EntityFrameworkCore.SqlServer.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase
  commentId: T:Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase
  parent: Microsoft.EntityFrameworkCore.Relational.Tests.Storage
  isExternal: false
  name: RelationalTypeMapperTestBase
  nameWithType: RelationalTypeMapperTestBase
  fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase
- uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType
  commentId: M:Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType
  parent: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase
  isExternal: false
  name: CreateEntityType()
  nameWithType: RelationalTypeMapperTestBase.CreateEntityType()
  fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType
    name: CreateEntityType
    nameWithType: RelationalTypeMapperTestBase.CreateEntityType
    fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType
    name: CreateEntityType
    nameWithType: RelationalTypeMapperTestBase.CreateEntityType
    fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateEntityType
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel
  commentId: M:Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel
  parent: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase
  isExternal: false
  name: CreateModel()
  nameWithType: RelationalTypeMapperTestBase.CreateModel()
  fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel
    name: CreateModel
    nameWithType: RelationalTypeMapperTestBase.CreateModel
    fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel
    name: CreateModel
    nameWithType: RelationalTypeMapperTestBase.CreateModel
    fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage.RelationalTypeMapperTestBase.CreateModel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Relational.Tests.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Relational.Tests.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Relational.Tests.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Relational.Tests.Storage
  fullName: Microsoft.EntityFrameworkCore.Relational.Tests.Storage
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
