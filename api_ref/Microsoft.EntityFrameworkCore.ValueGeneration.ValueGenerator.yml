### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  commentId: T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  id: ValueGenerator
  parent: Microsoft.EntityFrameworkCore.ValueGeneration
  children:
  - Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.GeneratesTemporaryValues
  - Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  - Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  - Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ValueGenerator
  nameWithType: ValueGenerator
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ValueGenerator
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\n    Generates values for properties when an entity is added to a context.\n"
  example: []
  syntax:
    content: public abstract class ValueGenerator
    content.vb: Public MustInherit Class ValueGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  id: Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  langs:
  - csharp
  - vb
  name: Next(EntityEntry)
  nameWithType: ValueGenerator.Next(EntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Next
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\n    Gets a value to be assigned to a property.\n"
  example: []
  syntax:
    content: public virtual object Next(EntityEntry entry)
    content.vb: Public Overridable Function Next(entry As EntityEntry) As Object
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
    return:
      type: System.Object
      description: 'The value to be assigned to a property. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  commentId: M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  id: NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  langs:
  - csharp
  - vb
  name: NextValue(EntityEntry)
  nameWithType: ValueGenerator.NextValue(EntityEntry)
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValue(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NextValue
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
    startLine: 29
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\n    Template method to be overridden by implementations to perform value generation.\n"
  example: []
  syntax:
    content: protected abstract object NextValue(EntityEntry entry)
    content.vb: Protected MustOverride Function NextValue(entry As EntityEntry) As Object
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
    return:
      type: System.Object
      description: 'The generated value. '
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  id: NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  langs:
  - csharp
  - vb
  name: NextAsync(EntityEntry, CancellationToken)
  nameWithType: ValueGenerator.NextAsync(EntityEntry, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NextAsync
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
    startLine: 36
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\n    Gets a value to be assigned to a property.\n"
  example: []
  syntax:
    content: public virtual Task<object> NextAsync(EntityEntry entry, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function NextAsync(entry As EntityEntry, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: 'The value to be assigned to a property. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  id: NextValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  langs:
  - csharp
  - vb
  name: NextValueAsync(EntityEntry, CancellationToken)
  nameWithType: ValueGenerator.NextValueAsync(EntityEntry, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.NextValueAsync(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NextValueAsync
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\n    Template method to be overridden by implementations to perform value generation.\n"
  example: []
  syntax:
    content: protected virtual Task<object> NextValueAsync(EntityEntry entry, CancellationToken cancellationToken = null)
    content.vb: Protected Overridable Function NextValueAsync(entry As EntityEntry, cancellationToken As CancellationToken = Nothing) As Task(Of Object)
    parameters:
    - id: entry
      type: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: 'The generated value. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.GeneratesTemporaryValues
  commentId: P:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.GeneratesTemporaryValues
  id: GeneratesTemporaryValues
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  langs:
  - csharp
  - vb
  name: GeneratesTemporaryValues
  nameWithType: ValueGenerator.GeneratesTemporaryValues
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator.GeneratesTemporaryValues
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GeneratesTemporaryValues
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/ValueGenerator.cs
    startLine: 64
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\n<p>\n    Gets a value indicating whether the values generated are temporary (i.e they should be replaced\n    by database generated values when the entity is saved) or are permanent (i.e. the generated values\n    should be saved to the database).\n</p>\n<p>\n    An example of temporary value generation is generating negative numbers for an integer primary key\n    that are then replaced by positive numbers generated by the database when the entity is saved. An\n    example of permanent value generation are client-generated values for a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> primary\n    key which are saved to the database.\n</p>\n"
  example: []
  syntax:
    content: public abstract bool GeneratesTemporaryValues { get; }
    content.vb: Public MustOverride ReadOnly Property GeneratesTemporaryValues As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: Microsoft.EntityFrameworkCore.ValueGeneration
  commentId: N:Microsoft.EntityFrameworkCore.ValueGeneration
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ValueGeneration
  nameWithType: Microsoft.EntityFrameworkCore.ValueGeneration
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  commentId: T:Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
  parent: Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: EntityEntry
  nameWithType: EntityEntry
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry
- uid: Microsoft.EntityFrameworkCore.ChangeTracking
  commentId: N:Microsoft.EntityFrameworkCore.ChangeTracking
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ChangeTracking
  nameWithType: Microsoft.EntityFrameworkCore.ChangeTracking
  fullName: Microsoft.EntityFrameworkCore.ChangeTracking
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullname.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
