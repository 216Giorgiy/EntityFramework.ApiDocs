### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  id: SqlTranslatingExpressionVisitor
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  children:
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Linq.Expressions.Expression,System.Boolean,System.Boolean)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ClientEvalPredicate
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  langs:
  - csharp
  - vb
  name: SqlTranslatingExpressionVisitor
  nameWithType: SqlTranslatingExpressionVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlTranslatingExpressionVisitor
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    The default relational LINQ translating expression visitor.\n"
  example: []
  syntax:
    content: 'public class SqlTranslatingExpressionVisitor : ThrowingExpressionVisitor'
    content.vb: >-
      Public Class SqlTranslatingExpressionVisitor
          Inherits ThrowingExpressionVisitor
  inheritance:
  - System.Object
  - System.Linq.Expressions.ExpressionVisitor
  - Remotion.Linq.Parsing.RelinqExpressionVisitor
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor
  inheritedMembers:
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{{T}})
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  - Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
  - System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Linq.Expressions.Expression,System.Boolean,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Linq.Expressions.Expression,System.Boolean,System.Boolean)
  id: '#ctor(Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator,Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Linq.Expressions.Expression,System.Boolean,System.Boolean)'
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: SqlTranslatingExpressionVisitor(IRelationalAnnotationProvider, IExpressionFragmentTranslator, IMethodCallTranslator, IMemberTranslator, IRelationalTypeMapper, RelationalQueryModelVisitor, SelectExpression, Expression, Boolean, Boolean)
  nameWithType: SqlTranslatingExpressionVisitor.SqlTranslatingExpressionVisitor(IRelationalAnnotationProvider, IExpressionFragmentTranslator, IMethodCallTranslator, IMemberTranslator, IRelationalTypeMapper, RelationalQueryModelVisitor, SelectExpression, Expression, Boolean, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.SqlTranslatingExpressionVisitor(Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider, Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator, Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator, Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator, Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper, Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, System.Linq.Expressions.Expression, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 66
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SqlTranslatingExpressionVisitor(IRelationalAnnotationProvider relationalAnnotationProvider, IExpressionFragmentTranslator compositeExpressionFragmentTranslator, IMethodCallTranslator methodCallTranslator, IMemberTranslator memberTranslator, IRelationalTypeMapper relationalTypeMapper, RelationalQueryModelVisitor queryModelVisitor, SelectExpression targetSelectExpression = null, Expression topLevelPredicate = null, bool bindParentQueries = false, bool inProjection = false)
    content.vb: Public Sub New(relationalAnnotationProvider As IRelationalAnnotationProvider, compositeExpressionFragmentTranslator As IExpressionFragmentTranslator, methodCallTranslator As IMethodCallTranslator, memberTranslator As IMemberTranslator, relationalTypeMapper As IRelationalTypeMapper, queryModelVisitor As RelationalQueryModelVisitor, targetSelectExpression As SelectExpression = Nothing, topLevelPredicate As Expression = Nothing, bindParentQueries As Boolean = False, inProjection As Boolean = False)
    parameters:
    - id: relationalAnnotationProvider
      type: Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
      description: 'The relational annotation provider. '
    - id: compositeExpressionFragmentTranslator
      type: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator
      description: 'The composite expression fragment translator. '
    - id: methodCallTranslator
      type: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator
      description: 'The method call translator. '
    - id: memberTranslator
      type: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator
      description: 'The member translator. '
    - id: relationalTypeMapper
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
      description: 'The relational type mapper. '
    - id: queryModelVisitor
      type: Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor
      description: 'The query model visitor. '
    - id: targetSelectExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: 'The target select expression. '
    - id: topLevelPredicate
      type: System.Linq.Expressions.Expression
      description: 'The top level predicate. '
    - id: bindParentQueries
      type: System.Boolean
      description: 'true to bind parent queries. '
    - id: inProjection
      type: System.Boolean
      description: 'true if the expression to be translated is a LINQ projection. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ClientEvalPredicate
  commentId: P:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ClientEvalPredicate
  id: ClientEvalPredicate
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: ClientEvalPredicate
  nameWithType: SqlTranslatingExpressionVisitor.ClientEvalPredicate
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.ClientEvalPredicate
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ClientEvalPredicate
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 104
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    When translating a predicate expression, returns a client expression corresponding\n    to the part of the target expression that should be evaluated locally.\n"
  example: []
  syntax:
    content: public virtual Expression ClientEvalPredicate { get; }
    content.vb: Public Overridable ReadOnly Property ClientEvalPredicate As Expression
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    The client eval predicate.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  id: Visit(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: Visit(Expression)
  nameWithType: SqlTranslatingExpressionVisitor.Visit(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Visit
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 113
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits the given expression.\n"
  example: []
  syntax:
    content: public override Expression Visit(Expression expression)
    content.vb: Public Overrides Function Visit(expression As Expression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  id: VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitBinary(BinaryExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitBinary(BinaryExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitBinary
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 133
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visit a binary expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitBinary(BinaryExpression expression)
    content.vb: Protected Overrides Function VisitBinary(expression As BinaryExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.BinaryExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  id: VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitConditional(ConditionalExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitConditional(ConditionalExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitConditional
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 236
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits a conditional expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitConditional(ConditionalExpression expression)
    content.vb: Protected Overrides Function VisitConditional(expression As ConditionalExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.ConditionalExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  id: VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitMethodCall(MethodCallExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitMethodCall(MethodCallExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitMethodCall
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 576
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits a method call expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitMethodCall(MethodCallExpression methodCallExpression)
    content.vb: Protected Overrides Function VisitMethodCall(methodCallExpression As MethodCallExpression) As Expression
    parameters:
    - id: methodCallExpression
      type: System.Linq.Expressions.MethodCallExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  id: VisitMember(System.Linq.Expressions.MemberExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitMember(MemberExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitMember(MemberExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitMember
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 632
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visit a member expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitMember(MemberExpression expression)
    content.vb: Protected Overrides Function VisitMember(expression As MemberExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.MemberExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  id: VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitUnary(UnaryExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitUnary(UnaryExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitUnary
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 725
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visit a unary expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitUnary(UnaryExpression expression)
    content.vb: Protected Overrides Function VisitUnary(expression As UnaryExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.UnaryExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  id: VisitNew(System.Linq.Expressions.NewExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitNew(NewExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitNew(NewExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitNew
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 763
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits a new expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitNew(NewExpression expression)
    content.vb: Protected Overrides Function VisitNew(expression As NewExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.NewExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  id: VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitSubQuery(SubQueryExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitSubQuery(SubQueryExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitSubQuery
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 809
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits a sub-query expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitSubQuery(SubQueryExpression expression)
    content.vb: Protected Overrides Function VisitSubQuery(expression As SubQueryExpression) As Expression
    parameters:
    - id: expression
      type: Remotion.Linq.Clauses.Expressions.SubQueryExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  id: VisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitConstant(ConstantExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitConstant(ConstantExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitConstant
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 914
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits a constant expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitConstant(ConstantExpression expression)
    content.vb: Protected Overrides Function VisitConstant(expression As ConstantExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.ConstantExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  id: VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitParameter(ParameterExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitParameter(ParameterExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitParameter
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 942
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits a parameter expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitParameter(ParameterExpression expression)
    content.vb: Protected Overrides Function VisitParameter(expression As ParameterExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.ParameterExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  id: VisitExtension(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitExtension(Expression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitExtension(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitExtension
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 960
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits an extension expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitExtension(Expression expression)
    content.vb: Protected Overrides Function VisitExtension(expression As Expression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  id: VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitQuerySourceReference(QuerySourceReferenceExpression)
  nameWithType: SqlTranslatingExpressionVisitor.VisitQuerySourceReference(QuerySourceReferenceExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitQuerySourceReference
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 1019
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Visits a query source reference expression.\n"
  example: []
  syntax:
    content: protected override Expression VisitQuerySourceReference(QuerySourceReferenceExpression expression)
    content.vb: Protected Overrides Function VisitQuerySourceReference(expression As QuerySourceReferenceExpression) As Expression
    parameters:
    - id: expression
      type: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
      description: 'The expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  id: VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  nameWithType: SqlTranslatingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, System.String, System.Func<TItem, TResult>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitUnhandledItem
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 1071
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Called when an unhandled item is visited. This method provides the item the visitor cannot handle (<em>unhandledItem</em>),\n    the <em>visitMethod</em> that is not implemented in the visitor, and a delegate that can be used to invoke the\n<em>baseBehavior</em> of the <xref href=\"Remotion.Linq.Parsing.RelinqExpressionVisitor\" data-throw-if-not-resolved=\"false\"></xref> class. The default behavior of\nthis method is to call the\n<xref href=\"Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException%60%601(%60%600%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> method, but it can\nbe overridden to do something else.\n"
  example: []
  syntax:
    content: 'protected override TResult VisitUnhandledItem<TItem, TResult>(TItem unhandledItem, string visitMethod, Func<TItem, TResult> baseBehavior)where TItem : TResult'
    content.vb: Protected Overrides Function VisitUnhandledItem(Of TItem As TResult, TResult)(unhandledItem As TItem, visitMethod As String, baseBehavior As Func(Of TItem, TResult)) As TResult
    parameters:
    - id: unhandledItem
      type: '{TItem}'
      description: The unhandled item.
    - id: visitMethod
      type: System.String
      description: The visit method that is not implemented.
    - id: baseBehavior
      type: System.Func{{TItem},{TResult}}
      description: The behavior exposed by <xref href="Remotion.Linq.Parsing.RelinqExpressionVisitor" data-throw-if-not-resolved="false"></xref> for this item type.
    typeParameters:
    - id: TItem
      description: "\n    The type of the item that could not be handled. Either an <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> type, a\n<xref href=\"System.Linq.Expressions.MemberBinding\" data-throw-if-not-resolved=\"false\"></xref>\ntype, or <xref href=\"System.Linq.Expressions.ElementInit\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: TResult
      description: The result type expected for the visited <em>unhandledItem</em>.
    return:
      type: '{TResult}'
      description: An object to replace <em>unhandledItem</em> in the expression tree. Alternatively, the method can throw any exception.
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2({TItem},System.String,System.Func{{TItem},{TResult}})
  nameWithType.vb: SqlTranslatingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, System.String, System.Func(Of TItem, TResult))
  name.vb: VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  id: CreateUnhandledItemException``1(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  langs:
  - csharp
  - vb
  name: CreateUnhandledItemException<T>(T, String)
  nameWithType: SqlTranslatingExpressionVisitor.CreateUnhandledItemException<T>(T, String)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.CreateUnhandledItemException<T>(T, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateUnhandledItemException
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ExpressionVisitors/SqlTranslatingExpressionVisitor.cs
    startLine: 1084
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  summary: "\n    Creates an unhandled item exception.\n"
  example: []
  syntax:
    content: protected override Exception CreateUnhandledItemException<T>(T unhandledItem, string visitMethod)
    content.vb: Protected Overrides Function CreateUnhandledItemException(Of T)(unhandledItem As T, visitMethod As String) As Exception
    parameters:
    - id: unhandledItem
      type: '{T}'
      description: 'The unhandled item. '
    - id: visitMethod
      type: System.String
      description: 'The visit method that is not implemented. '
    typeParameters:
    - id: T
      description: 'Generic type parameter. '
    return:
      type: System.Exception
      description: "\n    The new unhandled item exception.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1({T},System.String)
  nameWithType.vb: SqlTranslatingExpressionVisitor.CreateUnhandledItemException(Of T)(T, String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.CreateUnhandledItemException(Of T)(T, System.String)
  name.vb: CreateUnhandledItemException(Of T)(T, String)
references:
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  commentId: N:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  nameWithType: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Linq.Expressions.ExpressionVisitor
  commentId: T:System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: true
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: Remotion.Linq.Parsing.RelinqExpressionVisitor
  commentId: T:Remotion.Linq.Parsing.RelinqExpressionVisitor
  parent: Remotion.Linq.Parsing
  isExternal: true
  name: RelinqExpressionVisitor
  nameWithType: RelinqExpressionVisitor
  fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  commentId: T:Remotion.Linq.Parsing.ThrowingExpressionVisitor
  parent: Remotion.Linq.Parsing
  isExternal: true
  name: ThrowingExpressionVisitor
  nameWithType: ThrowingExpressionVisitor
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitUnknownStandardExpression(Expression, String, Func<Expression, Expression>)
  nameWithType: ThrowingExpressionVisitor.VisitUnknownStandardExpression(Expression, String, Func<Expression, Expression>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression, System.String, System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitUnknownStandardExpression(Expression, String, Func(Of Expression, Expression))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression, System.String, System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression))
  name.vb: VisitUnknownStandardExpression(Expression, String, Func(Of Expression, Expression))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
    name: VisitUnknownStandardExpression
    nameWithType: ThrowingExpressionVisitor.VisitUnknownStandardExpression
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
    name: VisitUnknownStandardExpression
    nameWithType: ThrowingExpressionVisitor.VisitUnknownStandardExpression
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitExtension(Expression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitExtension(Expression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
    name: BaseVisitExtension
    nameWithType: ThrowingExpressionVisitor.BaseVisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
    name: BaseVisitExtension
    nameWithType: ThrowingExpressionVisitor.BaseVisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitUnary(UnaryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitUnary(UnaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
    name: BaseVisitUnary
    nameWithType: ThrowingExpressionVisitor.BaseVisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
    name: BaseVisitUnary
    nameWithType: ThrowingExpressionVisitor.BaseVisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitBinary(BinaryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitBinary(BinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
    name: BaseVisitBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
    name: BaseVisitBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitTypeBinary(TypeBinaryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitTypeBinary(TypeBinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.VisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.VisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitTypeBinary(TypeBinaryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitTypeBinary(TypeBinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: BaseVisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: BaseVisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitConstant(ConstantExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitConstant(ConstantExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
    name: BaseVisitConstant
    nameWithType: ThrowingExpressionVisitor.BaseVisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
    name: BaseVisitConstant
    nameWithType: ThrowingExpressionVisitor.BaseVisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitConditional(ConditionalExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitConditional(ConditionalExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: BaseVisitConditional
    nameWithType: ThrowingExpressionVisitor.BaseVisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: BaseVisitConditional
    nameWithType: ThrowingExpressionVisitor.BaseVisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitParameter(ParameterExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitParameter(ParameterExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
    name: BaseVisitParameter
    nameWithType: ThrowingExpressionVisitor.BaseVisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
    name: BaseVisitParameter
    nameWithType: ThrowingExpressionVisitor.BaseVisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.VisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.VisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{{T}})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  name: BaseVisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.BaseVisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: BaseVisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMethodCall(MethodCallExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMethodCall(MethodCallExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: BaseVisitMethodCall
    nameWithType: ThrowingExpressionVisitor.BaseVisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: BaseVisitMethodCall
    nameWithType: ThrowingExpressionVisitor.BaseVisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitInvocation(InvocationExpression)
  nameWithType: ThrowingExpressionVisitor.VisitInvocation(InvocationExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    nameWithType: ThrowingExpressionVisitor.VisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    nameWithType: ThrowingExpressionVisitor.VisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitInvocation(InvocationExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitInvocation(InvocationExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: BaseVisitInvocation
    nameWithType: ThrowingExpressionVisitor.BaseVisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: BaseVisitInvocation
    nameWithType: ThrowingExpressionVisitor.BaseVisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMember(MemberExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMember(MemberExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
    name: BaseVisitMember
    nameWithType: ThrowingExpressionVisitor.BaseVisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
    name: BaseVisitMember
    nameWithType: ThrowingExpressionVisitor.BaseVisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitNew(NewExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitNew(NewExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
    name: BaseVisitNew
    nameWithType: ThrowingExpressionVisitor.BaseVisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
    name: BaseVisitNew
    nameWithType: ThrowingExpressionVisitor.BaseVisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitNewArray(NewArrayExpression)
  nameWithType: ThrowingExpressionVisitor.VisitNewArray(NewArrayExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    nameWithType: ThrowingExpressionVisitor.VisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    nameWithType: ThrowingExpressionVisitor.VisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitNewArray(NewArrayExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitNewArray(NewArrayExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: BaseVisitNewArray
    nameWithType: ThrowingExpressionVisitor.BaseVisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: BaseVisitNewArray
    nameWithType: ThrowingExpressionVisitor.BaseVisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberInit(MemberInitExpression)
  nameWithType: ThrowingExpressionVisitor.VisitMemberInit(MemberInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    nameWithType: ThrowingExpressionVisitor.VisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    nameWithType: ThrowingExpressionVisitor.VisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberInit(MemberInitExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberInit(MemberInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: BaseVisitMemberInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: BaseVisitMemberInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitListInit(ListInitExpression)
  nameWithType: ThrowingExpressionVisitor.VisitListInit(ListInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    nameWithType: ThrowingExpressionVisitor.VisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    nameWithType: ThrowingExpressionVisitor.VisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitListInit(ListInitExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitListInit(ListInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
    name: BaseVisitListInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
    name: BaseVisitListInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitBlock(BlockExpression)
  nameWithType: ThrowingExpressionVisitor.VisitBlock(BlockExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    nameWithType: ThrowingExpressionVisitor.VisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    nameWithType: ThrowingExpressionVisitor.VisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitBlock(BlockExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitBlock(BlockExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
    name: BaseVisitBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
    name: BaseVisitBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitDebugInfo(DebugInfoExpression)
  nameWithType: ThrowingExpressionVisitor.VisitDebugInfo(DebugInfoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.VisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.VisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitDebugInfo(DebugInfoExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitDebugInfo(DebugInfoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: BaseVisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.BaseVisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: BaseVisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.BaseVisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitDefault(DefaultExpression)
  nameWithType: ThrowingExpressionVisitor.VisitDefault(DefaultExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    nameWithType: ThrowingExpressionVisitor.VisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    nameWithType: ThrowingExpressionVisitor.VisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitDefault(DefaultExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitDefault(DefaultExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
    name: BaseVisitDefault
    nameWithType: ThrowingExpressionVisitor.BaseVisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
    name: BaseVisitDefault
    nameWithType: ThrowingExpressionVisitor.BaseVisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitGoto(GotoExpression)
  nameWithType: ThrowingExpressionVisitor.VisitGoto(GotoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    nameWithType: ThrowingExpressionVisitor.VisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    nameWithType: ThrowingExpressionVisitor.VisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitGoto(GotoExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitGoto(GotoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
    name: BaseVisitGoto
    nameWithType: ThrowingExpressionVisitor.BaseVisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
    name: BaseVisitGoto
    nameWithType: ThrowingExpressionVisitor.BaseVisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitIndex(IndexExpression)
  nameWithType: ThrowingExpressionVisitor.VisitIndex(IndexExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    nameWithType: ThrowingExpressionVisitor.VisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    nameWithType: ThrowingExpressionVisitor.VisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitIndex(IndexExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitIndex(IndexExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
    name: BaseVisitIndex
    nameWithType: ThrowingExpressionVisitor.BaseVisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
    name: BaseVisitIndex
    nameWithType: ThrowingExpressionVisitor.BaseVisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitLabel(LabelExpression)
  nameWithType: ThrowingExpressionVisitor.VisitLabel(LabelExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    nameWithType: ThrowingExpressionVisitor.VisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    nameWithType: ThrowingExpressionVisitor.VisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitLabel(LabelExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLabel(LabelExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
    name: BaseVisitLabel
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
    name: BaseVisitLabel
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitLoop(LoopExpression)
  nameWithType: ThrowingExpressionVisitor.VisitLoop(LoopExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    nameWithType: ThrowingExpressionVisitor.VisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    nameWithType: ThrowingExpressionVisitor.VisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitLoop(LoopExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLoop(LoopExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
    name: BaseVisitLoop
    nameWithType: ThrowingExpressionVisitor.BaseVisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
    name: BaseVisitLoop
    nameWithType: ThrowingExpressionVisitor.BaseVisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitRuntimeVariables(RuntimeVariablesExpression)
  nameWithType: ThrowingExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.VisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.VisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitRuntimeVariables(RuntimeVariablesExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitRuntimeVariables(RuntimeVariablesExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: BaseVisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: BaseVisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitSwitch(SwitchExpression)
  nameWithType: ThrowingExpressionVisitor.VisitSwitch(SwitchExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    nameWithType: ThrowingExpressionVisitor.VisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    nameWithType: ThrowingExpressionVisitor.VisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitSwitch(SwitchExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitSwitch(SwitchExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: BaseVisitSwitch
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: BaseVisitSwitch
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitTry(TryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitTry(TryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    nameWithType: ThrowingExpressionVisitor.VisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    nameWithType: ThrowingExpressionVisitor.VisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitTry(TryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitTry(TryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
    name: BaseVisitTry
    nameWithType: ThrowingExpressionVisitor.BaseVisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
    name: BaseVisitTry
    nameWithType: ThrowingExpressionVisitor.BaseVisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberBinding(MemberBinding)
  nameWithType: ThrowingExpressionVisitor.VisitMemberBinding(MemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberBinding(MemberBinding)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberBinding(MemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: BaseVisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: BaseVisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitElementInit(ElementInit)
  nameWithType: ThrowingExpressionVisitor.VisitElementInit(ElementInit)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    nameWithType: ThrowingExpressionVisitor.VisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    nameWithType: ThrowingExpressionVisitor.VisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitElementInit(ElementInit)
  nameWithType: ThrowingExpressionVisitor.BaseVisitElementInit(ElementInit)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
    name: BaseVisitElementInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
    name: BaseVisitElementInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberAssignment(MemberAssignment)
  nameWithType: ThrowingExpressionVisitor.VisitMemberAssignment(MemberAssignment)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.VisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.VisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberAssignment(MemberAssignment)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberAssignment(MemberAssignment)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: BaseVisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: BaseVisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: ThrowingExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(MemberMemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: BaseVisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: BaseVisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberListBinding(MemberListBinding)
  nameWithType: ThrowingExpressionVisitor.VisitMemberListBinding(MemberListBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberListBinding(MemberListBinding)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberListBinding(MemberListBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: BaseVisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: BaseVisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitCatchBlock(CatchBlock)
  nameWithType: ThrowingExpressionVisitor.VisitCatchBlock(CatchBlock)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.VisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.VisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitCatchBlock(CatchBlock)
  nameWithType: ThrowingExpressionVisitor.BaseVisitCatchBlock(CatchBlock)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: BaseVisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: BaseVisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitLabelTarget(LabelTarget)
  nameWithType: ThrowingExpressionVisitor.VisitLabelTarget(LabelTarget)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.VisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.VisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitLabelTarget(LabelTarget)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLabelTarget(LabelTarget)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: BaseVisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: BaseVisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitSwitchCase(SwitchCase)
  nameWithType: ThrowingExpressionVisitor.VisitSwitchCase(SwitchCase)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.VisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.VisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitSwitchCase(SwitchCase)
  nameWithType: ThrowingExpressionVisitor.BaseVisitSwitchCase(SwitchCase)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: BaseVisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: BaseVisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitSubQuery(SubQueryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitSubQuery(SubQueryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: BaseVisitSubQuery
    nameWithType: ThrowingExpressionVisitor.BaseVisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: BaseVisitSubQuery
    nameWithType: ThrowingExpressionVisitor.BaseVisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitQuerySourceReference(QuerySourceReferenceExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitQuerySourceReference(QuerySourceReferenceExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: BaseVisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: BaseVisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
  commentId: M:Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
  parent: Remotion.Linq.Parsing.RelinqExpressionVisitor
  isExternal: true
  name: AdjustArgumentsForNewExpression(IList<Expression>, IList<MemberInfo>)
  nameWithType: RelinqExpressionVisitor.AdjustArgumentsForNewExpression(IList<Expression>, IList<MemberInfo>)
  fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList<System.Linq.Expressions.Expression>, System.Collections.Generic.IList<System.Reflection.MemberInfo>)
  nameWithType.vb: RelinqExpressionVisitor.AdjustArgumentsForNewExpression(IList(Of Expression), IList(Of MemberInfo))
  fullname.vb: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList(Of System.Linq.Expressions.Expression), System.Collections.Generic.IList(Of System.Reflection.MemberInfo))
  name.vb: AdjustArgumentsForNewExpression(IList(Of Expression), IList(Of MemberInfo))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
    name: AdjustArgumentsForNewExpression
    nameWithType: RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
    name: AdjustArgumentsForNewExpression
    nameWithType: RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: Visit(ReadOnlyCollection<Expression>)
  nameWithType: ExpressionVisitor.Visit(ReadOnlyCollection<Expression>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>)
  nameWithType.vb: ExpressionVisitor.Visit(ReadOnlyCollection(Of Expression))
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression))
  name.vb: Visit(ReadOnlyCollection(Of Expression))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    nameWithType: ExpressionVisitor.Visit
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    nameWithType: ExpressionVisitor.Visit
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit<T>
    nameWithType: ExpressionVisitor.Visit<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit(Of T)
    nameWithType: ExpressionVisitor.Visit(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  name: VisitAndConvert<T>(T, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, System.String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDynamic(DynamicExpression)
  nameWithType: ExpressionVisitor.VisitDynamic(DynamicExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    nameWithType: ExpressionVisitor.VisitDynamic
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    nameWithType: DynamicExpression
    fullName: System.Linq.Expressions.DynamicExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    nameWithType: ExpressionVisitor.VisitDynamic
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    nameWithType: DynamicExpression
    fullName: System.Linq.Expressions.DynamicExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Remotion.Linq.Parsing
  commentId: N:Remotion.Linq.Parsing
  isExternal: false
  name: Remotion.Linq.Parsing
  nameWithType: Remotion.Linq.Parsing
  fullName: Remotion.Linq.Parsing
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  isExternal: true
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.VisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.VisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  isExternal: true
  name: BaseVisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.BaseVisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: BaseVisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  isExternal: true
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit<T>
    nameWithType: ExpressionVisitor.Visit<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit(Of T)
    nameWithType: ExpressionVisitor.Visit(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  isExternal: true
  name: VisitAndConvert<T>(T, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, System.String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  isExternal: true
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors
  isExternal: false
  name: SqlTranslatingExpressionVisitor
  nameWithType: SqlTranslatingExpressionVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor
- uid: Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IRelationalAnnotationProvider
  nameWithType: IRelationalAnnotationProvider
  fullName: Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
  isExternal: false
  name: IExpressionFragmentTranslator
  nameWithType: IExpressionFragmentTranslator
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IExpressionFragmentTranslator
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
  isExternal: false
  name: IMethodCallTranslator
  nameWithType: IMethodCallTranslator
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
  isExternal: false
  name: IMemberTranslator
  nameWithType: IMemberTranslator
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMemberTranslator
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalTypeMapper
  nameWithType: IRelationalTypeMapper
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
- uid: Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: RelationalQueryModelVisitor
  nameWithType: RelationalQueryModelVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: SelectExpression
  nameWithType: SelectExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
  commentId: N:Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
  nameWithType: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionTranslators
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: Microsoft.EntityFrameworkCore.Query.Expressions
  commentId: N:Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Expressions
  nameWithType: Microsoft.EntityFrameworkCore.Query.Expressions
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: Visit(Expression)
  nameWithType: ThrowingExpressionVisitor.Visit(Expression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    nameWithType: ThrowingExpressionVisitor.Visit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    nameWithType: ThrowingExpressionVisitor.Visit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitBinary(BinaryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitBinary(BinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    nameWithType: ThrowingExpressionVisitor.VisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    nameWithType: ThrowingExpressionVisitor.VisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.BinaryExpression
  commentId: T:System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitConditional(ConditionalExpression)
  nameWithType: ThrowingExpressionVisitor.VisitConditional(ConditionalExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    nameWithType: ThrowingExpressionVisitor.VisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    nameWithType: ThrowingExpressionVisitor.VisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ConditionalExpression
  commentId: T:System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMethodCall(MethodCallExpression)
  nameWithType: ThrowingExpressionVisitor.VisitMethodCall(MethodCallExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    nameWithType: ThrowingExpressionVisitor.VisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    nameWithType: ThrowingExpressionVisitor.VisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.MethodCallExpression
  commentId: T:System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MethodCallExpression
  nameWithType: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMember(MemberExpression)
  nameWithType: ThrowingExpressionVisitor.VisitMember(MemberExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    nameWithType: ThrowingExpressionVisitor.VisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    nameWithType: ThrowingExpressionVisitor.VisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.MemberExpression
  commentId: T:System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: MemberExpression
  nameWithType: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitUnary(UnaryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitUnary(UnaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    nameWithType: ThrowingExpressionVisitor.VisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    nameWithType: ThrowingExpressionVisitor.VisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.UnaryExpression
  commentId: T:System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitNew(NewExpression)
  nameWithType: ThrowingExpressionVisitor.VisitNew(NewExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    nameWithType: ThrowingExpressionVisitor.VisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    nameWithType: ThrowingExpressionVisitor.VisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.NewExpression
  commentId: T:System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: NewExpression
  nameWithType: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitSubQuery(SubQueryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitSubQuery(SubQueryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: VisitSubQuery
    nameWithType: ThrowingExpressionVisitor.VisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: VisitSubQuery
    nameWithType: ThrowingExpressionVisitor.VisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
  commentId: T:Remotion.Linq.Clauses.Expressions.SubQueryExpression
  parent: Remotion.Linq.Clauses.Expressions
  isExternal: true
  name: SubQueryExpression
  nameWithType: SubQueryExpression
  fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
- uid: Remotion.Linq.Clauses.Expressions
  commentId: N:Remotion.Linq.Clauses.Expressions
  isExternal: false
  name: Remotion.Linq.Clauses.Expressions
  nameWithType: Remotion.Linq.Clauses.Expressions
  fullName: Remotion.Linq.Clauses.Expressions
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitConstant(ConstantExpression)
  nameWithType: ThrowingExpressionVisitor.VisitConstant(ConstantExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    nameWithType: ThrowingExpressionVisitor.VisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    nameWithType: ThrowingExpressionVisitor.VisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ConstantExpression
  commentId: T:System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitParameter(ParameterExpression)
  nameWithType: ThrowingExpressionVisitor.VisitParameter(ParameterExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    nameWithType: ThrowingExpressionVisitor.VisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    nameWithType: ThrowingExpressionVisitor.VisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitExtension(Expression)
  nameWithType: ThrowingExpressionVisitor.VisitExtension(Expression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    nameWithType: ThrowingExpressionVisitor.VisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    nameWithType: ThrowingExpressionVisitor.VisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitQuerySourceReference(QuerySourceReferenceExpression)
  nameWithType: ThrowingExpressionVisitor.VisitQuerySourceReference(QuerySourceReferenceExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: VisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.VisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: VisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.VisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
  commentId: T:Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
  parent: Remotion.Linq.Clauses.Expressions
  isExternal: true
  name: QuerySourceReferenceExpression
  nameWithType: QuerySourceReferenceExpression
  fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  isExternal: true
  name: CreateUnhandledItemException<T>(T, String)
  nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, String)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, System.String)
  nameWithType.vb: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, String)
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, System.String)
  name.vb: CreateUnhandledItemException(Of T)(T, String)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException<T>
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException(Of T)
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.MemberBinding
  commentId: T:System.Linq.Expressions.MemberBinding
- uid: System.Linq.Expressions.ElementInit
  commentId: T:System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: true
  name: ElementInit
  nameWithType: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2({TItem},System.String,System.Func{{TItem},{TResult}})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  name: VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, System.String, System.Func<TItem, TResult>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, System.String, System.Func(Of TItem, TResult))
  name.vb: VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem<TItem, TResult>
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem(Of TItem, TResult)
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TItem}'
  commentId: '!:TItem'
  definition: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{{TItem},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TItem, TResult>
  nameWithType: Func<TItem, TResult>
  fullName: System.Func<TItem, TResult>
  nameWithType.vb: Func(Of TItem, TResult)
  fullname.vb: System.Func(Of TItem, TResult)
  name.vb: Func(Of TItem, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  isExternal: true
  name: VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, System.String, System.Func<TItem, TResult>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, System.String, System.Func(Of TItem, TResult))
  name.vb: VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem<TItem, TResult>
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem(Of TItem, TResult)
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TItem
  commentId: '!:TItem'
  isExternal: false
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1({T},System.String)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  name: CreateUnhandledItemException<T>(T, String)
  nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, String)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, System.String)
  nameWithType.vb: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, String)
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, System.String)
  name.vb: CreateUnhandledItemException(Of T)(T, String)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException<T>
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException(Of T)
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
