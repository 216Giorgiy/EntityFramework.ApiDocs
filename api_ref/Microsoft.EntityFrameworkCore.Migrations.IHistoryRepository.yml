### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  id: IHistoryRepository
  parent: Microsoft.EntityFrameworkCore.Migrations
  children:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  langs:
  - csharp
  - vb
  name: IHistoryRepository
  nameWithType: IHistoryRepository
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IHistoryRepository
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 10
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public interface IHistoryRepository
    content.vb: Public Interface IHistoryRepository
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  id: Exists
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: Exists()
  nameWithType: IHistoryRepository.Exists()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Exists
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: bool Exists()
    content.vb: Function Exists As Boolean
    return:
      type: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  id: ExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: ExistsAsync(CancellationToken)
  nameWithType: IHistoryRepository.ExistsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExistsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: Task<bool> ExistsAsync(CancellationToken cancellationToken = null)
    content.vb: Function ExistsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  id: GetAppliedMigrations
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetAppliedMigrations()
  nameWithType: IHistoryRepository.GetAppliedMigrations()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAppliedMigrations
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: IReadOnlyList<HistoryRow> GetAppliedMigrations()
    content.vb: Function GetAppliedMigrations As IReadOnlyList(Of HistoryRow)
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  id: GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetAppliedMigrationsAsync(CancellationToken)
  nameWithType: IHistoryRepository.GetAppliedMigrationsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAppliedMigrationsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: Task<IReadOnlyList<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken = null)
    content.vb: Function GetAppliedMigrationsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of HistoryRow))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}}
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  id: GetCreateScript
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetCreateScript()
  nameWithType: IHistoryRepository.GetCreateScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCreateScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: string GetCreateScript()
    content.vb: Function GetCreateScript As String
    return:
      type: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  id: GetCreateIfNotExistsScript
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetCreateIfNotExistsScript()
  nameWithType: IHistoryRepository.GetCreateIfNotExistsScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCreateIfNotExistsScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: string GetCreateIfNotExistsScript()
    content.vb: Function GetCreateIfNotExistsScript As String
    return:
      type: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  id: GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetInsertScript(HistoryRow)
  nameWithType: IHistoryRepository.GetInsertScript(HistoryRow)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetInsertScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: string GetInsertScript(HistoryRow row)
    content.vb: Function GetInsertScript(row As HistoryRow) As String
    parameters:
    - id: row
      type: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    return:
      type: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  id: GetDeleteScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetDeleteScript(String)
  nameWithType: IHistoryRepository.GetDeleteScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeleteScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: string GetDeleteScript(string migrationId)
    content.vb: Function GetDeleteScript(migrationId As String) As String
    parameters:
    - id: migrationId
      type: System.String
    return:
      type: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  id: GetBeginIfNotExistsScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetBeginIfNotExistsScript(String)
  nameWithType: IHistoryRepository.GetBeginIfNotExistsScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetBeginIfNotExistsScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: string GetBeginIfNotExistsScript(string migrationId)
    content.vb: Function GetBeginIfNotExistsScript(migrationId As String) As String
    parameters:
    - id: migrationId
      type: System.String
    return:
      type: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  id: GetBeginIfExistsScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetBeginIfExistsScript(String)
  nameWithType: IHistoryRepository.GetBeginIfExistsScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetBeginIfExistsScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: string GetBeginIfExistsScript(string migrationId)
    content.vb: Function GetBeginIfExistsScript(migrationId As String) As String
    parameters:
    - id: migrationId
      type: System.String
    return:
      type: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  id: GetEndIfScript
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  langs:
  - csharp
  - vb
  name: GetEndIfScript()
  nameWithType: IHistoryRepository.GetEndIfScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetEndIfScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/IHistoryRepository.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: string GetEndIfScript()
    content.vb: Function GetEndIfScript As String
    return:
      type: System.String
references:
- uid: Microsoft.EntityFrameworkCore.Migrations
  commentId: N:Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Migrations
  nameWithType: Microsoft.EntityFrameworkCore.Migrations
  fullName: Microsoft.EntityFrameworkCore.Migrations
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<HistoryRow>
  nameWithType: IReadOnlyList<HistoryRow>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Migrations.HistoryRow>
  nameWithType.vb: IReadOnlyList(Of HistoryRow)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  name.vb: IReadOnlyList(Of HistoryRow)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<HistoryRow>>
  nameWithType: Task<IReadOnlyList<HistoryRow>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Migrations.HistoryRow>>
  nameWithType.vb: Task(Of IReadOnlyList(Of HistoryRow))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Migrations.HistoryRow))
  name.vb: Task(Of IReadOnlyList(Of HistoryRow))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: HistoryRow
  nameWithType: HistoryRow
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
