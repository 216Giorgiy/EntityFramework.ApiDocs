### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  id: ExecutionStrategyTests
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.CreateContext
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_does_not_throw_when_invoked_twice
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_suspended
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_limit_is_reached
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_not_retrieable_exception_is_thrown
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_throws_for_an_existing_transaction
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_does_not_throw_when_invoked_twice
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_suspended
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_limit_is_reached
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_not_retrieable_exception_is_thrown
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_throws_for_an_existing_transaction
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_does_not_throw_when_invoked_twice
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_suspended
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_limit_is_reached
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_throws_for_an_existing_transaction
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_does_not_throw_when_invoked_twice
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_suspended
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_limit_is_reached
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_succesful
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_throws_for_an_existing_transaction
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.GetNextDelay_returns_the_expected_default_sequence
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.RetriesOnFailure_returns_true
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_DbUpdateException
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_wrapped_null_exception
  langs:
  - csharp
  - vb
  name: ExecutionStrategyTests
  nameWithType: ExecutionStrategyTests
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecutionStrategyTests
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: public class ExecutionStrategyTests
    content.vb: Public Class ExecutionStrategyTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.GetNextDelay_returns_the_expected_default_sequence
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.GetNextDelay_returns_the_expected_default_sequence
  id: GetNextDelay_returns_the_expected_default_sequence
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: GetNextDelay_returns_the_expected_default_sequence()
  nameWithType: ExecutionStrategyTests.GetNextDelay_returns_the_expected_default_sequence()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.GetNextDelay_returns_the_expected_default_sequence()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetNextDelay_returns_the_expected_default_sequence
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void GetNextDelay_returns_the_expected_default_sequence()
    content.vb: >-
      <Fact>

      Public Sub GetNextDelay_returns_the_expected_default_sequence
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.RetriesOnFailure_returns_true
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.RetriesOnFailure_returns_true
  id: RetriesOnFailure_returns_true
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: RetriesOnFailure_returns_true()
  nameWithType: ExecutionStrategyTests.RetriesOnFailure_returns_true()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.RetriesOnFailure_returns_true()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RetriesOnFailure_returns_true
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 70
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void RetriesOnFailure_returns_true()
    content.vb: >-
      <Fact>

      Public Sub RetriesOnFailure_returns_true
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_throws_for_an_existing_transaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_throws_for_an_existing_transaction
  id: Execute_Action_throws_for_an_existing_transaction
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Action_throws_for_an_existing_transaction()
  nameWithType: ExecutionStrategyTests.Execute_Action_throws_for_an_existing_transaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_throws_for_an_existing_transaction()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Action_throws_for_an_existing_transaction
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 78
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Action_throws_for_an_existing_transaction()
    content.vb: >-
      <Fact>

      Public Sub Execute_Action_throws_for_an_existing_transaction
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_throws_for_an_existing_transaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_throws_for_an_existing_transaction
  id: Execute_Func_throws_for_an_existing_transaction
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Func_throws_for_an_existing_transaction()
  nameWithType: ExecutionStrategyTests.Execute_Func_throws_for_an_existing_transaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_throws_for_an_existing_transaction()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Func_throws_for_an_existing_transaction
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 84
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Func_throws_for_an_existing_transaction()
    content.vb: >-
      <Fact>

      Public Sub Execute_Func_throws_for_an_existing_transaction
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_does_not_throw_when_invoked_twice
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_does_not_throw_when_invoked_twice
  id: Execute_Action_does_not_throw_when_invoked_twice
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Action_does_not_throw_when_invoked_twice()
  nameWithType: ExecutionStrategyTests.Execute_Action_does_not_throw_when_invoked_twice()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_does_not_throw_when_invoked_twice()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Action_does_not_throw_when_invoked_twice
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 104
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Action_does_not_throw_when_invoked_twice()
    content.vb: >-
      <Fact>

      Public Sub Execute_Action_does_not_throw_when_invoked_twice
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_does_not_throw_when_invoked_twice
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_does_not_throw_when_invoked_twice
  id: Execute_Func_does_not_throw_when_invoked_twice
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Func_does_not_throw_when_invoked_twice()
  nameWithType: ExecutionStrategyTests.Execute_Func_does_not_throw_when_invoked_twice()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_does_not_throw_when_invoked_twice()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Func_does_not_throw_when_invoked_twice
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 110
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Func_does_not_throw_when_invoked_twice()
    content.vb: >-
      <Fact>

      Public Sub Execute_Func_does_not_throw_when_invoked_twice
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_succesful
  id: Execute_Action_doesnt_retry_if_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Action_doesnt_retry_if_succesful()
  nameWithType: ExecutionStrategyTests.Execute_Action_doesnt_retry_if_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Action_doesnt_retry_if_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 147
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Action_doesnt_retry_if_succesful()
    content.vb: >-
      <Fact>

      Public Sub Execute_Action_doesnt_retry_if_succesful
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_succesful
  id: Execute_Func_doesnt_retry_if_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Func_doesnt_retry_if_succesful()
  nameWithType: ExecutionStrategyTests.Execute_Func_doesnt_retry_if_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Func_doesnt_retry_if_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 153
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Func_doesnt_retry_if_succesful()
    content.vb: >-
      <Fact>

      Public Sub Execute_Func_doesnt_retry_if_succesful
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_suspended
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_suspended
  id: Execute_Action_doesnt_retry_if_suspended
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Action_doesnt_retry_if_suspended()
  nameWithType: ExecutionStrategyTests.Execute_Action_doesnt_retry_if_suspended()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_doesnt_retry_if_suspended()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Action_doesnt_retry_if_suspended
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 186
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Action_doesnt_retry_if_suspended()
    content.vb: >-
      <Fact>

      Public Sub Execute_Action_doesnt_retry_if_suspended
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_suspended
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_suspended
  id: Execute_Func_doesnt_retry_if_suspended
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Func_doesnt_retry_if_suspended()
  nameWithType: ExecutionStrategyTests.Execute_Func_doesnt_retry_if_suspended()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_doesnt_retry_if_suspended()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Func_doesnt_retry_if_suspended
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 192
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Func_doesnt_retry_if_suspended()
    content.vb: >-
      <Fact>

      Public Sub Execute_Func_doesnt_retry_if_suspended
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_succesful
  id: Execute_Action_retries_until_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Action_retries_until_succesful()
  nameWithType: ExecutionStrategyTests.Execute_Action_retries_until_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Action_retries_until_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 232
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Action_retries_until_succesful()
    content.vb: >-
      <Fact>

      Public Sub Execute_Action_retries_until_succesful
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_succesful
  id: Execute_Func_retries_until_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Func_retries_until_succesful()
  nameWithType: ExecutionStrategyTests.Execute_Func_retries_until_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Func_retries_until_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 238
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Func_retries_until_succesful()
    content.vb: >-
      <Fact>

      Public Sub Execute_Func_retries_until_succesful
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_not_retrieable_exception_is_thrown
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_not_retrieable_exception_is_thrown
  id: Execute_Action_retries_until_not_retrieable_exception_is_thrown
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Action_retries_until_not_retrieable_exception_is_thrown()
  nameWithType: ExecutionStrategyTests.Execute_Action_retries_until_not_retrieable_exception_is_thrown()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_not_retrieable_exception_is_thrown()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Action_retries_until_not_retrieable_exception_is_thrown
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 273
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Action_retries_until_not_retrieable_exception_is_thrown()
    content.vb: >-
      <Fact>

      Public Sub Execute_Action_retries_until_not_retrieable_exception_is_thrown
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_not_retrieable_exception_is_thrown
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_not_retrieable_exception_is_thrown
  id: Execute_Func_retries_until_not_retrieable_exception_is_thrown
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Func_retries_until_not_retrieable_exception_is_thrown()
  nameWithType: ExecutionStrategyTests.Execute_Func_retries_until_not_retrieable_exception_is_thrown()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_not_retrieable_exception_is_thrown()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Func_retries_until_not_retrieable_exception_is_thrown
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 279
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Func_retries_until_not_retrieable_exception_is_thrown()
    content.vb: >-
      <Fact>

      Public Sub Execute_Func_retries_until_not_retrieable_exception_is_thrown
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_limit_is_reached
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_limit_is_reached
  id: Execute_Action_retries_until_limit_is_reached
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Action_retries_until_limit_is_reached()
  nameWithType: ExecutionStrategyTests.Execute_Action_retries_until_limit_is_reached()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Action_retries_until_limit_is_reached()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Action_retries_until_limit_is_reached
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 315
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Action_retries_until_limit_is_reached()
    content.vb: >-
      <Fact>

      Public Sub Execute_Action_retries_until_limit_is_reached
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_limit_is_reached
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_limit_is_reached
  id: Execute_Func_retries_until_limit_is_reached
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Execute_Func_retries_until_limit_is_reached()
  nameWithType: ExecutionStrategyTests.Execute_Func_retries_until_limit_is_reached()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Execute_Func_retries_until_limit_is_reached()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute_Func_retries_until_limit_is_reached
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 321
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Execute_Func_retries_until_limit_is_reached()
    content.vb: >-
      <Fact>

      Public Sub Execute_Func_retries_until_limit_is_reached
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_throws_for_an_existing_transaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_throws_for_an_existing_transaction
  id: ExecuteAsync_Action_throws_for_an_existing_transaction
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Action_throws_for_an_existing_transaction()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Action_throws_for_an_existing_transaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_throws_for_an_existing_transaction()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Action_throws_for_an_existing_transaction
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 359
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Action_throws_for_an_existing_transaction()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Action_throws_for_an_existing_transaction As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_throws_for_an_existing_transaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_throws_for_an_existing_transaction
  id: ExecuteAsync_Func_throws_for_an_existing_transaction
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Func_throws_for_an_existing_transaction()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Func_throws_for_an_existing_transaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_throws_for_an_existing_transaction()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Func_throws_for_an_existing_transaction
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 365
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Func_throws_for_an_existing_transaction()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Func_throws_for_an_existing_transaction As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_does_not_throw_when_invoked_twice
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_does_not_throw_when_invoked_twice
  id: ExecuteAsync_Action_does_not_throw_when_invoked_twice
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Action_does_not_throw_when_invoked_twice()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Action_does_not_throw_when_invoked_twice()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_does_not_throw_when_invoked_twice()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Action_does_not_throw_when_invoked_twice
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 385
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Action_does_not_throw_when_invoked_twice()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Action_does_not_throw_when_invoked_twice As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_does_not_throw_when_invoked_twice
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_does_not_throw_when_invoked_twice
  id: ExecuteAsync_Func_does_not_throw_when_invoked_twice
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Func_does_not_throw_when_invoked_twice()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Func_does_not_throw_when_invoked_twice()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_does_not_throw_when_invoked_twice()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Func_does_not_throw_when_invoked_twice
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 391
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Func_does_not_throw_when_invoked_twice()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Func_does_not_throw_when_invoked_twice As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_succesful
  id: ExecuteAsync_Action_doesnt_retry_if_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Action_doesnt_retry_if_succesful()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Action_doesnt_retry_if_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 428
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Action_doesnt_retry_if_succesful()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Action_doesnt_retry_if_succesful As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_succesful
  id: ExecuteAsync_Func_doesnt_retry_if_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Func_doesnt_retry_if_succesful()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Func_doesnt_retry_if_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 434
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Func_doesnt_retry_if_succesful()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Func_doesnt_retry_if_succesful As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_suspended
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_suspended
  id: ExecuteAsync_Action_doesnt_retry_if_suspended
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Action_doesnt_retry_if_suspended()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_suspended()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_doesnt_retry_if_suspended()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Action_doesnt_retry_if_suspended
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 466
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Action_doesnt_retry_if_suspended()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Action_doesnt_retry_if_suspended As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_suspended
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_suspended
  id: ExecuteAsync_Func_doesnt_retry_if_suspended
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Func_doesnt_retry_if_suspended()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_suspended()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_doesnt_retry_if_suspended()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Func_doesnt_retry_if_suspended
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 472
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Func_doesnt_retry_if_suspended()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Func_doesnt_retry_if_suspended As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_succesful
  id: ExecuteAsync_Action_retries_until_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Action_retries_until_succesful()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Action_retries_until_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Action_retries_until_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 514
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Action_retries_until_succesful()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Action_retries_until_succesful As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_succesful
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_succesful
  id: ExecuteAsync_Func_retries_until_succesful
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Func_retries_until_succesful()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Func_retries_until_succesful()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_succesful()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Func_retries_until_succesful
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 520
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Func_retries_until_succesful()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Func_retries_until_succesful As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown
  id: ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 555
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Action_retries_until_not_retrieable_exception_is_thrown As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown
  id: ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 562
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Func_retries_until_not_retrieable_exception_is_thrown As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_limit_is_reached
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_limit_is_reached
  id: ExecuteAsync_Action_retries_until_limit_is_reached
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Action_retries_until_limit_is_reached()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Action_retries_until_limit_is_reached()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Action_retries_until_limit_is_reached()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Action_retries_until_limit_is_reached
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 598
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Action_retries_until_limit_is_reached()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Action_retries_until_limit_is_reached As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_limit_is_reached
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_limit_is_reached
  id: ExecuteAsync_Func_retries_until_limit_is_reached
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: ExecuteAsync_Func_retries_until_limit_is_reached()
  nameWithType: ExecutionStrategyTests.ExecuteAsync_Func_retries_until_limit_is_reached()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.ExecuteAsync_Func_retries_until_limit_is_reached()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync_Func_retries_until_limit_is_reached
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 604
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public Task ExecuteAsync_Func_retries_until_limit_is_reached()
    content.vb: >-
      <Fact>

      Public Function ExecuteAsync_Func_retries_until_limit_is_reached As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_DbUpdateException
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_DbUpdateException
  id: Unwraps_DbUpdateException
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Unwraps_DbUpdateException()
  nameWithType: ExecutionStrategyTests.Unwraps_DbUpdateException()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_DbUpdateException()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Unwraps_DbUpdateException
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 642
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Unwraps_DbUpdateException()
    content.vb: >-
      <Fact>

      Public Sub Unwraps_DbUpdateException
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_wrapped_null_exception
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_wrapped_null_exception
  id: Unwraps_wrapped_null_exception
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: Unwraps_wrapped_null_exception()
  nameWithType: ExecutionStrategyTests.Unwraps_wrapped_null_exception()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.Unwraps_wrapped_null_exception()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Unwraps_wrapped_null_exception
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 656
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: >-
      [Fact]

      public void Unwraps_wrapped_null_exception()
    content.vb: >-
      <Fact>

      Public Sub Unwraps_wrapped_null_exception
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.CreateContext
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.CreateContext
  id: CreateContext
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests
  langs:
  - csharp
  - vb
  name: CreateContext()
  nameWithType: ExecutionStrategyTests.CreateContext()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyTests.CreateContext()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateContext
    path: test/Microsoft.EntityFrameworkCore.Tests/Storage/ExecutionStrategyTests.cs
    startLine: 670
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Storage
  syntax:
    content: protected DbContext CreateContext()
    content.vb: Protected Function CreateContext As DbContext
    return:
      type: Microsoft.EntityFrameworkCore.DbContext
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
