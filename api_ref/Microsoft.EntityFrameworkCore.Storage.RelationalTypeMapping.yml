### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  id: RelationalTypeMapping
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type)
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Data.DbType})
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean)
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ClrType
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateCopy(System.String,System.Nullable{System.Int32})
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.DbType
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultSize
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultUnicode
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.IsUnicode
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.NullMapping
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Size
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.StoreType
  langs:
  - csharp
  - vb
  name: RelationalTypeMapping
  nameWithType: RelationalTypeMapping
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: RelationalTypeMapping
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Represents the mapping between a .NET type and a database type.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: public class RelationalTypeMapping
    content.vb: Public Class RelationalTypeMapping
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.NullMapping
  commentId: F:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.NullMapping
  id: NullMapping
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: NullMapping
  nameWithType: RelationalTypeMapping.NullMapping
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.NullMapping
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: NullMapping
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the mapping to be used when the only piece of information is that there is a null value.\n"
  example: []
  syntax:
    content: public static readonly RelationalTypeMapping NullMapping
    content.vb: Public Shared ReadOnly NullMapping As RelationalTypeMapping
    return:
      type: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: RelationalTypeMapping(String, Type)
  nameWithType: RelationalTypeMapping.RelationalTypeMapping(String, Type)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMapping(System.String, System.Type)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 32
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RelationalTypeMapping(string storeType, Type clrType)
    content.vb: Public Sub New(storeType As String, clrType As Type)
    parameters:
    - id: storeType
      type: System.String
      description: 'The name of the database type. '
    - id: clrType
      type: System.Type
      description: 'The .NET type. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Data.DbType})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Data.DbType})
  id: '#ctor(System.String,System.Type,System.Nullable{System.Data.DbType})'
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: RelationalTypeMapping(String, Type, Nullable<DbType>)
  nameWithType: RelationalTypeMapping.RelationalTypeMapping(String, Type, Nullable<DbType>)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMapping(System.String, System.Type, System.Nullable<System.Data.DbType>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 45
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RelationalTypeMapping(string storeType, Type clrType, DbType? dbType)
    content.vb: Public Sub New(storeType As String, clrType As Type, dbType As DbType?)
    parameters:
    - id: storeType
      type: System.String
      description: 'The name of the database type. '
    - id: clrType
      type: System.Type
      description: 'The .NET type. '
    - id: dbType
      type: System.Nullable{System.Data.DbType}
      description: 'The <xref href="System.Data.DbType" data-throw-if-not-resolved="false"></xref> to be used. '
  nameWithType.vb: RelationalTypeMapping.RelationalTypeMapping(String, Type, Nullable(Of DbType))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMapping(System.String, System.Type, System.Nullable(Of System.Data.DbType))
  name.vb: RelationalTypeMapping(String, Type, Nullable(Of DbType))
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean)
  id: '#ctor(System.String,System.Type,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Boolean)'
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: RelationalTypeMapping(String, Type, Nullable<DbType>, Boolean, Nullable<Int32>, Boolean, Boolean)
  nameWithType: RelationalTypeMapping.RelationalTypeMapping(String, Type, Nullable<DbType>, Boolean, Nullable<Int32>, Boolean, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMapping(System.String, System.Type, System.Nullable<System.Data.DbType>, System.Boolean, System.Nullable<System.Int32>, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 63
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public RelationalTypeMapping(string storeType, Type clrType, DbType? dbType, bool unicode, int ? size, bool hasNonDefaultUnicode = false, bool hasNonDefaultSize = false)
    content.vb: Public Sub New(storeType As String, clrType As Type, dbType As DbType?, unicode As Boolean, size As Integer?, hasNonDefaultUnicode As Boolean = False, hasNonDefaultSize As Boolean = False)
    parameters:
    - id: storeType
      type: System.String
      description: 'The name of the database type. '
    - id: clrType
      type: System.Type
      description: 'The .NET type. '
    - id: dbType
      type: System.Nullable{System.Data.DbType}
      description: 'The <xref href="System.Data.DbType" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: unicode
      type: System.Boolean
      description: 'A value indicating whether the type should handle Unicode data or not. '
    - id: size
      type: System.Nullable{System.Int32}
      description: 'The size of data the property is configured to store, or null if no size is configured. '
    - id: hasNonDefaultUnicode
      type: System.Boolean
      description: 'A value indicating whether the Unicode setting has been manually configured to a non-default value. '
    - id: hasNonDefaultSize
      type: System.Boolean
      description: 'A value indicating whether the size setting has been manually configured to a non-default value. '
  nameWithType.vb: RelationalTypeMapping.RelationalTypeMapping(String, Type, Nullable(Of DbType), Boolean, Nullable(Of Int32), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMapping(System.String, System.Type, System.Nullable(Of System.Data.DbType), System.Boolean, System.Nullable(Of System.Int32), System.Boolean, System.Boolean)
  name.vb: RelationalTypeMapping(String, Type, Nullable(Of DbType), Boolean, Nullable(Of Int32), Boolean, Boolean)
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateCopy(System.String,System.Nullable{System.Int32})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateCopy(System.String,System.Nullable{System.Int32})
  id: CreateCopy(System.String,System.Nullable{System.Int32})
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: CreateCopy(String, Nullable<Int32>)
  nameWithType: RelationalTypeMapping.CreateCopy(String, Nullable<Int32>)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateCopy(System.String, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CreateCopy
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 96
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Creates a copy of this mapping.\n"
  example: []
  syntax:
    content: public virtual RelationalTypeMapping CreateCopy(string storeType, int ? size)
    content.vb: Public Overridable Function CreateCopy(storeType As String, size As Integer?) As RelationalTypeMapping
    parameters:
    - id: storeType
      type: System.String
      description: 'The name of the database type. '
    - id: size
      type: System.Nullable{System.Int32}
      description: 'The size of data the property is configured to store, or null if no size is configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
      description: 'The newly created mapping. '
  nameWithType.vb: RelationalTypeMapping.CreateCopy(String, Nullable(Of Int32))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateCopy(System.String, System.Nullable(Of System.Int32))
  name.vb: CreateCopy(String, Nullable(Of Int32))
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.StoreType
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.StoreType
  id: StoreType
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: StoreType
  nameWithType: RelationalTypeMapping.StoreType
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.StoreType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: StoreType
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the name of the database type. \n"
  example: []
  syntax:
    content: public virtual string StoreType { get; }
    content.vb: Public Overridable ReadOnly Property StoreType As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ClrType
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ClrType
  id: ClrType
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: ClrType
  nameWithType: RelationalTypeMapping.ClrType
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ClrType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ClrType
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 114
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the .NET type.\n"
  example: []
  syntax:
    content: public virtual Type ClrType { get; }
    content.vb: Public Overridable ReadOnly Property ClrType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.DbType
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.DbType
  id: DbType
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: DbType
  nameWithType: RelationalTypeMapping.DbType
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.DbType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: DbType
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 119
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the <xref href=\"System.Data.DbType\" data-throw-if-not-resolved=\"false\"></xref> to be used.\n"
  example: []
  syntax:
    content: public virtual DbType? DbType { get; }
    content.vb: Public Overridable ReadOnly Property DbType As DbType?
    parameters: []
    return:
      type: System.Nullable{System.Data.DbType}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.IsUnicode
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.IsUnicode
  id: IsUnicode
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: IsUnicode
  nameWithType: RelationalTypeMapping.IsUnicode
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.IsUnicode
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IsUnicode
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 124
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets a value indicating whether the type should handle Unicode data or not.\n"
  example: []
  syntax:
    content: public virtual bool IsUnicode { get; }
    content.vb: Public Overridable ReadOnly Property IsUnicode As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Size
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Size
  id: Size
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: Size
  nameWithType: RelationalTypeMapping.Size
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Size
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Size
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 129
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the size of data the property is configured to store, or null if no size is configured.\n"
  example: []
  syntax:
    content: public virtual int ? Size { get; }
    content.vb: Public Overridable ReadOnly Property Size As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultUnicode
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultUnicode
  id: HasNonDefaultUnicode
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: HasNonDefaultUnicode
  nameWithType: RelationalTypeMapping.HasNonDefaultUnicode
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultUnicode
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasNonDefaultUnicode
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 134
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets a value indicating whether the Unicode setting has been manually configured to a non-default value.\n"
  example: []
  syntax:
    content: public virtual bool HasNonDefaultUnicode { get; }
    content.vb: Public Overridable ReadOnly Property HasNonDefaultUnicode As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultSize
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultSize
  id: HasNonDefaultSize
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: HasNonDefaultSize
  nameWithType: RelationalTypeMapping.HasNonDefaultSize
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.HasNonDefaultSize
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasNonDefaultSize
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 139
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets a value indicating whether the size setting has been manually configured to a non-default value.\n"
  example: []
  syntax:
    content: public virtual bool HasNonDefaultSize { get; }
    content.vb: Public Overridable ReadOnly Property HasNonDefaultSize As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Nullable{System.Boolean})
  id: CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Nullable{System.Boolean})
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: CreateParameter(DbCommand, String, Object, Nullable<Boolean>)
  nameWithType: RelationalTypeMapping.CreateParameter(DbCommand, String, Object, Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateParameter(System.Data.Common.DbCommand, System.String, System.Object, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CreateParameter
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 149
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nCreates a <xref href=\"System.Data.Common.DbParameter\" data-throw-if-not-resolved=\"false\"></xref> with the appropriate type information configured.\n"
  example: []
  syntax:
    content: public virtual DbParameter CreateParameter(DbCommand command, string name, object value, bool ? nullable = null)
    content.vb: Public Overridable Function CreateParameter(command As DbCommand, name As String, value As Object, nullable As Boolean? = Nothing) As DbParameter
    parameters:
    - id: command
      type: System.Data.Common.DbCommand
      description: 'The command the parameter should be created on. '
    - id: name
      type: System.String
      description: 'The name of the parameter. '
    - id: value
      type: System.Object
      description: 'The value to be assigned to the parameter. '
    - id: nullable
      type: System.Nullable{System.Boolean}
      description: 'A value indicating whether the parameter should be a nullable type. '
    return:
      type: System.Data.Common.DbParameter
      description: ''
  nameWithType.vb: RelationalTypeMapping.CreateParameter(DbCommand, String, Object, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateParameter(System.Data.Common.DbCommand, System.String, System.Object, System.Nullable(Of System.Boolean))
  name.vb: CreateParameter(DbCommand, String, Object, Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)
  id: ConfigureParameter(System.Data.Common.DbParameter)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  langs:
  - csharp
  - vb
  name: ConfigureParameter(DbParameter)
  nameWithType: RelationalTypeMapping.ConfigureParameter(DbParameter)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConfigureParameter
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalTypeMapping.cs
    startLine: 186
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Configures type information of a <xref href=\"System.Data.Common.DbParameter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual void ConfigureParameter(DbParameter parameter)
    content.vb: Protected Overridable Sub ConfigureParameter(parameter As DbParameter)
    parameters:
    - id: parameter
      type: System.Data.Common.DbParameter
      description: 'The parameter to be configured. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<RelationalTypeMapping, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<RelationalTypeMapping, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of RelationalTypeMapping, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of RelationalTypeMapping, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<RelationalTypeMapping, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<RelationalTypeMapping, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of RelationalTypeMapping, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of RelationalTypeMapping, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: RelationalTypeMapping
  nameWithType: RelationalTypeMapping
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.DbType
  commentId: T:System.Data.DbType
  parent: System.Data
  isExternal: true
  name: DbType
  nameWithType: DbType
  fullName: System.Data.DbType
- uid: System.Nullable{System.Data.DbType}
  commentId: T:System.Nullable{System.Data.DbType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DbType>
  nameWithType: Nullable<DbType>
  fullName: System.Nullable<System.Data.DbType>
  nameWithType.vb: Nullable(Of DbType)
  fullname.vb: System.Nullable(Of System.Data.DbType)
  name.vb: Nullable(Of DbType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.DbType
    name: DbType
    nameWithType: DbType
    fullName: System.Data.DbType
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Data.DbType
    name: DbType
    nameWithType: DbType
    fullName: System.Data.DbType
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data
  commentId: N:System.Data
  isExternal: false
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbParameter
  commentId: T:System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: true
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.Common.DbCommand
  commentId: T:System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: true
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: false
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
