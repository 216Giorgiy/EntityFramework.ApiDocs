### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1
  commentId: T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1
  id: CSharpNamer`1
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  children:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.#ctor(System.Func{`0,System.String})
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.GetName(`0)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.NameCache
  langs:
  - csharp
  - vb
  name: CSharpNamer<T>
  nameWithType: CSharpNamer<T>
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CSharpNamer
    path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public class CSharpNamer<T>
    content.vb: Public Class CSharpNamer(Of T)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: CSharpNamer(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer(Of T)
  name.vb: CSharpNamer(Of T)
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.NameCache
  commentId: F:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.NameCache
  id: NameCache
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1
  langs:
  - csharp
  - vb
  name: NameCache
  nameWithType: CSharpNamer<T>.NameCache
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer<T>.NameCache
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NameCache
    path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected readonly Dictionary<T, string> NameCache
    content.vb: Protected ReadOnly NameCache As Dictionary(Of T, String)
    return:
      type: System.Collections.Generic.Dictionary{{T},System.String}
  nameWithType.vb: CSharpNamer(Of T).NameCache
  modifiers.csharp:
  - protected
  - readonly
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer(Of T).NameCache
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.#ctor(System.Func{`0,System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.#ctor(System.Func{`0,System.String})
  id: '#ctor(System.Func{`0,System.String})'
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1
  langs:
  - csharp
  - vb
  name: CSharpNamer(Func<T, String>)
  nameWithType: CSharpNamer<T>.CSharpNamer(Func<T, String>)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer<T>.CSharpNamer(System.Func<T, System.String>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public CSharpNamer(Func<T, string> nameGetter)
    content.vb: Public Sub New(nameGetter As Func(Of T, String))
    parameters:
    - id: nameGetter
      type: System.Func{{T},System.String}
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.#ctor*
  nameWithType.vb: CSharpNamer(Of T).CSharpNamer(Func(Of T, String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer(Of T).CSharpNamer(System.Func(Of T, System.String))
  name.vb: CSharpNamer(Func(Of T, String))
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.GetName(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.GetName(`0)
  id: GetName(`0)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1
  langs:
  - csharp
  - vb
  name: GetName(T)
  nameWithType: CSharpNamer<T>.GetName(T)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer<T>.GetName(T)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetName
    path: src/Microsoft.EntityFrameworkCore.Relational.Design/Internal/CSharpNamer.cs
    startLine: 39
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual string GetName(T item)
    content.vb: Public Overridable Function GetName(item As T) As String
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.GetName*
  nameWithType.vb: CSharpNamer(Of T).GetName(T)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer(Of T).GetName(T)
references:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Scaffolding.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.Dictionary{{T},System.String}
  commentId: T:System.Collections.Generic.Dictionary{`0,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<T, String>
  nameWithType: Dictionary<T, String>
  fullName: System.Collections.Generic.Dictionary<T, System.String>
  nameWithType.vb: Dictionary(Of T, String)
  fullname.vb: System.Collections.Generic.Dictionary(Of T, System.String)
  name.vb: Dictionary(Of T, String)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.#ctor
  isExternal: false
  name: CSharpNamer
  nameWithType: CSharpNamer<T>.CSharpNamer
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer<T>.CSharpNamer
  nameWithType.vb: CSharpNamer(Of T).CSharpNamer
  fullname.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer(Of T).CSharpNamer
- uid: System.Func{{T},System.String}
  commentId: T:System.Func{`0,System.String}
  parent: System
  definition: System.Func`2
  name: Func<T, String>
  nameWithType: Func<T, String>
  fullName: System.Func<T, System.String>
  nameWithType.vb: Func(Of T, String)
  fullname.vb: System.Func(Of T, System.String)
  name.vb: Func(Of T, String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.GetName*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer`1.GetName
  isExternal: false
  name: GetName
  nameWithType: CSharpNamer<T>.GetName
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer<T>.GetName
  nameWithType.vb: CSharpNamer(Of T).GetName
  fullname.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpNamer(Of T).GetName
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
