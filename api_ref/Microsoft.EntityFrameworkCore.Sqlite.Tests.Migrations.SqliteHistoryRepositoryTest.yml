### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  commentId: T:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  id: SqliteHistoryRepositoryTest
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  children:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfExistsScript_works
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfNotExistsScript_works
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateIfNotExistsScript_works
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateScript_works
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetDeleteScript_works
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetEndIfScript_works
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetInsertScript_works
  langs:
  - csharp
  - vb
  name: SqliteHistoryRepositoryTest
  nameWithType: SqliteHistoryRepositoryTest
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: SqliteHistoryRepositoryTest
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public class SqliteHistoryRepositoryTest
    content.vb: Public Class SqliteHistoryRepositoryTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateScript_works
  commentId: M:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateScript_works
  id: GetCreateScript_works
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  langs:
  - csharp
  - vb
  name: GetCreateScript_works()
  nameWithType: SqliteHistoryRepositoryTest.GetCreateScript_works()
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateScript_works()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetCreateScript_works
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public void GetCreateScript_works()
    content.vb: Public Sub GetCreateScript_works
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateIfNotExistsScript_works
  commentId: M:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateIfNotExistsScript_works
  id: GetCreateIfNotExistsScript_works
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  langs:
  - csharp
  - vb
  name: GetCreateIfNotExistsScript_works()
  nameWithType: SqliteHistoryRepositoryTest.GetCreateIfNotExistsScript_works()
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetCreateIfNotExistsScript_works()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetCreateIfNotExistsScript_works
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public void GetCreateIfNotExistsScript_works()
    content.vb: Public Sub GetCreateIfNotExistsScript_works
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetDeleteScript_works
  commentId: M:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetDeleteScript_works
  id: GetDeleteScript_works
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  langs:
  - csharp
  - vb
  name: GetDeleteScript_works()
  nameWithType: SqliteHistoryRepositoryTest.GetDeleteScript_works()
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetDeleteScript_works()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetDeleteScript_works
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 50
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public void GetDeleteScript_works()
    content.vb: Public Sub GetDeleteScript_works
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetInsertScript_works
  commentId: M:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetInsertScript_works
  id: GetInsertScript_works
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  langs:
  - csharp
  - vb
  name: GetInsertScript_works()
  nameWithType: SqliteHistoryRepositoryTest.GetInsertScript_works()
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetInsertScript_works()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetInsertScript_works
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 61
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public void GetInsertScript_works()
    content.vb: Public Sub GetInsertScript_works
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfNotExistsScript_works
  commentId: M:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfNotExistsScript_works
  id: GetBeginIfNotExistsScript_works
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  langs:
  - csharp
  - vb
  name: GetBeginIfNotExistsScript_works()
  nameWithType: SqliteHistoryRepositoryTest.GetBeginIfNotExistsScript_works()
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfNotExistsScript_works()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetBeginIfNotExistsScript_works
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 73
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public void GetBeginIfNotExistsScript_works()
    content.vb: Public Sub GetBeginIfNotExistsScript_works
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfExistsScript_works
  commentId: M:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfExistsScript_works
  id: GetBeginIfExistsScript_works
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  langs:
  - csharp
  - vb
  name: GetBeginIfExistsScript_works()
  nameWithType: SqliteHistoryRepositoryTest.GetBeginIfExistsScript_works()
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetBeginIfExistsScript_works()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetBeginIfExistsScript_works
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 82
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public void GetBeginIfExistsScript_works()
    content.vb: Public Sub GetBeginIfExistsScript_works
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetEndIfScript_works
  commentId: M:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetEndIfScript_works
  id: GetEndIfScript_works
  parent: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest
  langs:
  - csharp
  - vb
  name: GetEndIfScript_works()
  nameWithType: SqliteHistoryRepositoryTest.GetEndIfScript_works()
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.GetEndIfScript_works()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetEndIfScript_works
    path: test/Microsoft.EntityFrameworkCore.Sqlite.Tests/Migrations/SqliteHistoryRepositoryTest.cs
    startLine: 91
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite.Tests
  namespace: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  syntax:
    content: public void GetEndIfScript_works()
    content.vb: Public Sub GetEndIfScript_works
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  commentId: N:Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  nameWithType: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
  fullName: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<SqliteHistoryRepositoryTest, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<SqliteHistoryRepositoryTest, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of SqliteHistoryRepositoryTest, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of SqliteHistoryRepositoryTest, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<SqliteHistoryRepositoryTest, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<SqliteHistoryRepositoryTest, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of SqliteHistoryRepositoryTest, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of SqliteHistoryRepositoryTest, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Sqlite.Tests.Migrations.SqliteHistoryRepositoryTest, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
