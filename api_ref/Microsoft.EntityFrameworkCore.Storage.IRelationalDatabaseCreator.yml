### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  id: IRelationalDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IRelationalDatabaseCreator
  nameWithType: IRelationalDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IRelationalDatabaseCreator
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Performs database/schema creation, and other related operations.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: 'public interface IRelationalDatabaseCreator : IDatabaseCreator'
    content.vb: >-
      Public Interface IRelationalDatabaseCreator
          Inherits IDatabaseCreator
  inheritedMembers:
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  id: Exists
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Exists()
  nameWithType: IRelationalDatabaseCreator.Exists()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Exists
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 26
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Determines whether the physical database exists. No attempt is made to determine if the database\n    contains the schema for the current model.\n"
  example: []
  syntax:
    content: bool Exists()
    content.vb: Function Exists As Boolean
    return:
      type: System.Boolean
      description: "\n    True if the database exists; otherwise false.\n"
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  id: ExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: ExistsAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.ExistsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExistsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 39
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously determines whether the physical database exists. No attempt is made to determine if \n    the database contains the schema for the current model.\n"
  example: []
  syntax:
    content: Task<bool> ExistsAsync(CancellationToken cancellationToken = null)
    content.vb: Function ExistsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n    A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n    A task that represents the asynchronous operation. The task result contains \n    true if the database exists; otherwise false.\n"
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  id: Create
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: IRelationalDatabaseCreator.Create()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Create
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 44
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Creates the physical database. Does not attempt to populate it with any schema.\n"
  example: []
  syntax:
    content: void Create()
    content.vb: Sub Create
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  id: CreateAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: CreateAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.CreateAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously creates the physical database. Does not attempt to populate it with any schema.\n"
  example: []
  syntax:
    content: Task CreateAsync(CancellationToken cancellationToken = null)
    content.vb: Function CreateAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n    A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n    A task that represents the asynchronous operation.\n"
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  id: Delete
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: IRelationalDatabaseCreator.Delete()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Delete
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 60
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Deletes the physical database.\n"
  example: []
  syntax:
    content: void Delete()
    content.vb: Sub Delete
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  id: DeleteAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: DeleteAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.DeleteAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DeleteAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 71
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously deletes the physical database.\n"
  example: []
  syntax:
    content: Task DeleteAsync(CancellationToken cancellationToken = null)
    content.vb: Function DeleteAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n    A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n    A task that represents the asynchronous operation.\n"
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  id: CreateTables
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: CreateTables()
  nameWithType: IRelationalDatabaseCreator.CreateTables()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTables
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 77
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Creates all tables for the current model in the database. No attempt is made\n    to incrementally update the schema. It is assumed that none of the tables exist in the database.\n"
  example: []
  syntax:
    content: void CreateTables()
    content.vb: Sub CreateTables
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  id: CreateTablesAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: CreateTablesAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.CreateTablesAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTablesAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/IRelationalDatabaseCreator.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously creates all tables for the current model in the database. No attempt is made\n    to incrementally update the schema. It is assumed that none of the tables exist in the database.\n"
  example: []
  syntax:
    content: Task CreateTablesAsync(CancellationToken cancellationToken = null)
    content.vb: Function CreateTablesAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n    A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n    A task that represents the asynchronous operation.\n"
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: false
  name: EnsureDeleted()
  nameWithType: IDatabaseCreator.EnsureDeleted()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
    name: EnsureDeleted
    nameWithType: IDatabaseCreator.EnsureDeleted
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
    name: EnsureDeleted
    nameWithType: IDatabaseCreator.EnsureDeleted
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: true
  name: EnsureDeletedAsync(CancellationToken)
  nameWithType: IDatabaseCreator.EnsureDeletedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
    name: EnsureDeletedAsync
    nameWithType: IDatabaseCreator.EnsureDeletedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
    name: EnsureDeletedAsync
    nameWithType: IDatabaseCreator.EnsureDeletedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: false
  name: EnsureCreated()
  nameWithType: IDatabaseCreator.EnsureCreated()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
    name: EnsureCreated
    nameWithType: IDatabaseCreator.EnsureCreated
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
    name: EnsureCreated
    nameWithType: IDatabaseCreator.EnsureCreated
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: true
  name: EnsureCreatedAsync(CancellationToken)
  nameWithType: IDatabaseCreator.EnsureCreatedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
    name: EnsureCreatedAsync
    nameWithType: IDatabaseCreator.EnsureCreatedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
    name: EnsureCreatedAsync
    nameWithType: IDatabaseCreator.EnsureCreatedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDatabaseCreator
  nameWithType: IDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
