### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  id: EntityQueryProvider
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: EntityQueryProvider
  nameWithType: EntityQueryProvider
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EntityQueryProvider
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class EntityQueryProvider : IAsyncQueryProvider, IQueryProvider'
    content.vb: >-
      Public Class EntityQueryProvider
          Implements IAsyncQueryProvider, IQueryProvider
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  - System.Linq.IQueryProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler)
  id: '#ctor(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler)'
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: EntityQueryProvider(IQueryCompiler)
  nameWithType: EntityQueryProvider.EntityQueryProvider(IQueryCompiler)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.EntityQueryProvider(Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public EntityQueryProvider(IQueryCompiler queryCompiler)
    content.vb: Public Sub New(queryCompiler As IQueryCompiler)
    parameters:
    - id: queryCompiler
      type: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  id: CreateQuery``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: CreateQuery<TElement>(Expression)
  nameWithType: EntityQueryProvider.CreateQuery<TElement>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CreateQuery
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 39
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IQueryable<TElement> CreateQuery<TElement>(Expression expression)
    content.vb: Public Overridable Function CreateQuery(Of TElement)(expression As Expression) As IQueryable(Of TElement)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TElement
    return:
      type: System.Linq.IQueryable{{TElement}}
  implements:
  - System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  nameWithType.vb: EntityQueryProvider.CreateQuery(Of TElement)(Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery(Of TElement)(System.Linq.Expressions.Expression)
  name.vb: CreateQuery(Of TElement)(Expression)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  id: CreateQuery(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: CreateQuery(Expression)
  nameWithType: EntityQueryProvider.CreateQuery(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CreateQuery
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IQueryable CreateQuery(Expression expression)
    content.vb: Public Overridable Function CreateQuery(expression As Expression) As IQueryable
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.IQueryable
  implements:
  - System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  id: Execute``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: Execute<TResult>(Expression)
  nameWithType: EntityQueryProvider.Execute<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Execute
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual TResult Execute<TResult>(Expression expression)
    content.vb: Public Overridable Function Execute(Of TResult)(expression As Expression) As TResult
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
  implements:
  - System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  nameWithType.vb: EntityQueryProvider.Execute(Of TResult)(Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: Execute(Of TResult)(Expression)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  id: Execute(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: Execute(Expression)
  nameWithType: EntityQueryProvider.Execute(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Execute
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 62
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual object Execute(Expression expression)
    content.vb: Public Overridable Function Execute(expression As Expression) As Object
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Object
  implements:
  - System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  id: ExecuteAsync``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Expression)
  nameWithType: EntityQueryProvider.ExecuteAsync<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 69
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IAsyncEnumerable<TResult> ExecuteAsync<TResult>(Expression expression)
    content.vb: Public Overridable Function ExecuteAsync(Of TResult)(expression As Expression) As IAsyncEnumerable(Of TResult)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TResult
    return:
      type: IAsyncEnumerable{{TResult}}
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  nameWithType.vb: EntityQueryProvider.ExecuteAsync(Of TResult)(Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: ExecuteAsync(Of TResult)(Expression)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  id: ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Expression, CancellationToken)
  nameWithType: EntityQueryProvider.ExecuteAsync<TResult>(Expression, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync<TResult>(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/EntityQueryProvider.cs
    startLine: 76
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteAsync(Of TResult)(expression As Expression, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  nameWithType.vb: EntityQueryProvider.ExecuteAsync(Of TResult)(Expression, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Expression, CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IAsyncQueryProvider
  nameWithType: IAsyncQueryProvider
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<EntityQueryProvider, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<EntityQueryProvider, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of EntityQueryProvider, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of EntityQueryProvider, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<EntityQueryProvider, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<EntityQueryProvider, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of EntityQueryProvider, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of EntityQueryProvider, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IQueryCompiler
  nameWithType: IQueryCompiler
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
- uid: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  definition: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  isExternal: true
  name: CreateQuery<TElement>(Expression)
  nameWithType: IQueryProvider.CreateQuery<TElement>(Expression)
  fullName: System.Linq.IQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression)
  nameWithType.vb: IQueryProvider.CreateQuery(Of TElement)(Expression)
  fullname.vb: System.Linq.IQueryProvider.CreateQuery(Of TElement)(System.Linq.Expressions.Expression)
  name.vb: CreateQuery(Of TElement)(Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
    name: CreateQuery<TElement>
    nameWithType: IQueryProvider.CreateQuery<TElement>
    fullName: System.Linq.IQueryProvider.CreateQuery<TElement>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
    name: CreateQuery(Of TElement)
    nameWithType: IQueryProvider.CreateQuery(Of TElement)
    fullName: System.Linq.IQueryProvider.CreateQuery(Of TElement)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.IQueryable{{TElement}}
  commentId: T:System.Linq.IQueryable{``0}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TElement>
  nameWithType: IQueryable<TElement>
  fullName: System.Linq.IQueryable<TElement>
  nameWithType.vb: IQueryable(Of TElement)
  fullname.vb: System.Linq.IQueryable(Of TElement)
  name.vb: IQueryable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElement
    nameWithType: TElement
    fullName: TElement
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  isExternal: true
  name: CreateQuery(Expression)
  nameWithType: IQueryProvider.CreateQuery(Expression)
  fullName: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
    name: CreateQuery
    nameWithType: IQueryProvider.CreateQuery
    fullName: System.Linq.IQueryProvider.CreateQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
    name: CreateQuery
    nameWithType: IQueryProvider.CreateQuery
    fullName: System.Linq.IQueryProvider.CreateQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable
  commentId: T:System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  definition: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  isExternal: true
  name: Execute<TResult>(Expression)
  nameWithType: IQueryProvider.Execute<TResult>(Expression)
  fullName: System.Linq.IQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression)
  nameWithType.vb: IQueryProvider.Execute(Of TResult)(Expression)
  fullname.vb: System.Linq.IQueryProvider.Execute(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: Execute(Of TResult)(Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
    name: Execute<TResult>
    nameWithType: IQueryProvider.Execute<TResult>
    fullName: System.Linq.IQueryProvider.Execute<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
    name: Execute(Of TResult)
    nameWithType: IQueryProvider.Execute(Of TResult)
    fullName: System.Linq.IQueryProvider.Execute(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  isExternal: true
  name: Execute(Expression)
  nameWithType: IQueryProvider.Execute(Expression)
  fullName: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
    name: Execute
    nameWithType: IQueryProvider.Execute
    fullName: System.Linq.IQueryProvider.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
    name: Execute
    nameWithType: IQueryProvider.Execute
    fullName: System.Linq.IQueryProvider.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  definition: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  name: ExecuteAsync<TResult>(Expression)
  nameWithType: IAsyncQueryProvider.ExecuteAsync<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync<TResult>(System.Linq.Expressions.Expression)
  nameWithType.vb: IAsyncQueryProvider.ExecuteAsync(Of TResult)(Expression)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: ExecuteAsync(Of TResult)(Expression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
    name: ExecuteAsync<TResult>
    nameWithType: IAsyncQueryProvider.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
    name: ExecuteAsync(Of TResult)
    nameWithType: IAsyncQueryProvider.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable{{TResult}}
  commentId: '!:IAsyncEnumerable{``1}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<TResult>
  nameWithType: IAsyncEnumerable<TResult>
  fullName: IAsyncEnumerable<TResult>
  nameWithType.vb: IAsyncEnumerable(Of TResult)
  fullname.vb: IAsyncEnumerable(Of TResult)
  name.vb: IAsyncEnumerable(Of TResult)
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullname.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  definition: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  name: ExecuteAsync<TResult>(Expression, CancellationToken)
  nameWithType: IAsyncQueryProvider.ExecuteAsync<TResult>(Expression, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync<TResult>(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  nameWithType.vb: IAsyncQueryProvider.ExecuteAsync(Of TResult)(Expression, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Expression, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
    name: ExecuteAsync<TResult>
    nameWithType: IAsyncQueryProvider.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TResult)
    nameWithType: IAsyncQueryProvider.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
