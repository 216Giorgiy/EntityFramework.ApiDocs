### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  id: SqlServerDatabaseCreationTest
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_and_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_with_filename_and_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database_with_filename
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_and_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_exists_and_has_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_with_filename_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename_with_opened_connections
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_opened_connections
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_opened_connections
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_with_filename_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_exists
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_with_filename_exists
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_with_filename_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_exists
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_with_filename_exists
  langs:
  - csharp
  - vb
  name: SqlServerDatabaseCreationTest
  nameWithType: SqlServerDatabaseCreationTest
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: SqlServerDatabaseCreationTest
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public class SqlServerDatabaseCreationTest
    content.vb: Public Class SqlServerDatabaseCreationTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_doesnt_exist
  id: Exists_returns_false_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: Exists_returns_false_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.Exists_returns_false_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Exists_returns_false_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Exists_returns_false_when_database_doesnt_exist()
    content.vb: Public Function Exists_returns_false_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_with_filename_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_with_filename_doesnt_exist
  id: Exists_returns_false_when_database_with_filename_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: Exists_returns_false_when_database_with_filename_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.Exists_returns_false_when_database_with_filename_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_false_when_database_with_filename_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Exists_returns_false_when_database_with_filename_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task Exists_returns_false_when_database_with_filename_doesnt_exist()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function Exists_returns_false_when_database_with_filename_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_doesnt_exist
  id: ExistsAsync_returns_false_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: ExistsAsync_returns_false_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExistsAsync_returns_false_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task ExistsAsync_returns_false_when_database_doesnt_exist()
    content.vb: Public Function ExistsAsync_returns_false_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_with_filename_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_with_filename_doesnt_exist
  id: ExistsAsync_returns_false_when_database_with_filename_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: ExistsAsync_returns_false_when_database_with_filename_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_with_filename_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_false_when_database_with_filename_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExistsAsync_returns_false_when_database_with_filename_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task ExistsAsync_returns_false_when_database_with_filename_doesnt_exist()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function ExistsAsync_returns_false_when_database_with_filename_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_exists
  id: Exists_returns_true_when_database_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: Exists_returns_true_when_database_exists()
  nameWithType: SqlServerDatabaseCreationTest.Exists_returns_true_when_database_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Exists_returns_true_when_database_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 59
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Exists_returns_true_when_database_exists()
    content.vb: Public Function Exists_returns_true_when_database_exists As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_with_filename_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_with_filename_exists
  id: Exists_returns_true_when_database_with_filename_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: Exists_returns_true_when_database_with_filename_exists()
  nameWithType: SqlServerDatabaseCreationTest.Exists_returns_true_when_database_with_filename_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Exists_returns_true_when_database_with_filename_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Exists_returns_true_when_database_with_filename_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 65
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task Exists_returns_true_when_database_with_filename_exists()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function Exists_returns_true_when_database_with_filename_exists As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_exists
  id: ExistsAsync_returns_true_when_database_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: ExistsAsync_returns_true_when_database_exists()
  nameWithType: SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExistsAsync_returns_true_when_database_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task ExistsAsync_returns_true_when_database_exists()
    content.vb: Public Function ExistsAsync_returns_true_when_database_exists As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_with_filename_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_with_filename_exists
  id: ExistsAsync_returns_true_when_database_with_filename_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: ExistsAsync_returns_true_when_database_with_filename_exists()
  nameWithType: SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_with_filename_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.ExistsAsync_returns_true_when_database_with_filename_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExistsAsync_returns_true_when_database_with_filename_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 78
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task ExistsAsync_returns_true_when_database_with_filename_exists()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function ExistsAsync_returns_true_when_database_with_filename_exists As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database
  id: EnsureDeleted_will_delete_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeleted_will_delete_database()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeleted_will_delete_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 100
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureDeleted_will_delete_database()
    content.vb: Public Function EnsureDeleted_will_delete_database As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename
  id: EnsureDeleted_will_delete_database_with_filename
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeleted_will_delete_database_with_filename()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeleted_will_delete_database_with_filename
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 106
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureDeleted_will_delete_database_with_filename()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureDeleted_will_delete_database_with_filename As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database
  id: EnsureDeletedAsync_will_delete_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeletedAsync_will_delete_database()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeletedAsync_will_delete_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 113
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureDeletedAsync_will_delete_database()
    content.vb: Public Function EnsureDeletedAsync_will_delete_database As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename
  id: EnsureDeletedAsync_will_delete_database_with_filename
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeletedAsync_will_delete_database_with_filename()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeletedAsync_will_delete_database_with_filename
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 119
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureDeletedAsync_will_delete_database_with_filename()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureDeletedAsync_will_delete_database_with_filename As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_opened_connections
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_opened_connections
  id: EnsureDeleted_will_delete_database_with_opened_connections
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeleted_will_delete_database_with_opened_connections()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_opened_connections()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_opened_connections()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeleted_will_delete_database_with_opened_connections
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 126
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureDeleted_will_delete_database_with_opened_connections()
    content.vb: Public Function EnsureDeleted_will_delete_database_with_opened_connections As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename_with_opened_connections
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename_with_opened_connections
  id: EnsureDeleted_will_delete_database_with_filename_with_opened_connections
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeleted_will_delete_database_with_filename_with_opened_connections()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename_with_opened_connections()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeleted_will_delete_database_with_filename_with_opened_connections()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeleted_will_delete_database_with_filename_with_opened_connections
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 132
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureDeleted_will_delete_database_with_filename_with_opened_connections()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureDeleted_will_delete_database_with_filename_with_opened_connections As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_opened_connections
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_opened_connections
  id: EnsureDeletedAsync_will_delete_database_with_opened_connections
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeletedAsync_will_delete_database_with_opened_connections()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_opened_connections()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_opened_connections()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeletedAsync_will_delete_database_with_opened_connections
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 139
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureDeletedAsync_will_delete_database_with_opened_connections()
    content.vb: Public Function EnsureDeletedAsync_will_delete_database_with_opened_connections As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections
  id: EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections()
  nameWithType: SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 145
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureDeletedAsync_will_delete_database_with_filename_with_opened_connections As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_doesnt_exist
  id: EnsuredDeleted_noop_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredDeleted_noop_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredDeleted_noop_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 185
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsuredDeleted_noop_when_database_doesnt_exist()
    content.vb: Public Function EnsuredDeleted_noop_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_with_filename_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_with_filename_doesnt_exist
  id: EnsuredDeleted_noop_when_database_with_filename_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredDeleted_noop_when_database_with_filename_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_with_filename_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeleted_noop_when_database_with_filename_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredDeleted_noop_when_database_with_filename_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 191
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsuredDeleted_noop_when_database_with_filename_doesnt_exist()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsuredDeleted_noop_when_database_with_filename_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_doesnt_exist
  id: EnsuredDeletedAsync_noop_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredDeletedAsync_noop_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredDeletedAsync_noop_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 198
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsuredDeletedAsync_noop_when_database_doesnt_exist()
    content.vb: Public Function EnsuredDeletedAsync_noop_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist
  id: EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 204
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsuredDeletedAsync_noop_when_database_with_filename_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database
  id: EnsureCreated_can_create_schema_in_existing_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreated_can_create_schema_in_existing_database()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreated_can_create_schema_in_existing_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 239
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureCreated_can_create_schema_in_existing_database()
    content.vb: Public Function EnsureCreated_can_create_schema_in_existing_database As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database_with_filename
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database_with_filename
  id: EnsureCreated_can_create_schema_in_existing_database_with_filename
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreated_can_create_schema_in_existing_database_with_filename()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database_with_filename()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_schema_in_existing_database_with_filename()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreated_can_create_schema_in_existing_database_with_filename
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 245
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureCreated_can_create_schema_in_existing_database_with_filename()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureCreated_can_create_schema_in_existing_database_with_filename As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database
  id: EnsureCreatedAsync_can_create_schema_in_existing_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreatedAsync_can_create_schema_in_existing_database()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreatedAsync_can_create_schema_in_existing_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 252
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureCreatedAsync_can_create_schema_in_existing_database()
    content.vb: Public Function EnsureCreatedAsync_can_create_schema_in_existing_database As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename
  id: EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 258
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureCreatedAsync_can_create_schema_in_existing_database_with_filename As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_and_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_and_schema
  id: EnsureCreated_can_create_physical_database_and_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreated_can_create_physical_database_and_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_and_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_and_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreated_can_create_physical_database_and_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 273
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureCreated_can_create_physical_database_and_schema()
    content.vb: Public Function EnsureCreated_can_create_physical_database_and_schema As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_with_filename_and_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_with_filename_and_schema
  id: EnsureCreated_can_create_physical_database_with_filename_and_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreated_can_create_physical_database_with_filename_and_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_with_filename_and_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreated_can_create_physical_database_with_filename_and_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreated_can_create_physical_database_with_filename_and_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 279
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureCreated_can_create_physical_database_with_filename_and_schema()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureCreated_can_create_physical_database_with_filename_and_schema As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_and_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_and_schema
  id: EnsureCreatedAsync_can_create_physical_database_and_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreatedAsync_can_create_physical_database_and_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_and_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_and_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreatedAsync_can_create_physical_database_and_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 286
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsureCreatedAsync_can_create_physical_database_and_schema()
    content.vb: Public Function EnsureCreatedAsync_can_create_physical_database_and_schema As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema
  id: EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 292
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsureCreatedAsync_can_create_physical_database_with_filename_and_schema As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_exists_and_has_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_exists_and_has_schema
  id: EnsuredCreated_is_noop_when_database_exists_and_has_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredCreated_is_noop_when_database_exists_and_has_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_exists_and_has_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_exists_and_has_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredCreated_is_noop_when_database_exists_and_has_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 362
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsuredCreated_is_noop_when_database_exists_and_has_schema()
    content.vb: Public Function EnsuredCreated_is_noop_when_database_exists_and_has_schema As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema
  id: EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 368
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsuredCreated_is_noop_when_database_with_filename_exists_and_has_schema As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema
  id: EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 375
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema()
    content.vb: Public Function EnsuredCreatedAsync_is_noop_when_database_exists_and_has_schema As Task
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema
  id: EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest
  langs:
  - csharp
  - vb
  name: EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema()
  nameWithType: SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreationTest.cs
    startLine: 381
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.SupportsAttach)]

      public Task EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema()
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.SupportsAttach)>

      Public Function EnsuredCreatedAsync_is_noop_when_database_with_filename_exists_and_has_schema As Task
    return:
      type: System.Threading.Tasks.Task
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<SqlServerDatabaseCreationTest, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<SqlServerDatabaseCreationTest, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of SqlServerDatabaseCreationTest, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of SqlServerDatabaseCreationTest, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<SqlServerDatabaseCreationTest, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<SqlServerDatabaseCreationTest, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of SqlServerDatabaseCreationTest, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of SqlServerDatabaseCreationTest, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreationTest, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
