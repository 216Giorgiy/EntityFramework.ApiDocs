### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  id: ModelBuilderTest.Theta
  parent: Microsoft.EntityFrameworkCore.Tests
  children:
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.AllIotas
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.Alpha
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.InverseNavThetas
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.NavTheta
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.ThetaId
  langs:
  - csharp
  - vb
  name: ModelBuilderTest.Theta
  nameWithType: ModelBuilderTest.Theta
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Theta
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
    startLine: 372
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: protected class Theta
    content.vb: Protected Class Theta
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - protected
  - class
  modifiers.vb:
  - Protected
  - Class
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.ThetaId
  commentId: P:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.ThetaId
  id: ThetaId
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  langs:
  - csharp
  - vb
  name: ThetaId
  nameWithType: ModelBuilderTest.Theta.ThetaId
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.ThetaId
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ThetaId
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
    startLine: 374
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public int ThetaId { get; set; }
    content.vb: Public Property ThetaId As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.Alpha
  commentId: P:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.Alpha
  id: Alpha
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  langs:
  - csharp
  - vb
  name: Alpha
  nameWithType: ModelBuilderTest.Theta.Alpha
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.Alpha
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Alpha
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
    startLine: 376
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public ModelBuilderTest.Alpha Alpha { get; set; }
    content.vb: Public Property Alpha As ModelBuilderTest.Alpha
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Alpha
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.NavTheta
  commentId: P:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.NavTheta
  id: NavTheta
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  langs:
  - csharp
  - vb
  name: NavTheta
  nameWithType: ModelBuilderTest.Theta.NavTheta
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.NavTheta
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NavTheta
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
    startLine: 378
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public ModelBuilderTest.Theta NavTheta { get; set; }
    content.vb: Public Property NavTheta As ModelBuilderTest.Theta
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.InverseNavThetas
  commentId: P:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.InverseNavThetas
  id: InverseNavThetas
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  langs:
  - csharp
  - vb
  name: InverseNavThetas
  nameWithType: ModelBuilderTest.Theta.InverseNavThetas
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.InverseNavThetas
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InverseNavThetas
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
    startLine: 379
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public IList<ModelBuilderTest.Theta> InverseNavThetas { get; set; }
    content.vb: Public Property InverseNavThetas As IList(Of ModelBuilderTest.Theta)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.AllIotas
  commentId: P:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.AllIotas
  id: AllIotas
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  langs:
  - csharp
  - vb
  name: AllIotas
  nameWithType: ModelBuilderTest.Theta.AllIotas
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta.AllIotas
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AllIotas
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/TestModel.cs
    startLine: 380
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public IList<ModelBuilderTest.Iota> AllIotas { get; set; }
    content.vb: Public Property AllIotas As IList(Of ModelBuilderTest.Iota)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.Tests
  commentId: N:Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Tests
  nameWithType: Microsoft.EntityFrameworkCore.Tests
  fullName: Microsoft.EntityFrameworkCore.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Alpha
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Alpha
  parent: Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: ModelBuilderTest.Alpha
  nameWithType: ModelBuilderTest.Alpha
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Alpha
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  parent: Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: ModelBuilderTest.Theta
  nameWithType: ModelBuilderTest.Theta
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
- uid: System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta}
  commentId: T:System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ModelBuilderTest.Theta>
  nameWithType: IList<ModelBuilderTest.Theta>
  fullName: System.Collections.Generic.IList<Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta>
  nameWithType.vb: IList(Of ModelBuilderTest.Theta)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta)
  name.vb: IList(Of ModelBuilderTest.Theta)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
    name: ModelBuilderTest.Theta
    nameWithType: ModelBuilderTest.Theta
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
    name: ModelBuilderTest.Theta
    nameWithType: ModelBuilderTest.Theta
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Theta
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota}
  commentId: T:System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ModelBuilderTest.Iota>
  nameWithType: IList<ModelBuilderTest.Iota>
  fullName: System.Collections.Generic.IList<Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota>
  nameWithType.vb: IList(Of ModelBuilderTest.Iota)
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota)
  name.vb: IList(Of ModelBuilderTest.Iota)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota
    name: ModelBuilderTest.Iota
    nameWithType: ModelBuilderTest.Iota
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota
    name: ModelBuilderTest.Iota
    nameWithType: ModelBuilderTest.Iota
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.Iota
  - name: )
    nameWithType: )
    fullName: )
