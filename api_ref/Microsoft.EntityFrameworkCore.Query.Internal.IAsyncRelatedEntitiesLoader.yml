### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader
  id: IAsyncRelatedEntitiesLoader
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load(Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer)
  langs:
  - csharp
  - vb
  name: IAsyncRelatedEntitiesLoader
  nameWithType: IAsyncRelatedEntitiesLoader
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncRelatedEntitiesLoader.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IAsyncRelatedEntitiesLoader
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncRelatedEntitiesLoader.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public interface IAsyncRelatedEntitiesLoader : IDisposable'
    content.vb: >-
      Public Interface IAsyncRelatedEntitiesLoader
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load(Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load(Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer)
  id: Load(Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader
  langs:
  - csharp
  - vb
  name: Load(QueryContext, IIncludeKeyComparer)
  nameWithType: IAsyncRelatedEntitiesLoader.Load(QueryContext, IIncludeKeyComparer)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load(Microsoft.EntityFrameworkCore.Query.QueryContext, Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncRelatedEntitiesLoader.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Load
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncRelatedEntitiesLoader.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<EntityLoadInfo> Load(QueryContext queryContext, IIncludeKeyComparer keyComparer)
    content.vb: Function Load(queryContext As QueryContext, keyComparer As IIncludeKeyComparer) As IAsyncEnumerable(Of EntityLoadInfo)
    parameters:
    - id: queryContext
      type: Microsoft.EntityFrameworkCore.Query.QueryContext
    - id: keyComparer
      type: Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer
    return:
      type: IAsyncEnumerable{Microsoft.EntityFrameworkCore.Query.EntityLoadInfo}
  overload: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load*
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load
  isExternal: false
  name: Load
  nameWithType: IAsyncRelatedEntitiesLoader.Load
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncRelatedEntitiesLoader.Load
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryContext
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: QueryContext
  nameWithType: QueryContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IIncludeKeyComparer
  nameWithType: IIncludeKeyComparer
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IIncludeKeyComparer
- uid: IAsyncEnumerable{Microsoft.EntityFrameworkCore.Query.EntityLoadInfo}
  commentId: '!:IAsyncEnumerable{Microsoft.EntityFrameworkCore.Query.EntityLoadInfo}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<EntityLoadInfo>
  nameWithType: IAsyncEnumerable<EntityLoadInfo>
  fullName: IAsyncEnumerable<Microsoft.EntityFrameworkCore.Query.EntityLoadInfo>
  nameWithType.vb: IAsyncEnumerable(Of EntityLoadInfo)
  fullname.vb: IAsyncEnumerable(Of Microsoft.EntityFrameworkCore.Query.EntityLoadInfo)
  name.vb: IAsyncEnumerable(Of EntityLoadInfo)
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
    name: EntityLoadInfo
    nameWithType: EntityLoadInfo
    fullName: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
    name: EntityLoadInfo
    nameWithType: EntityLoadInfo
    fullName: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullname.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
