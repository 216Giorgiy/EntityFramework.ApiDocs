### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  id: SqlAzureExecutionStrategy
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32)
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext)
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32)
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(System.Int32)
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  - Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.ShouldRetryOn(System.Exception)
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy
  nameWithType: SqlAzureExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlAzureExecutionStrategy
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: 'public class SqlAzureExecutionStrategy : ExecutionStrategy, IExecutionStrategy'
    content.vb: >-
      Public Class SqlAzureExecutionStrategy
          Inherits ExecutionStrategy
          Implements IExecutionStrategy
  inheritance:
  - System.Object
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  inheritedMembers:
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{{TState},{TResult}},{TState})
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},{TState},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,{T}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor
  id: '#ctor'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy()
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy()
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref> without a context.\n"
  remarks: "\n    The default retry limit is 5, which means that the total amount of time spent before failing is 26 seconds plus the random factor.\n"
  example: []
  syntax:
    content: protected SqlAzureExecutionStrategy()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext)
  id: '#ctor(Microsoft.EntityFrameworkCore.DbContext)'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(DbContext)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(DbContext)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.DbContext)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n    The default retry limit is 5, which means that the total amount of time spent before failing is 26 seconds plus the random factor.\n"
  example: []
  syntax:
    content: public SqlAzureExecutionStrategy(DbContext context)
    content.vb: Public Sub New(context As DbContext)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
      description: 'The context on which the operations will be invoked. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext)
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext)
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext)'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(ExecutionStrategyContext)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(ExecutionStrategyContext)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SqlAzureExecutionStrategy(ExecutionStrategyContext context)
    content.vb: Public Sub New(context As ExecutionStrategyContext)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
      description: 'The required dependencies. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(Int32)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Int32)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 57
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref> without a context.\n"
  example: []
  syntax:
    content: protected SqlAzureExecutionStrategy(int maxRetryCount)
    content.vb: Protected Sub New(maxRetryCount As Integer)
    parameters:
    - id: maxRetryCount
      type: System.Int32
      description: 'The maximum number of retry attempts. '
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32)
  id: '#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32)'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(DbContext, Int32)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(DbContext, Int32)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.DbContext, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SqlAzureExecutionStrategy(DbContext context, int maxRetryCount)
    content.vb: Public Sub New(context As DbContext, maxRetryCount As Integer)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
      description: 'The context on which the operations will be invoked. '
    - id: maxRetryCount
      type: System.Int32
      description: 'The maximum number of retry attempts. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32)
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32)'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(ExecutionStrategyContext, Int32)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(ExecutionStrategyContext, Int32)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 80
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SqlAzureExecutionStrategy(ExecutionStrategyContext context, int maxRetryCount)
    content.vb: Public Sub New(context As ExecutionStrategyContext, maxRetryCount As Integer)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
      description: 'The required dependencies. '
    - id: maxRetryCount
      type: System.Int32
      description: 'The maximum number of retry attempts. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  id: '#ctor(System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(Int32, TimeSpan, ICollection<Int32>)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Int32, TimeSpan, ICollection<Int32>)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(System.Int32, System.TimeSpan, System.Collections.Generic.ICollection<System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 93
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref> without a context.\n"
  example: []
  syntax:
    content: protected SqlAzureExecutionStrategy(int maxRetryCount, TimeSpan maxRetryDelay, ICollection<int> errorNumbersToAdd)
    content.vb: Protected Sub New(maxRetryCount As Integer, maxRetryDelay As TimeSpan, errorNumbersToAdd As ICollection(Of Integer))
    parameters:
    - id: maxRetryCount
      type: System.Int32
      description: 'The maximum number of retry attempts. '
    - id: maxRetryDelay
      type: System.TimeSpan
      description: 'The maximum delay in milliseconds between retries. '
    - id: errorNumbersToAdd
      type: System.Collections.Generic.ICollection{System.Int32}
      description: 'Additional SQL error numbers that should be considered transient. '
  nameWithType.vb: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Int32, TimeSpan, ICollection(Of Int32))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(System.Int32, System.TimeSpan, System.Collections.Generic.ICollection(Of System.Int32))
  name.vb: SqlAzureExecutionStrategy(Int32, TimeSpan, ICollection(Of Int32))
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  id: '#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(DbContext, Int32, TimeSpan, ICollection<Int32>)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(DbContext, Int32, TimeSpan, ICollection<Int32>)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.DbContext, System.Int32, System.TimeSpan, System.Collections.Generic.ICollection<System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SqlAzureExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<int> errorNumbersToAdd)
    content.vb: Public Sub New(context As DbContext, maxRetryCount As Integer, maxRetryDelay As TimeSpan, errorNumbersToAdd As ICollection(Of Integer))
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
      description: 'The context on which the operations will be invoked. '
    - id: maxRetryCount
      type: System.Int32
      description: 'The maximum number of retry attempts. '
    - id: maxRetryDelay
      type: System.TimeSpan
      description: 'The maximum delay in milliseconds between retries. '
    - id: errorNumbersToAdd
      type: System.Collections.Generic.ICollection{System.Int32}
      description: 'Additional SQL error numbers that should be considered transient. '
  nameWithType.vb: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(DbContext, Int32, TimeSpan, ICollection(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.DbContext, System.Int32, System.TimeSpan, System.Collections.Generic.ICollection(Of System.Int32))
  name.vb: SqlAzureExecutionStrategy(DbContext, Int32, TimeSpan, ICollection(Of Int32))
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan,System.Collections.Generic.ICollection{System.Int32})'
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: SqlAzureExecutionStrategy(ExecutionStrategyContext, Int32, TimeSpan, ICollection<Int32>)
  nameWithType: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(ExecutionStrategyContext, Int32, TimeSpan, ICollection<Int32>)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext, System.Int32, System.TimeSpan, System.Collections.Generic.ICollection<System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 127
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SqlAzureExecutionStrategy(ExecutionStrategyContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<int> errorNumbersToAdd)
    content.vb: Public Sub New(context As ExecutionStrategyContext, maxRetryCount As Integer, maxRetryDelay As TimeSpan, errorNumbersToAdd As ICollection(Of Integer))
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
      description: 'The required dependencies. '
    - id: maxRetryCount
      type: System.Int32
      description: 'The maximum number of retry attempts. '
    - id: maxRetryDelay
      type: System.TimeSpan
      description: 'The maximum delay in milliseconds between retries. '
    - id: errorNumbersToAdd
      type: System.Collections.Generic.ICollection{System.Int32}
      description: 'Additional SQL error numbers that should be considered transient. '
  nameWithType.vb: SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(ExecutionStrategyContext, Int32, TimeSpan, ICollection(Of Int32))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.SqlAzureExecutionStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext, System.Int32, System.TimeSpan, System.Collections.Generic.ICollection(Of System.Int32))
  name.vb: SqlAzureExecutionStrategy(ExecutionStrategyContext, Int32, TimeSpan, ICollection(Of Int32))
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.ShouldRetryOn(System.Exception)
  commentId: M:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.ShouldRetryOn(System.Exception)
  id: ShouldRetryOn(System.Exception)
  parent: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  langs:
  - csharp
  - vb
  name: ShouldRetryOn(Exception)
  nameWithType: SqlAzureExecutionStrategy.ShouldRetryOn(Exception)
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy.ShouldRetryOn(System.Exception)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ShouldRetryOn
    path: src/Microsoft.EntityFrameworkCore.SqlServer/SqlAzureExecutionStrategy.cs
    startLine: 137
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: protected override bool ShouldRetryOn(Exception exception)
    content.vb: Protected Overrides Function ShouldRetryOn(exception As Exception) As Boolean
    parameters:
    - id: exception
      type: System.Exception
    return:
      type: System.Boolean
  overridden: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ExecutionStrategy
  nameWithType: ExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IExecutionStrategy
  nameWithType: IExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
  commentId: F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: DefaultMaxRetryCount
  nameWithType: ExecutionStrategy.DefaultMaxRetryCount
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
  commentId: F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: DefaultMaxDelay
  nameWithType: ExecutionStrategy.DefaultMaxDelay
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: ExceptionsEncountered
  nameWithType: ExecutionStrategy.ExceptionsEncountered
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: Random
  nameWithType: ExecutionStrategy.Random
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: MaxRetryCount
  nameWithType: ExecutionStrategy.MaxRetryCount
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: MaxRetryDelay
  nameWithType: ExecutionStrategy.MaxRetryDelay
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: Context
  nameWithType: ExecutionStrategy.Context
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: Logger
  nameWithType: ExecutionStrategy.Logger
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: Suspended
  nameWithType: ExecutionStrategy.Suspended
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: RetriesOnFailure
  nameWithType: ExecutionStrategy.RetriesOnFailure
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{{TState},{TResult}},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  definition: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: ExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  nameWithType.vb: ExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute<TState, TResult>
    nameWithType: ExecutionStrategy.Execute<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute(Of TState, TResult)
    nameWithType: ExecutionStrategy.Execute(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},{TState},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  definition: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: ExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState, TResult>
    nameWithType: ExecutionStrategy.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: ExecutionStrategy.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: OnFirstExecution()
  nameWithType: ExecutionStrategy.OnFirstExecution()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
    name: OnFirstExecution
    nameWithType: ExecutionStrategy.OnFirstExecution
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
    name: OnFirstExecution
    nameWithType: ExecutionStrategy.OnFirstExecution
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: false
  name: OnRetry()
  nameWithType: ExecutionStrategy.OnRetry()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
    name: OnRetry
    nameWithType: ExecutionStrategy.OnRetry
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
    name: OnRetry
    nameWithType: ExecutionStrategy.OnRetry
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: true
  name: GetNextDelay(Exception)
  nameWithType: ExecutionStrategy.GetNextDelay(Exception)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
    name: GetNextDelay
    nameWithType: ExecutionStrategy.GetNextDelay
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
    name: GetNextDelay
    nameWithType: ExecutionStrategy.GetNextDelay
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,{T}})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  definition: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  name: UnwrapAndHandleException<T>(Exception, Func<Exception, T>)
  nameWithType: ExecutionStrategy.UnwrapAndHandleException<T>(Exception, Func<Exception, T>)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException<T>(System.Exception, System.Func<System.Exception, T>)
  nameWithType.vb: ExecutionStrategy.UnwrapAndHandleException(Of T)(Exception, Func(Of Exception, T))
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException(Of T)(System.Exception, System.Func(Of System.Exception, T))
  name.vb: UnwrapAndHandleException(Of T)(Exception, Func(Of Exception, T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
    name: UnwrapAndHandleException<T>
    nameWithType: ExecutionStrategy.UnwrapAndHandleException<T>
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
    name: UnwrapAndHandleException(Of T)
    nameWithType: ExecutionStrategy.UnwrapAndHandleException(Of T)
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  isExternal: true
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: ExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  nameWithType.vb: ExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute<TState, TResult>
    nameWithType: ExecutionStrategy.Execute<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute(Of TState, TResult)
    nameWithType: ExecutionStrategy.Execute(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: ExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState, TResult>
    nameWithType: ExecutionStrategy.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: ExecutionStrategy.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  isExternal: true
  name: UnwrapAndHandleException<T>(Exception, Func<Exception, T>)
  nameWithType: ExecutionStrategy.UnwrapAndHandleException<T>(Exception, Func<Exception, T>)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException<T>(System.Exception, System.Func<System.Exception, T>)
  nameWithType.vb: ExecutionStrategy.UnwrapAndHandleException(Of T)(Exception, Func(Of Exception, T))
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException(Of T)(System.Exception, System.Func(Of System.Exception, T))
  name.vb: UnwrapAndHandleException(Of T)(Exception, Func(Of Exception, T))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
    name: UnwrapAndHandleException<T>
    nameWithType: ExecutionStrategy.UnwrapAndHandleException<T>
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
    name: UnwrapAndHandleException(Of T)
    nameWithType: ExecutionStrategy.UnwrapAndHandleException(Of T)
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: SqlAzureExecutionStrategy
  nameWithType: SqlAzureExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.SqlAzureExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ExecutionStrategyContext
  nameWithType: ExecutionStrategyContext
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Collections.Generic.ICollection{System.Int32}
  commentId: T:System.Collections.Generic.ICollection{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Int32>
  nameWithType: ICollection<Int32>
  fullName: System.Collections.Generic.ICollection<System.Int32>
  nameWithType.vb: ICollection(Of Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Int32)
  name.vb: ICollection(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  isExternal: true
  name: ShouldRetryOn(Exception)
  nameWithType: ExecutionStrategy.ShouldRetryOn(Exception)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
    name: ShouldRetryOn
    nameWithType: ExecutionStrategy.ShouldRetryOn
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
    name: ShouldRetryOn
    nameWithType: ExecutionStrategy.ShouldRetryOn
    fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
