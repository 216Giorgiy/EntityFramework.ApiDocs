### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  id: CoreAnnotationNames
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  children:
  - Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.MaxLengthAnnotation
  - Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ProductVersionAnnotation
  - Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.PropertyAccessModeAnnotation
  - Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.UnicodeAnnotation
  - Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ValueGeneratorFactoryAnnotation
  langs:
  - csharp
  - vb
  name: CoreAnnotationNames
  nameWithType: CoreAnnotationNames
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CoreAnnotationNames
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
    startLine: 9
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static class CoreAnnotationNames
    content.vb: Public Module CoreAnnotationNames
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.MaxLengthAnnotation
  commentId: F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.MaxLengthAnnotation
  id: MaxLengthAnnotation
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  langs:
  - csharp
  - vb
  name: MaxLengthAnnotation
  nameWithType: CoreAnnotationNames.MaxLengthAnnotation
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.MaxLengthAnnotation
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: MaxLengthAnnotation
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public const string MaxLengthAnnotation = "MaxLength"
    content.vb: Public Const MaxLengthAnnotation As String = "MaxLength"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.UnicodeAnnotation
  commentId: F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.UnicodeAnnotation
  id: UnicodeAnnotation
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  langs:
  - csharp
  - vb
  name: UnicodeAnnotation
  nameWithType: CoreAnnotationNames.UnicodeAnnotation
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.UnicodeAnnotation
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: UnicodeAnnotation
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public const string UnicodeAnnotation = "Unicode"
    content.vb: Public Const UnicodeAnnotation As String = "Unicode"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ProductVersionAnnotation
  commentId: F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ProductVersionAnnotation
  id: ProductVersionAnnotation
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  langs:
  - csharp
  - vb
  name: ProductVersionAnnotation
  nameWithType: CoreAnnotationNames.ProductVersionAnnotation
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ProductVersionAnnotation
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ProductVersionAnnotation
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
    startLine: 27
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public const string ProductVersionAnnotation = "ProductVersion"
    content.vb: Public Const ProductVersionAnnotation As String = "ProductVersion"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ValueGeneratorFactoryAnnotation
  commentId: F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ValueGeneratorFactoryAnnotation
  id: ValueGeneratorFactoryAnnotation
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  langs:
  - csharp
  - vb
  name: ValueGeneratorFactoryAnnotation
  nameWithType: CoreAnnotationNames.ValueGeneratorFactoryAnnotation
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.ValueGeneratorFactoryAnnotation
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ValueGeneratorFactoryAnnotation
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
    startLine: 33
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public const string ValueGeneratorFactoryAnnotation = "ValueGeneratorFactory"
    content.vb: Public Const ValueGeneratorFactoryAnnotation As String = "ValueGeneratorFactory"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.PropertyAccessModeAnnotation
  commentId: F:Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.PropertyAccessModeAnnotation
  id: PropertyAccessModeAnnotation
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames
  langs:
  - csharp
  - vb
  name: PropertyAccessModeAnnotation
  nameWithType: CoreAnnotationNames.PropertyAccessModeAnnotation
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames.PropertyAccessModeAnnotation
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: PropertyAccessModeAnnotation
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/CoreAnnotationNames.cs
    startLine: 39
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public const string PropertyAccessModeAnnotation = "PropertyAccessMode"
    content.vb: Public Const PropertyAccessModeAnnotation As String = "PropertyAccessMode"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
