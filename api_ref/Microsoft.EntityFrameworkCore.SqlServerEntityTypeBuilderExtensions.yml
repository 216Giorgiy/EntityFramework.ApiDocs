### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  commentId: T:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  id: SqlServerEntityTypeBuilderExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  - Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Boolean)
  - Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  - Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  - Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  - Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  langs:
  - csharp
  - vb
  name: SqlServerEntityTypeBuilderExtensions
  nameWithType: SqlServerEntityTypeBuilderExtensions
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: SqlServerEntityTypeBuilderExtensions
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    SQL Server specific extension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class SqlServerEntityTypeBuilderExtensions
    content.vb: Public Module SqlServerEntityTypeBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  id: ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerToTable(EntityTypeBuilder, String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(EntityTypeBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ForSqlServerToTable
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static EntityTypeBuilder ForSqlServerToTable(this EntityTypeBuilder entityTypeBuilder, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerToTable(entityTypeBuilder As EntityTypeBuilder, name As String) As EntityTypeBuilder
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  id: ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerToTable<TEntity>(EntityTypeBuilder<TEntity>, String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable<TEntity>(EntityTypeBuilder<TEntity>, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable<TEntity>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ForSqlServerToTable
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
    startLine: 40
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting SQL Server.\n"
  example: []
  syntax:
    content: 'public static EntityTypeBuilder<TEntity> ForSqlServerToTable<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string name)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerToTable(Of TEntity As Class)(entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    typeParameters:
    - id: TEntity
      description: 'The entity type being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Of TEntity)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity), System.String)
  name.vb: ForSqlServerToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String)
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  id: ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerToTable(EntityTypeBuilder, String, String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(EntityTypeBuilder, String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ForSqlServerToTable
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
    startLine: 53
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting SQL Server.\n"
  example: []
  syntax:
    content: public static EntityTypeBuilder ForSqlServerToTable(this EntityTypeBuilder entityTypeBuilder, string name, string schema)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerToTable(entityTypeBuilder As EntityTypeBuilder, name As String, schema As String) As EntityTypeBuilder
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    - id: schema
      type: System.String
      description: 'The schema of the table. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  id: ForSqlServerToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerToTable<TEntity>(EntityTypeBuilder<TEntity>, String, String)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable<TEntity>(EntityTypeBuilder<TEntity>, String, String)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable<TEntity>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ForSqlServerToTable
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
    startLine: 77
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting SQL Server.\n"
  example: []
  syntax:
    content: 'public static EntityTypeBuilder<TEntity> ForSqlServerToTable<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string name, string schema)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerToTable(Of TEntity As Class)(entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String) As EntityTypeBuilder(Of TEntity)
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    - id: schema
      type: System.String
      description: 'The schema of the table. '
    typeParameters:
    - id: TEntity
      description: 'The entity type being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerToTable(Of TEntity)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity), System.String, System.String)
  name.vb: ForSqlServerToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String, String)
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  id: ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerIsMemoryOptimized(EntityTypeBuilder, Boolean)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(EntityTypeBuilder, Boolean)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ForSqlServerIsMemoryOptimized
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
    startLine: 90
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting SQL Server as memory-optimized.\n"
  example: []
  syntax:
    content: public static EntityTypeBuilder ForSqlServerIsMemoryOptimized(this EntityTypeBuilder entityTypeBuilder, bool memoryOptimized = true)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerIsMemoryOptimized(entityTypeBuilder As EntityTypeBuilder, memoryOptimized As Boolean = True) As EntityTypeBuilder
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    - id: memoryOptimized
      type: System.Boolean
      description: 'A value indicating whether the table is memory-optimized. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Boolean)
  id: ForSqlServerIsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Boolean)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqlServerIsMemoryOptimized<TEntity>(EntityTypeBuilder<TEntity>, Boolean)
  nameWithType: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized<TEntity>(EntityTypeBuilder<TEntity>, Boolean)
  fullName: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized<TEntity>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ForSqlServerIsMemoryOptimized
    path: src/Microsoft.EntityFrameworkCore.SqlServer/Extensions/SqlServerEntityTypeBuilderExtensions.cs
    startLine: 107
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting SQL Server as memory-optimized.\n"
  example: []
  syntax:
    content: 'public static EntityTypeBuilder<TEntity> ForSqlServerIsMemoryOptimized<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, bool memoryOptimized = true)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqlServerIsMemoryOptimized(Of TEntity As Class)(entityTypeBuilder As EntityTypeBuilder(Of TEntity), memoryOptimized As Boolean = True) As EntityTypeBuilder(Of TEntity)
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The builder for the entity type being configured. '
    - id: memoryOptimized
      type: System.Boolean
      description: 'A value indicating whether the table is memory-optimized. '
    typeParameters:
    - id: TEntity
      description: 'The entity type being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Of TEntity)(EntityTypeBuilder(Of TEntity), Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.ForSqlServerIsMemoryOptimized(Of TEntity)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity), System.Boolean)
  name.vb: ForSqlServerIsMemoryOptimized(Of TEntity)(EntityTypeBuilder(Of TEntity), Boolean)
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: EntityTypeBuilder
  nameWithType: EntityTypeBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Builders
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Builders
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  definition: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  name: EntityTypeBuilder<TEntity>
  nameWithType: EntityTypeBuilder<TEntity>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>
  nameWithType.vb: EntityTypeBuilder(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity)
  name.vb: EntityTypeBuilder(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: EntityTypeBuilder<TEntity>
  nameWithType: EntityTypeBuilder<TEntity>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>
  nameWithType.vb: EntityTypeBuilder(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity)
  name.vb: EntityTypeBuilder(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
