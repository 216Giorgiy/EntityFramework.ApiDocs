### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  id: SqlServerDatabaseCreatorTest
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist
  langs:
  - csharp
  - vb
  name: SqlServerDatabaseCreatorTest
  nameWithType: SqlServerDatabaseCreatorTest
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlServerDatabaseCreatorTest
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public class SqlServerDatabaseCreatorTest
    content.vb: Public Class SqlServerDatabaseCreatorTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist
  id: Exists_returns_false_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: Exists_returns_false_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Exists_returns_false_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Exists_returns_false_when_database_doesnt_exist()
    content.vb: Public Function Exists_returns_false_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist
  id: ExistsAsync_returns_false_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: ExistsAsync_returns_false_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExistsAsync_returns_false_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task ExistsAsync_returns_false_when_database_doesnt_exist()
    content.vb: Public Function ExistsAsync_returns_false_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists
  id: Exists_returns_true_when_database_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: Exists_returns_true_when_database_exists()
  nameWithType: SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Exists_returns_true_when_database_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Exists_returns_true_when_database_exists()
    content.vb: Public Function Exists_returns_true_when_database_exists As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists
  id: ExistsAsync_returns_true_when_database_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: ExistsAsync_returns_true_when_database_exists()
  nameWithType: SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExistsAsync_returns_true_when_database_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 52
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task ExistsAsync_returns_true_when_database_exists()
    content.vb: Public Function ExistsAsync_returns_true_when_database_exists As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist
  id: HasTables_throws_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: HasTables_throws_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTables_throws_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task HasTables_throws_when_database_doesnt_exist()
    content.vb: Public Function HasTables_throws_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist
  id: HasTablesAsync_throws_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: HasTablesAsync_throws_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTablesAsync_throws_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 74
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task HasTablesAsync_throws_when_database_doesnt_exist()
    content.vb: Public Function HasTablesAsync_throws_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables
  id: HasTables_returns_false_when_database_exists_but_has_no_tables
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: HasTables_returns_false_when_database_exists_but_has_no_tables()
  nameWithType: SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTables_returns_false_when_database_exists_but_has_no_tables
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 101
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task HasTables_returns_false_when_database_exists_but_has_no_tables()
    content.vb: Public Function HasTables_returns_false_when_database_exists_but_has_no_tables As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
  id: HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: HasTablesAsync_returns_false_when_database_exists_but_has_no_tables()
  nameWithType: SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 107
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task HasTablesAsync_returns_false_when_database_exists_but_has_no_tables()
    content.vb: Public Function HasTablesAsync_returns_false_when_database_exists_but_has_no_tables As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables
  id: HasTables_returns_true_when_database_exists_and_has_any_tables
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: HasTables_returns_true_when_database_exists_and_has_any_tables()
  nameWithType: SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTables_returns_true_when_database_exists_and_has_any_tables
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 125
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task HasTables_returns_true_when_database_exists_and_has_any_tables()
    content.vb: Public Function HasTables_returns_true_when_database_exists_and_has_any_tables As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
  id: HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: HasTablesAsync_returns_true_when_database_exists_and_has_any_tables()
  nameWithType: SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 131
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task HasTablesAsync_returns_true_when_database_exists_and_has_any_tables()
    content.vb: Public Function HasTablesAsync_returns_true_when_database_exists_and_has_any_tables As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database
  id: Delete_will_delete_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: Delete_will_delete_database()
  nameWithType: SqlServerDatabaseCreatorTest.Delete_will_delete_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Delete_will_delete_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 149
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Delete_will_delete_database()
    content.vb: Public Function Delete_will_delete_database As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database
  id: DeleteAsync_will_delete_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: DeleteAsync_will_delete_database()
  nameWithType: SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DeleteAsync_will_delete_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 155
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task DeleteAsync_will_delete_database()
    content.vb: Public Function DeleteAsync_will_delete_database As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist
  id: Delete_throws_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: Delete_throws_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Delete_throws_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 184
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Delete_throws_when_database_doesnt_exist()
    content.vb: Public Function Delete_throws_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist
  id: DeleteAsync_throws_when_database_doesnt_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: DeleteAsync_throws_when_database_doesnt_exist()
  nameWithType: SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DeleteAsync_throws_when_database_doesnt_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 190
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task DeleteAsync_throws_when_database_doesnt_exist()
    content.vb: Public Function DeleteAsync_throws_when_database_doesnt_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database
  id: CreateTables_creates_schema_in_existing_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: CreateTables_creates_schema_in_existing_database()
  nameWithType: SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTables_creates_schema_in_existing_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 213
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task CreateTables_creates_schema_in_existing_database()
    content.vb: Public Function CreateTables_creates_schema_in_existing_database As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database
  id: CreateTablesAsync_creates_schema_in_existing_database
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: CreateTablesAsync_creates_schema_in_existing_database()
  nameWithType: SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTablesAsync_creates_schema_in_existing_database
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 219
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task CreateTablesAsync_creates_schema_in_existing_database()
    content.vb: Public Function CreateTablesAsync_creates_schema_in_existing_database As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist
  id: CreateTables_throws_if_database_does_not_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: CreateTables_throws_if_database_does_not_exist()
  nameWithType: SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTables_throws_if_database_does_not_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 267
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task CreateTables_throws_if_database_does_not_exist()
    content.vb: Public Function CreateTables_throws_if_database_does_not_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist
  id: CreateTablesAsync_throws_if_database_does_not_exist
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: CreateTablesAsync_throws_if_database_does_not_exist()
  nameWithType: SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTablesAsync_throws_if_database_does_not_exist
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 273
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task CreateTablesAsync_throws_if_database_does_not_exist()
    content.vb: Public Function CreateTablesAsync_throws_if_database_does_not_exist As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables
  id: Create_creates_physical_database_but_not_tables
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: Create_creates_physical_database_but_not_tables()
  nameWithType: SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Create_creates_physical_database_but_not_tables
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 299
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Create_creates_physical_database_but_not_tables()
    content.vb: Public Function Create_creates_physical_database_but_not_tables As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables
  id: CreateAsync_creates_physical_database_but_not_tables
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: CreateAsync_creates_physical_database_but_not_tables()
  nameWithType: SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateAsync_creates_physical_database_but_not_tables
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 305
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task CreateAsync_creates_physical_database_but_not_tables()
    content.vb: Public Function CreateAsync_creates_physical_database_but_not_tables As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists
  id: Create_throws_if_database_already_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: Create_throws_if_database_already_exists()
  nameWithType: SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Create_throws_if_database_already_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 345
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task Create_throws_if_database_already_exists()
    content.vb: Public Function Create_throws_if_database_already_exists As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists
  id: CreateAsync_throws_if_database_already_exists
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest
  langs:
  - csharp
  - vb
  name: CreateAsync_throws_if_database_already_exists()
  nameWithType: SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateAsync_throws_if_database_already_exists
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs
    startLine: 351
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public Task CreateAsync_throws_if_database_already_exists()
    content.vb: Public Function CreateAsync_throws_if_database_already_exists As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist
  isExternal: false
  name: Exists_returns_false_when_database_doesnt_exist
  nameWithType: SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_false_when_database_doesnt_exist
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist
  isExternal: false
  name: ExistsAsync_returns_false_when_database_doesnt_exist
  nameWithType: SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_false_when_database_doesnt_exist
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists
  isExternal: false
  name: Exists_returns_true_when_database_exists
  nameWithType: SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Exists_returns_true_when_database_exists
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists
  isExternal: false
  name: ExistsAsync_returns_true_when_database_exists
  nameWithType: SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.ExistsAsync_returns_true_when_database_exists
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist
  isExternal: false
  name: HasTables_throws_when_database_doesnt_exist
  nameWithType: SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_throws_when_database_doesnt_exist
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist
  isExternal: false
  name: HasTablesAsync_throws_when_database_doesnt_exist
  nameWithType: SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_throws_when_database_doesnt_exist
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables
  isExternal: false
  name: HasTables_returns_false_when_database_exists_but_has_no_tables
  nameWithType: SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_false_when_database_exists_but_has_no_tables
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
  isExternal: false
  name: HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
  nameWithType: SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_false_when_database_exists_but_has_no_tables
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables
  isExternal: false
  name: HasTables_returns_true_when_database_exists_and_has_any_tables
  nameWithType: SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTables_returns_true_when_database_exists_and_has_any_tables
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
  isExternal: false
  name: HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
  nameWithType: SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.HasTablesAsync_returns_true_when_database_exists_and_has_any_tables
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database
  isExternal: false
  name: Delete_will_delete_database
  nameWithType: SqlServerDatabaseCreatorTest.Delete_will_delete_database
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_will_delete_database
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database
  isExternal: false
  name: DeleteAsync_will_delete_database
  nameWithType: SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_will_delete_database
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist
  isExternal: false
  name: Delete_throws_when_database_doesnt_exist
  nameWithType: SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Delete_throws_when_database_doesnt_exist
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist
  isExternal: false
  name: DeleteAsync_throws_when_database_doesnt_exist
  nameWithType: SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.DeleteAsync_throws_when_database_doesnt_exist
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database
  isExternal: false
  name: CreateTables_creates_schema_in_existing_database
  nameWithType: SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_creates_schema_in_existing_database
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database
  isExternal: false
  name: CreateTablesAsync_creates_schema_in_existing_database
  nameWithType: SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_creates_schema_in_existing_database
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist
  isExternal: false
  name: CreateTables_throws_if_database_does_not_exist
  nameWithType: SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTables_throws_if_database_does_not_exist
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist
  isExternal: false
  name: CreateTablesAsync_throws_if_database_does_not_exist
  nameWithType: SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateTablesAsync_throws_if_database_does_not_exist
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables
  isExternal: false
  name: Create_creates_physical_database_but_not_tables
  nameWithType: SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_creates_physical_database_but_not_tables
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables
  isExternal: false
  name: CreateAsync_creates_physical_database_but_not_tables
  nameWithType: SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_creates_physical_database_but_not_tables
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists
  isExternal: false
  name: Create_throws_if_database_already_exists
  nameWithType: SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.Create_throws_if_database_already_exists
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists*
  commentId: Overload:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists
  isExternal: false
  name: CreateAsync_throws_if_database_already_exists
  nameWithType: SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlServerDatabaseCreatorTest.CreateAsync_throws_if_database_already_exists
