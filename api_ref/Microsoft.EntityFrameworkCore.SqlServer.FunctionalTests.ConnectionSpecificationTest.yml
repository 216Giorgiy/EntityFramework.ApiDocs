### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  id: ConnectionSpecificationTest
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions_with_default_service_provider
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types_with_default_service_provider
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring_with_default_service_provider
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring_with_default_service_provider
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_config_without_UseSqlServer
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_connection_found_in_config_without_UseSqlServer
  langs:
  - csharp
  - vb
  name: ConnectionSpecificationTest
  nameWithType: ConnectionSpecificationTest
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ConnectionSpecificationTest
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: public class ConnectionSpecificationTest
    content.vb: Public Class ConnectionSpecificationTest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring
  id: Can_specify_connection_string_in_OnConfiguring
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_specify_connection_string_in_OnConfiguring()
  nameWithType: ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_specify_connection_string_in_OnConfiguring
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_specify_connection_string_in_OnConfiguring()
    content.vb: >-
      <Fact>

      Public Sub Can_specify_connection_string_in_OnConfiguring
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring_with_default_service_provider
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring_with_default_service_provider
  id: Can_specify_connection_string_in_OnConfiguring_with_default_service_provider
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_specify_connection_string_in_OnConfiguring_with_default_service_provider()
  nameWithType: ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring_with_default_service_provider()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_string_in_OnConfiguring_with_default_service_provider()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_specify_connection_string_in_OnConfiguring_with_default_service_provider
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 33
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_specify_connection_string_in_OnConfiguring_with_default_service_provider()
    content.vb: >-
      <Fact>

      Public Sub Can_specify_connection_string_in_OnConfiguring_with_default_service_provider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring
  id: Can_specify_connection_in_OnConfiguring
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_specify_connection_in_OnConfiguring()
  nameWithType: ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_specify_connection_in_OnConfiguring
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 51
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_specify_connection_in_OnConfiguring()
    content.vb: >-
      <Fact>

      Public Sub Can_specify_connection_in_OnConfiguring
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring_with_default_service_provider
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring_with_default_service_provider
  id: Can_specify_connection_in_OnConfiguring_with_default_service_provider
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_specify_connection_in_OnConfiguring_with_default_service_provider()
  nameWithType: ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring_with_default_service_provider()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_specify_connection_in_OnConfiguring_with_default_service_provider()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_specify_connection_in_OnConfiguring_with_default_service_provider
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_specify_connection_in_OnConfiguring_with_default_service_provider()
    content.vb: >-
      <Fact>

      Public Sub Can_specify_connection_in_OnConfiguring_with_default_service_provider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_connection_found_in_config_without_UseSqlServer
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_connection_found_in_config_without_UseSqlServer
  id: Throws_if_no_connection_found_in_config_without_UseSqlServer
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Throws_if_no_connection_found_in_config_without_UseSqlServer()
  nameWithType: ConnectionSpecificationTest.Throws_if_no_connection_found_in_config_without_UseSqlServer()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_connection_found_in_config_without_UseSqlServer()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Throws_if_no_connection_found_in_config_without_UseSqlServer
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 105
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Throws_if_no_connection_found_in_config_without_UseSqlServer()
    content.vb: >-
      <Fact>

      Public Sub Throws_if_no_connection_found_in_config_without_UseSqlServer
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_config_without_UseSqlServer
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_config_without_UseSqlServer
  id: Throws_if_no_config_without_UseSqlServer
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Throws_if_no_config_without_UseSqlServer()
  nameWithType: ConnectionSpecificationTest.Throws_if_no_config_without_UseSqlServer()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Throws_if_no_config_without_UseSqlServer()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Throws_if_no_config_without_UseSqlServer
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 120
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Throws_if_no_config_without_UseSqlServer()
    content.vb: >-
      <Fact>

      Public Sub Throws_if_no_config_without_UseSqlServer
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered
  id: Can_select_appropriate_provider_when_multiple_registered
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_select_appropriate_provider_when_multiple_registered()
  nameWithType: ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_select_appropriate_provider_when_multiple_registered
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 139
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_select_appropriate_provider_when_multiple_registered()
    content.vb: >-
      <Fact>

      Public Sub Can_select_appropriate_provider_when_multiple_registered
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider
  id: Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider()
  nameWithType: ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 192
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider()
    content.vb: >-
      <Fact>

      Public Sub Can_select_appropriate_provider_when_multiple_registered_with_default_service_provider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions
  id: Can_depend_on_DbContextOptions
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_depend_on_DbContextOptions()
  nameWithType: ConnectionSpecificationTest.Can_depend_on_DbContextOptions()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_depend_on_DbContextOptions
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 240
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_depend_on_DbContextOptions()
    content.vb: >-
      <Fact>

      Public Sub Can_depend_on_DbContextOptions
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions_with_default_service_provider
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions_with_default_service_provider
  id: Can_depend_on_DbContextOptions_with_default_service_provider
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_depend_on_DbContextOptions_with_default_service_provider()
  nameWithType: ConnectionSpecificationTest.Can_depend_on_DbContextOptions_with_default_service_provider()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_DbContextOptions_with_default_service_provider()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_depend_on_DbContextOptions_with_default_service_provider
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 258
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_depend_on_DbContextOptions_with_default_service_provider()
    content.vb: >-
      <Fact>

      Public Sub Can_depend_on_DbContextOptions_with_default_service_provider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types
  id: Can_register_multiple_context_types
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_register_multiple_context_types()
  nameWithType: ConnectionSpecificationTest.Can_register_multiple_context_types()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_register_multiple_context_types
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 300
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_register_multiple_context_types()
    content.vb: >-
      <Fact>

      Public Sub Can_register_multiple_context_types
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types_with_default_service_provider
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types_with_default_service_provider
  id: Can_register_multiple_context_types_with_default_service_provider
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_register_multiple_context_types_with_default_service_provider()
  nameWithType: ConnectionSpecificationTest.Can_register_multiple_context_types_with_default_service_provider()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_register_multiple_context_types_with_default_service_provider()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_register_multiple_context_types_with_default_service_provider
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 322
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_register_multiple_context_types_with_default_service_provider()
    content.vb: >-
      <Fact>

      Public Sub Can_register_multiple_context_types_with_default_service_provider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context
  id: Can_depend_on_non_generic_options_when_only_one_context
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_depend_on_non_generic_options_when_only_one_context()
  nameWithType: ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_depend_on_non_generic_options_when_only_one_context
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 379
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_depend_on_non_generic_options_when_only_one_context()
    content.vb: >-
      <Fact>

      Public Sub Can_depend_on_non_generic_options_when_only_one_context
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider
  id: Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest
  langs:
  - csharp
  - vb
  name: Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider()
  nameWithType: ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.ConnectionSpecificationTest.Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/ConnectionSpecificationTest.cs
    startLine: 396
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  syntax:
    content: >-
      [Fact]

      public void Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider()
    content.vb: >-
      <Fact>

      Public Sub Can_depend_on_non_generic_options_when_only_one_context_with_default_service_provider
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
