### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  id: QueryCompilationContext
  parent: Microsoft.EntityFrameworkCore.Query
  children:
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider,System.Type,System.Boolean)
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource,System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddTrackableInclude(Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.ContextType
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.DetermineQueryBufferRequirement(Remotion.Linq.QueryModel)
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.FindQuerySourcesRequiringMaterialization(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.QueryModel)
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.GetTrackableIncludes(Remotion.Linq.Clauses.IQuerySource)
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsIncludeQuery
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsQueryBufferRequired
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsTrackingQuery
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.LinqOperatorProvider
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Logger
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Model
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceMapping
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceRequiresMaterialization(Remotion.Linq.Clauses.IQuerySource)
  - Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.TrackQueryResults
  langs:
  - csharp
  - vb
  name: QueryCompilationContext
  nameWithType: QueryCompilationContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QueryCompilationContext
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    A query compilation context. The primary data structure representing the state/components\n    used during query compilation.\n"
  example: []
  syntax:
    content: public class QueryCompilationContext
    content.vb: Public Class QueryCompilationContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider,System.Type,System.Boolean)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider,System.Type,System.Boolean)
  id: '#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.Extensions.Logging.ILogger,Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider,System.Type,System.Boolean)'
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: QueryCompilationContext(IModel, ILogger, IEntityQueryModelVisitorFactory, IRequiresMaterializationExpressionVisitorFactory, ILinqOperatorProvider, Type, Boolean)
  nameWithType: QueryCompilationContext.QueryCompilationContext(IModel, ILogger, IEntityQueryModelVisitorFactory, IRequiresMaterializationExpressionVisitorFactory, ILinqOperatorProvider, Type, Boolean)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryCompilationContext(Microsoft.EntityFrameworkCore.Metadata.IModel, Microsoft.Extensions.Logging.ILogger, Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory, Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider, System.Type, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public QueryCompilationContext(IModel model, ILogger logger, IEntityQueryModelVisitorFactory entityQueryModelVisitorFactory, IRequiresMaterializationExpressionVisitorFactory requiresMaterializationExpressionVisitorFactory, ILinqOperatorProvider linqOperatorProvider, Type contextType, bool trackQueryResults)
    content.vb: Public Sub New(model As IModel, logger As ILogger, entityQueryModelVisitorFactory As IEntityQueryModelVisitorFactory, requiresMaterializationExpressionVisitorFactory As IRequiresMaterializationExpressionVisitorFactory, linqOperatorProvider As ILinqOperatorProvider, contextType As Type, trackQueryResults As Boolean)
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger
    - id: entityQueryModelVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory
    - id: requiresMaterializationExpressionVisitorFactory
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory
    - id: linqOperatorProvider
      type: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
    - id: contextType
      type: System.Type
    - id: trackQueryResults
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Model
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Model
  id: Model
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: QueryCompilationContext.Model
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Model
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Model
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 73
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the model.\n"
  example: []
  syntax:
    content: public virtual IModel Model { get; }
    content.vb: Public Overridable ReadOnly Property Model As IModel
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
      description: "\n    The model.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Logger
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Logger
  id: Logger
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: QueryCompilationContext.Logger
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.Logger
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Logger
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the logger.\n"
  example: []
  syntax:
    content: public virtual ILogger Logger { get; }
    content.vb: Public Overridable ReadOnly Property Logger As ILogger
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
      description: "\n    The logger.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.LinqOperatorProvider
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.LinqOperatorProvider
  id: LinqOperatorProvider
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: LinqOperatorProvider
  nameWithType: QueryCompilationContext.LinqOperatorProvider
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.LinqOperatorProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LinqOperatorProvider
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the linq operator provider.\n"
  example: []
  syntax:
    content: public virtual ILinqOperatorProvider LinqOperatorProvider { get; }
    content.vb: Public Overridable ReadOnly Property LinqOperatorProvider As ILinqOperatorProvider
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
      description: "\n    The linq operator provider.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.ContextType
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.ContextType
  id: ContextType
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: ContextType
  nameWithType: QueryCompilationContext.ContextType
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.ContextType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ContextType
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 97
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the type of the context./\n"
  example: []
  syntax:
    content: public virtual Type ContextType { get; }
    content.vb: Public Overridable ReadOnly Property ContextType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n    The type of the context.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.TrackQueryResults
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.TrackQueryResults
  id: TrackQueryResults
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: TrackQueryResults
  nameWithType: QueryCompilationContext.TrackQueryResults
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.TrackQueryResults
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TrackQueryResults
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 105
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets a value indicating the default configured tracking behavior.\n"
  example: []
  syntax:
    content: public virtual bool TrackQueryResults { get; }
    content.vb: Public Overridable ReadOnly Property TrackQueryResults As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n    true if the default is to track query results, false if not.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceMapping
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceMapping
  id: QuerySourceMapping
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: QuerySourceMapping
  nameWithType: QueryCompilationContext.QuerySourceMapping
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceMapping
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QuerySourceMapping
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 113
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the query source mapping.\n"
  example: []
  syntax:
    content: public virtual QuerySourceMapping QuerySourceMapping { get; }
    content.vb: Public Overridable ReadOnly Property QuerySourceMapping As QuerySourceMapping
    parameters: []
    return:
      type: Remotion.Linq.Clauses.QuerySourceMapping
      description: "\n    The query source mapping.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource,System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource,System.Linq.Expressions.Expression)
  id: AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource,System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: AddOrUpdateMapping(IQuerySource, Expression)
  nameWithType: QueryCompilationContext.AddOrUpdateMapping(IQuerySource, Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddOrUpdateMapping(Remotion.Linq.Clauses.IQuerySource, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddOrUpdateMapping
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 120
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Adds or updates the expression mapped to a query source.\n"
  example: []
  syntax:
    content: public virtual void AddOrUpdateMapping(IQuerySource querySource, Expression expression)
    content.vb: Public Overridable Sub AddOrUpdateMapping(querySource As IQuerySource, expression As Expression)
    parameters:
    - id: querySource
      type: Remotion.Linq.Clauses.IQuerySource
      description: 'The query source. '
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The expression mapped to the query source. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations
  id: QueryAnnotations
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: QueryAnnotations
  nameWithType: QueryCompilationContext.QueryAnnotations
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QueryAnnotations
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QueryAnnotations
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 142
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the query annotations./\n"
  example: []
  syntax:
    content: public virtual IReadOnlyCollection<IQueryAnnotation> QueryAnnotations { get; set; }
    content.vb: Public Overridable Property QueryAnnotations As IReadOnlyCollection(Of IQueryAnnotation)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
      description: "\n    The query annotations.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsTrackingQuery
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsTrackingQuery
  id: IsTrackingQuery
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: IsTrackingQuery
  nameWithType: QueryCompilationContext.IsTrackingQuery
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsTrackingQuery
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsTrackingQuery
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 160
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets a value indicating whether this is a tracking query.\n"
  example: []
  syntax:
    content: public virtual bool IsTrackingQuery { get; }
    content.vb: Public Overridable ReadOnly Property IsTrackingQuery As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n    true if this object is a tracking query, false if not.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsIncludeQuery
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsIncludeQuery
  id: IsIncludeQuery
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: IsIncludeQuery
  nameWithType: QueryCompilationContext.IsIncludeQuery
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsIncludeQuery
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsIncludeQuery
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 176
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    The query has at least one Include operation.\n"
  example: []
  syntax:
    content: public virtual bool IsIncludeQuery { get; }
    content.vb: Public Overridable ReadOnly Property IsIncludeQuery As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsQueryBufferRequired
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsQueryBufferRequired
  id: IsQueryBufferRequired
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: IsQueryBufferRequired
  nameWithType: QueryCompilationContext.IsQueryBufferRequired
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.IsQueryBufferRequired
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsQueryBufferRequired
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 184
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets a value indicating whether this query requires a query buffer.\n"
  example: []
  syntax:
    content: public virtual bool IsQueryBufferRequired { get; }
    content.vb: Public Overridable ReadOnly Property IsQueryBufferRequired As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n    true if this query requires a query buffer, false if not.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.DetermineQueryBufferRequirement(Remotion.Linq.QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.DetermineQueryBufferRequirement(Remotion.Linq.QueryModel)
  id: DetermineQueryBufferRequirement(Remotion.Linq.QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: DetermineQueryBufferRequirement(QueryModel)
  nameWithType: QueryCompilationContext.DetermineQueryBufferRequirement(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.DetermineQueryBufferRequirement(Remotion.Linq.QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DetermineQueryBufferRequirement
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 190
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Determine if the query requires a query buffer.\n"
  example: []
  syntax:
    content: public virtual void DetermineQueryBufferRequirement(QueryModel queryModel)
    content.vb: Public Overridable Sub DetermineQueryBufferRequirement(queryModel As QueryModel)
    parameters:
    - id: queryModel
      type: Remotion.Linq.QueryModel
      description: 'The query model. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor
  id: CreateQueryModelVisitor
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: CreateQueryModelVisitor()
  nameWithType: QueryCompilationContext.CreateQueryModelVisitor()
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateQueryModelVisitor
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 271
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Creates query model visitor.\n"
  example: []
  syntax:
    content: public virtual EntityQueryModelVisitor CreateQueryModelVisitor()
    content.vb: Public Overridable Function CreateQueryModelVisitor As EntityQueryModelVisitor
    return:
      type: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
      description: "\n    The new query model visitor.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)
  id: CreateQueryModelVisitor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: CreateQueryModelVisitor(EntityQueryModelVisitor)
  nameWithType: QueryCompilationContext.CreateQueryModelVisitor(EntityQueryModelVisitor)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.CreateQueryModelVisitor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateQueryModelVisitor
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 281
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Creates query model visitor.\n"
  example: []
  syntax:
    content: public virtual EntityQueryModelVisitor CreateQueryModelVisitor(EntityQueryModelVisitor parentEntityQueryModelVisitor)
    content.vb: Public Overridable Function CreateQueryModelVisitor(parentEntityQueryModelVisitor As EntityQueryModelVisitor) As EntityQueryModelVisitor
    parameters:
    - id: parentEntityQueryModelVisitor
      type: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
      description: 'The parent entity query model visitor. '
    return:
      type: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
      description: "\n    The new query model visitor.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddTrackableInclude(Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddTrackableInclude(Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})
  id: AddTrackableInclude(Remotion.Linq.Clauses.IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: AddTrackableInclude(IQuerySource, IReadOnlyList<INavigation>)
  nameWithType: QueryCompilationContext.AddTrackableInclude(IQuerySource, IReadOnlyList<INavigation>)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddTrackableInclude(Remotion.Linq.Clauses.IQuerySource, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.INavigation>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddTrackableInclude
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 290
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Adds a trackable include.\n"
  example: []
  syntax:
    content: public virtual void AddTrackableInclude(IQuerySource querySource, IReadOnlyList<INavigation> navigationPath)
    content.vb: Public Overridable Sub AddTrackableInclude(querySource As IQuerySource, navigationPath As IReadOnlyList(Of INavigation))
    parameters:
    - id: querySource
      type: Remotion.Linq.Clauses.IQuerySource
      description: 'The query source. '
    - id: navigationPath
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
      description: 'The included navigation path. '
  nameWithType.vb: QueryCompilationContext.AddTrackableInclude(IQuerySource, IReadOnlyList(Of INavigation))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.AddTrackableInclude(Remotion.Linq.Clauses.IQuerySource, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.INavigation))
  name.vb: AddTrackableInclude(IQuerySource, IReadOnlyList(Of INavigation))
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.GetTrackableIncludes(Remotion.Linq.Clauses.IQuerySource)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.GetTrackableIncludes(Remotion.Linq.Clauses.IQuerySource)
  id: GetTrackableIncludes(Remotion.Linq.Clauses.IQuerySource)
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: GetTrackableIncludes(IQuerySource)
  nameWithType: QueryCompilationContext.GetTrackableIncludes(IQuerySource)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.GetTrackableIncludes(Remotion.Linq.Clauses.IQuerySource)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetTrackableIncludes
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 317
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets all trackable includes for a given query source.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<IReadOnlyList<INavigation>> GetTrackableIncludes(IQuerySource querySource)
    content.vb: Public Overridable Function GetTrackableIncludes(querySource As IQuerySource) As IReadOnlyList(Of IReadOnlyList(Of INavigation))
    parameters:
    - id: querySource
      type: Remotion.Linq.Clauses.IQuerySource
      description: 'The query source. '
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}}
      description: "\n    The trackable includes.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.FindQuerySourcesRequiringMaterialization(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.FindQuerySourcesRequiringMaterialization(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.QueryModel)
  id: FindQuerySourcesRequiringMaterialization(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor,Remotion.Linq.QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: FindQuerySourcesRequiringMaterialization(EntityQueryModelVisitor, QueryModel)
  nameWithType: QueryCompilationContext.FindQuerySourcesRequiringMaterialization(EntityQueryModelVisitor, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.FindQuerySourcesRequiringMaterialization(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor, Remotion.Linq.QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindQuerySourcesRequiringMaterialization
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 336
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Determines all query sources that require materialization.\n"
  example: []
  syntax:
    content: public virtual void FindQuerySourcesRequiringMaterialization(EntityQueryModelVisitor queryModelVisitor, QueryModel queryModel)
    content.vb: Public Overridable Sub FindQuerySourcesRequiringMaterialization(queryModelVisitor As EntityQueryModelVisitor, queryModel As QueryModel)
    parameters:
    - id: queryModelVisitor
      type: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
      description: 'The query model visitor. '
    - id: queryModel
      type: Remotion.Linq.QueryModel
      description: 'The query model. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceRequiresMaterialization(Remotion.Linq.Clauses.IQuerySource)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceRequiresMaterialization(Remotion.Linq.Clauses.IQuerySource)
  id: QuerySourceRequiresMaterialization(Remotion.Linq.Clauses.IQuerySource)
  parent: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext
  langs:
  - csharp
  - vb
  name: QuerySourceRequiresMaterialization(IQuerySource)
  nameWithType: QueryCompilationContext.QuerySourceRequiresMaterialization(IQuerySource)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryCompilationContext.QuerySourceRequiresMaterialization(Remotion.Linq.Clauses.IQuerySource)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QuerySourceRequiresMaterialization
    path: src/Microsoft.EntityFrameworkCore/Query/QueryCompilationContext.cs
    startLine: 379
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Determine whether or not a query source requires materialization.\n"
  example: []
  syntax:
    content: public virtual bool QuerySourceRequiresMaterialization(IQuerySource querySource)
    content.vb: Public Overridable Function QuerySourceRequiresMaterialization(querySource As IQuerySource) As Boolean
    parameters:
    - id: querySource
      type: Remotion.Linq.Clauses.IQuerySource
      description: 'The query source. '
    return:
      type: System.Boolean
      description: "\n    true if it requires materialization, false if not.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.IModel
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IModel
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IModel
  nameWithType: IModel
  fullName: Microsoft.EntityFrameworkCore.Metadata.IModel
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: IEntityQueryModelVisitorFactory
  nameWithType: IEntityQueryModelVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.IEntityQueryModelVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: IRequiresMaterializationExpressionVisitorFactory
  nameWithType: IRequiresMaterializationExpressionVisitorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IRequiresMaterializationExpressionVisitorFactory
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: ILinqOperatorProvider
  nameWithType: ILinqOperatorProvider
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ILinqOperatorProvider
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: Remotion.Linq.Clauses.QuerySourceMapping
  commentId: T:Remotion.Linq.Clauses.QuerySourceMapping
  parent: Remotion.Linq.Clauses
  isExternal: true
  name: QuerySourceMapping
  nameWithType: QuerySourceMapping
  fullName: Remotion.Linq.Clauses.QuerySourceMapping
- uid: Remotion.Linq.Clauses
  commentId: N:Remotion.Linq.Clauses
  isExternal: false
  name: Remotion.Linq.Clauses
  nameWithType: Remotion.Linq.Clauses
  fullName: Remotion.Linq.Clauses
- uid: Remotion.Linq.Clauses.IQuerySource
  commentId: T:Remotion.Linq.Clauses.IQuerySource
  parent: Remotion.Linq.Clauses
  isExternal: true
  name: IQuerySource
  nameWithType: IQuerySource
  fullName: Remotion.Linq.Clauses.IQuerySource
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IQueryAnnotation>
  nameWithType: IReadOnlyCollection<IQueryAnnotation>
  fullName: System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation>
  nameWithType.vb: IReadOnlyCollection(Of IQueryAnnotation)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation)
  name.vb: IReadOnlyCollection(Of IQueryAnnotation)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Remotion.Linq.QueryModel
  commentId: T:Remotion.Linq.QueryModel
  parent: Remotion.Linq
  isExternal: true
  name: QueryModel
  nameWithType: QueryModel
  fullName: Remotion.Linq.QueryModel
- uid: Remotion.Linq
  commentId: N:Remotion.Linq
  isExternal: false
  name: Remotion.Linq
  nameWithType: Remotion.Linq
  fullName: Remotion.Linq
- uid: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: EntityQueryModelVisitor
  nameWithType: EntityQueryModelVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<INavigation>
  nameWithType: IReadOnlyList<INavigation>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.INavigation>
  nameWithType.vb: IReadOnlyList(Of INavigation)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.INavigation)
  name.vb: IReadOnlyList(Of INavigation)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IReadOnlyList<INavigation>>
  nameWithType: IReadOnlyList<IReadOnlyList<INavigation>>
  fullName: System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.INavigation>>
  nameWithType.vb: IReadOnlyList(Of IReadOnlyList(Of INavigation))
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.INavigation))
  name.vb: IReadOnlyList(Of IReadOnlyList(Of INavigation))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
