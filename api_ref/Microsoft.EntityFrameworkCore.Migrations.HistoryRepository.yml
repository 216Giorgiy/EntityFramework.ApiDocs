### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  id: HistoryRepository
  parent: Microsoft.EntityFrameworkCore.Migrations
  children:
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.#ctor(Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow})
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.DefaultTableName
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript(System.String)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript(System.String)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript(System.String)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult(System.Object)
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName
  - Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema
  langs:
  - csharp
  - vb
  name: HistoryRepository
  nameWithType: HistoryRepository
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HistoryRepository
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: 'public abstract class HistoryRepository : IHistoryRepository'
    content.vb: >-
      Public MustInherit Class HistoryRepository
          Implements IHistoryRepository
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.DefaultTableName
  commentId: F:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.DefaultTableName
  id: DefaultTableName
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: DefaultTableName
  nameWithType: HistoryRepository.DefaultTableName
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.DefaultTableName
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DefaultTableName
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public const string DefaultTableName = "__EFMigrationsHistory"
    content.vb: Public Const DefaultTableName As String = "__EFMigrationsHistory"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.#ctor(Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.#ctor(Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)'
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: HistoryRepository(IDatabaseCreator, IRawSqlCommandBuilder, IRelationalConnection, IDbContextOptions, IMigrationsModelDiffer, IMigrationsSqlGenerator, IRelationalAnnotationProvider, ISqlGenerationHelper)
  nameWithType: HistoryRepository.HistoryRepository(IDatabaseCreator, IRawSqlCommandBuilder, IRelationalConnection, IDbContextOptions, IMigrationsModelDiffer, IMigrationsSqlGenerator, IRelationalAnnotationProvider, ISqlGenerationHelper)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.HistoryRepository(Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator, Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions, Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer, Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator, Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider, Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected HistoryRepository(IDatabaseCreator databaseCreator, IRawSqlCommandBuilder rawSqlCommandBuilder, IRelationalConnection connection, IDbContextOptions options, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IRelationalAnnotationProvider annotations, ISqlGenerationHelper sqlGenerationHelper)
    content.vb: Protected Sub New(databaseCreator As IDatabaseCreator, rawSqlCommandBuilder As IRawSqlCommandBuilder, connection As IRelationalConnection, options As IDbContextOptions, modelDiffer As IMigrationsModelDiffer, migrationsSqlGenerator As IMigrationsSqlGenerator, annotations As IRelationalAnnotationProvider, sqlGenerationHelper As ISqlGenerationHelper)
    parameters:
    - id: databaseCreator
      type: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
    - id: rawSqlCommandBuilder
      type: Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
    - id: options
      type: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
    - id: modelDiffer
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
    - id: migrationsSqlGenerator
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
    - id: annotations
      type: Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
    - id: sqlGenerationHelper
      type: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper
  commentId: P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper
  id: SqlGenerationHelper
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: SqlGenerationHelper
  nameWithType: HistoryRepository.SqlGenerationHelper
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlGenerationHelper
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 87
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected virtual ISqlGenerationHelper SqlGenerationHelper { get; }
    content.vb: Protected Overridable ReadOnly Property SqlGenerationHelper As ISqlGenerationHelper
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName
  commentId: P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName
  id: TableName
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: TableName
  nameWithType: HistoryRepository.TableName
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TableName
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 88
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected virtual string TableName { get; }
    content.vb: Protected Overridable ReadOnly Property TableName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema
  commentId: P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema
  id: TableSchema
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: TableSchema
  nameWithType: HistoryRepository.TableSchema
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TableSchema
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected virtual string TableSchema { get; }
    content.vb: Protected Overridable ReadOnly Property TableSchema As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName
  commentId: P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName
  id: MigrationIdColumnName
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: MigrationIdColumnName
  nameWithType: HistoryRepository.MigrationIdColumnName
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MigrationIdColumnName
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 90
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected virtual string MigrationIdColumnName { get; }
    content.vb: Protected Overridable ReadOnly Property MigrationIdColumnName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName
  commentId: P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName
  id: ProductVersionColumnName
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: ProductVersionColumnName
  nameWithType: HistoryRepository.ProductVersionColumnName
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ProductVersionColumnName
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 91
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected virtual string ProductVersionColumnName { get; }
    content.vb: Protected Overridable ReadOnly Property ProductVersionColumnName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql
  commentId: P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql
  id: ExistsSql
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: ExistsSql
  nameWithType: HistoryRepository.ExistsSql
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExistsSql
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 93
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected abstract string ExistsSql { get; }
    content.vb: Protected MustOverride ReadOnly Property ExistsSql As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists
  id: Exists
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: Exists()
  nameWithType: HistoryRepository.Exists()
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Exists
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 95
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public virtual bool Exists()
    content.vb: Public Overridable Function Exists As Boolean
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  id: ExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: ExistsAsync(CancellationToken)
  nameWithType: HistoryRepository.ExistsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExistsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 100
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public virtual Task<bool> ExistsAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function ExistsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult(System.Object)
  id: InterpretExistsResult(System.Object)
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: InterpretExistsResult(Object)
  nameWithType: HistoryRepository.InterpretExistsResult(Object)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InterpretExistsResult
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 106
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  example: []
  syntax:
    content: protected abstract bool InterpretExistsResult(object value)
    content.vb: Protected MustOverride Function InterpretExistsResult(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
      description: true if the table exists; otherwise, false.
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript
  id: GetCreateIfNotExistsScript
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetCreateIfNotExistsScript()
  nameWithType: HistoryRepository.GetCreateIfNotExistsScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCreateIfNotExistsScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 108
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public abstract string GetCreateIfNotExistsScript()
    content.vb: Public MustOverride Function GetCreateIfNotExistsScript As String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript
  id: GetCreateScript
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetCreateScript()
  nameWithType: HistoryRepository.GetCreateScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCreateScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 110
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public virtual string GetCreateScript()
    content.vb: Public Overridable Function GetCreateScript As String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow})
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow})
  id: ConfigureTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow})
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: ConfigureTable(EntityTypeBuilder<HistoryRow>)
  nameWithType: HistoryRepository.ConfigureTable(EntityTypeBuilder<HistoryRow>)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Microsoft.EntityFrameworkCore.Migrations.HistoryRow>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ConfigureTable
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 118
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected virtual void ConfigureTable(EntityTypeBuilder<HistoryRow> history)
    content.vb: Protected Overridable Sub ConfigureTable(history As EntityTypeBuilder(Of HistoryRow))
    parameters:
    - id: history
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable*
  nameWithType.vb: HistoryRepository.ConfigureTable(EntityTypeBuilder(Of HistoryRow))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of Microsoft.EntityFrameworkCore.Migrations.HistoryRow))
  name.vb: ConfigureTable(EntityTypeBuilder(Of HistoryRow))
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations
  id: GetAppliedMigrations
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetAppliedMigrations()
  nameWithType: HistoryRepository.GetAppliedMigrations()
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAppliedMigrations
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 126
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public virtual IReadOnlyList<HistoryRow> GetAppliedMigrations()
    content.vb: Public Overridable Function GetAppliedMigrations As IReadOnlyList(Of HistoryRow)
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  id: GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetAppliedMigrationsAsync(CancellationToken)
  nameWithType: HistoryRepository.GetAppliedMigrationsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAppliedMigrationsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 146
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public virtual Task<IReadOnlyList<HistoryRow>> GetAppliedMigrationsAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function GetAppliedMigrationsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IReadOnlyList(Of HistoryRow))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}}
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql
  commentId: P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql
  id: GetAppliedMigrationsSql
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetAppliedMigrationsSql
  nameWithType: HistoryRepository.GetAppliedMigrationsSql
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAppliedMigrationsSql
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 167
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: protected virtual string GetAppliedMigrationsSql { get; }
    content.vb: Protected Overridable ReadOnly Property GetAppliedMigrationsSql As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  id: GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetInsertScript(HistoryRow)
  nameWithType: HistoryRepository.GetInsertScript(HistoryRow)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetInsertScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 180
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public virtual string GetInsertScript(HistoryRow row)
    content.vb: Public Overridable Function GetInsertScript(row As HistoryRow) As String
    parameters:
    - id: row
      type: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript(System.String)
  id: GetDeleteScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetDeleteScript(String)
  nameWithType: HistoryRepository.GetDeleteScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeleteScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 200
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public virtual string GetDeleteScript(string migrationId)
    content.vb: Public Overridable Function GetDeleteScript(migrationId As String) As String
    parameters:
    - id: migrationId
      type: System.String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript(System.String)
  id: GetBeginIfNotExistsScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetBeginIfNotExistsScript(String)
  nameWithType: HistoryRepository.GetBeginIfNotExistsScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetBeginIfNotExistsScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 215
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public abstract string GetBeginIfNotExistsScript(string migrationId)
    content.vb: Public MustOverride Function GetBeginIfNotExistsScript(migrationId As String) As String
    parameters:
    - id: migrationId
      type: System.String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript(System.String)
  id: GetBeginIfExistsScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetBeginIfExistsScript(String)
  nameWithType: HistoryRepository.GetBeginIfExistsScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetBeginIfExistsScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 216
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public abstract string GetBeginIfExistsScript(string migrationId)
    content.vb: Public MustOverride Function GetBeginIfExistsScript(migrationId As String) As String
    parameters:
    - id: migrationId
      type: System.String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript
  id: GetEndIfScript
  parent: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository
  langs:
  - csharp
  - vb
  name: GetEndIfScript()
  nameWithType: HistoryRepository.GetEndIfScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetEndIfScript
    path: src/Microsoft.EntityFrameworkCore.Relational/Migrations/HistoryRepository.cs
    startLine: 217
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Migrations
  syntax:
    content: public abstract string GetEndIfScript()
    content.vb: Public MustOverride Function GetEndIfScript As String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript*
  implements:
  - Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Microsoft.EntityFrameworkCore.Migrations
  commentId: N:Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Migrations
  nameWithType: Microsoft.EntityFrameworkCore.Migrations
  fullName: Microsoft.EntityFrameworkCore.Migrations
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: IHistoryRepository
  nameWithType: IHistoryRepository
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.#ctor
  isExternal: false
  name: HistoryRepository
  nameWithType: HistoryRepository.HistoryRepository
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.HistoryRepository
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDatabaseCreator
  nameWithType: IDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
- uid: Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRawSqlCommandBuilder
  nameWithType: IRawSqlCommandBuilder
  fullName: Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalConnection
  nameWithType: IRelationalConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: IDbContextOptions
  nameWithType: IDbContextOptions
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
- uid: Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: IMigrationsModelDiffer
  nameWithType: IMigrationsModelDiffer
  fullName: Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
- uid: Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: IMigrationsSqlGenerator
  nameWithType: IMigrationsSqlGenerator
  fullName: Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
- uid: Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IRelationalAnnotationProvider
  nameWithType: IRelationalAnnotationProvider
  fullName: Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider
- uid: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ISqlGenerationHelper
  nameWithType: ISqlGenerationHelper
  fullName: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper
  isExternal: false
  name: SqlGenerationHelper
  nameWithType: HistoryRepository.SqlGenerationHelper
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName
  isExternal: false
  name: TableName
  nameWithType: HistoryRepository.TableName
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema
  isExternal: false
  name: TableSchema
  nameWithType: HistoryRepository.TableSchema
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName
  isExternal: false
  name: MigrationIdColumnName
  nameWithType: HistoryRepository.MigrationIdColumnName
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName
  isExternal: false
  name: ProductVersionColumnName
  nameWithType: HistoryRepository.ProductVersionColumnName
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql
  isExternal: false
  name: ExistsSql
  nameWithType: HistoryRepository.ExistsSql
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists
  isExternal: false
  name: Exists
  nameWithType: HistoryRepository.Exists
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: false
  name: Exists()
  nameWithType: IHistoryRepository.Exists()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
    name: Exists
    nameWithType: IHistoryRepository.Exists
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
    name: Exists
    nameWithType: IHistoryRepository.Exists
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync
  isExternal: false
  name: ExistsAsync
  nameWithType: HistoryRepository.ExistsAsync
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: true
  name: ExistsAsync(CancellationToken)
  nameWithType: IHistoryRepository.ExistsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
    name: ExistsAsync
    nameWithType: IHistoryRepository.ExistsAsync
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)
    name: ExistsAsync
    nameWithType: IHistoryRepository.ExistsAsync
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult
  isExternal: false
  name: InterpretExistsResult
  nameWithType: HistoryRepository.InterpretExistsResult
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript
  isExternal: false
  name: GetCreateIfNotExistsScript
  nameWithType: HistoryRepository.GetCreateIfNotExistsScript
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: false
  name: GetCreateIfNotExistsScript()
  nameWithType: IHistoryRepository.GetCreateIfNotExistsScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
    name: GetCreateIfNotExistsScript
    nameWithType: IHistoryRepository.GetCreateIfNotExistsScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
    name: GetCreateIfNotExistsScript
    nameWithType: IHistoryRepository.GetCreateIfNotExistsScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript
  isExternal: false
  name: GetCreateScript
  nameWithType: HistoryRepository.GetCreateScript
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: false
  name: GetCreateScript()
  nameWithType: IHistoryRepository.GetCreateScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
    name: GetCreateScript
    nameWithType: IHistoryRepository.GetCreateScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
    name: GetCreateScript
    nameWithType: IHistoryRepository.GetCreateScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable
  isExternal: false
  name: ConfigureTable
  nameWithType: HistoryRepository.ConfigureTable
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  definition: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  name: EntityTypeBuilder<HistoryRow>
  nameWithType: EntityTypeBuilder<HistoryRow>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<Microsoft.EntityFrameworkCore.Migrations.HistoryRow>
  nameWithType.vb: EntityTypeBuilder(Of HistoryRow)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  name.vb: EntityTypeBuilder(Of HistoryRow)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: EntityTypeBuilder<TEntity>
  nameWithType: EntityTypeBuilder<TEntity>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>
  nameWithType.vb: EntityTypeBuilder(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity)
  name.vb: EntityTypeBuilder(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Builders
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Builders
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations
  isExternal: false
  name: GetAppliedMigrations
  nameWithType: HistoryRepository.GetAppliedMigrations
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: false
  name: GetAppliedMigrations()
  nameWithType: IHistoryRepository.GetAppliedMigrations()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
    name: GetAppliedMigrations
    nameWithType: IHistoryRepository.GetAppliedMigrations
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
    name: GetAppliedMigrations
    nameWithType: IHistoryRepository.GetAppliedMigrations
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<HistoryRow>
  nameWithType: IReadOnlyList<HistoryRow>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Migrations.HistoryRow>
  nameWithType.vb: IReadOnlyList(Of HistoryRow)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  name.vb: IReadOnlyList(Of HistoryRow)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync
  isExternal: false
  name: GetAppliedMigrationsAsync
  nameWithType: HistoryRepository.GetAppliedMigrationsAsync
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: true
  name: GetAppliedMigrationsAsync(CancellationToken)
  nameWithType: IHistoryRepository.GetAppliedMigrationsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
    name: GetAppliedMigrationsAsync
    nameWithType: IHistoryRepository.GetAppliedMigrationsAsync
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)
    name: GetAppliedMigrationsAsync
    nameWithType: IHistoryRepository.GetAppliedMigrationsAsync
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.HistoryRow}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReadOnlyList<HistoryRow>>
  nameWithType: Task<IReadOnlyList<HistoryRow>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Migrations.HistoryRow>>
  nameWithType.vb: Task(Of IReadOnlyList(Of HistoryRow))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Migrations.HistoryRow))
  name.vb: Task(Of IReadOnlyList(Of HistoryRow))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql
  isExternal: false
  name: GetAppliedMigrationsSql
  nameWithType: HistoryRepository.GetAppliedMigrationsSql
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript
  isExternal: false
  name: GetInsertScript
  nameWithType: HistoryRepository.GetInsertScript
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: false
  name: GetInsertScript(HistoryRow)
  nameWithType: IHistoryRepository.GetInsertScript(HistoryRow)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
    name: GetInsertScript
    nameWithType: IHistoryRepository.GetInsertScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)
    name: GetInsertScript
    nameWithType: IHistoryRepository.GetInsertScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
    name: HistoryRow
    nameWithType: HistoryRow
    fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: HistoryRow
  nameWithType: HistoryRow
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRow
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript
  isExternal: false
  name: GetDeleteScript
  nameWithType: HistoryRepository.GetDeleteScript
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: true
  name: GetDeleteScript(String)
  nameWithType: IHistoryRepository.GetDeleteScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
    name: GetDeleteScript
    nameWithType: IHistoryRepository.GetDeleteScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)
    name: GetDeleteScript
    nameWithType: IHistoryRepository.GetDeleteScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript
  isExternal: false
  name: GetBeginIfNotExistsScript
  nameWithType: HistoryRepository.GetBeginIfNotExistsScript
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: true
  name: GetBeginIfNotExistsScript(String)
  nameWithType: IHistoryRepository.GetBeginIfNotExistsScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
    name: GetBeginIfNotExistsScript
    nameWithType: IHistoryRepository.GetBeginIfNotExistsScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)
    name: GetBeginIfNotExistsScript
    nameWithType: IHistoryRepository.GetBeginIfNotExistsScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript
  isExternal: false
  name: GetBeginIfExistsScript
  nameWithType: HistoryRepository.GetBeginIfExistsScript
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: true
  name: GetBeginIfExistsScript(String)
  nameWithType: IHistoryRepository.GetBeginIfExistsScript(String)
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
    name: GetBeginIfExistsScript
    nameWithType: IHistoryRepository.GetBeginIfExistsScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)
    name: GetBeginIfExistsScript
    nameWithType: IHistoryRepository.GetBeginIfExistsScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript*
  commentId: Overload:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript
  isExternal: false
  name: GetEndIfScript
  nameWithType: HistoryRepository.GetEndIfScript
  fullName: Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript
- uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  commentId: M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  parent: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository
  isExternal: false
  name: GetEndIfScript()
  nameWithType: IHistoryRepository.GetEndIfScript()
  fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
    name: GetEndIfScript
    nameWithType: IHistoryRepository.GetEndIfScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
    name: GetEndIfScript
    nameWithType: IHistoryRepository.GetEndIfScript
    fullName: Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
