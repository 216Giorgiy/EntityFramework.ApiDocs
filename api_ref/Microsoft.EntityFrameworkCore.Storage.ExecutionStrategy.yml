### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  id: ExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan)
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  langs:
  - csharp
  - vb
  name: ExecutionStrategy
  nameWithType: ExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecutionStrategy
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The base class for <xref href=\"Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref> implementations.\n"
  example: []
  syntax:
    content: 'public abstract class ExecutionStrategy : IExecutionStrategy'
    content.vb: >-
      Public MustInherit Class ExecutionStrategy
          Implements IExecutionStrategy
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{{TResult}})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{{TState}},{TState})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.Tasks.Task},{TState})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task},{TState},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{{TState},System.Threading.Tasks.Task{{TResult}}},{TState})
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
  commentId: F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
  id: DefaultMaxRetryCount
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: DefaultMaxRetryCount
  nameWithType: ExecutionStrategy.DefaultMaxRetryCount
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxRetryCount
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DefaultMaxRetryCount
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The default number of retry attempts.\n"
  example: []
  syntax:
    content: protected static readonly int DefaultMaxRetryCount
    content.vb: Protected Shared ReadOnly DefaultMaxRetryCount As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
  commentId: F:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
  id: DefaultMaxDelay
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: DefaultMaxDelay
  nameWithType: ExecutionStrategy.DefaultMaxDelay
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.DefaultMaxDelay
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DefaultMaxDelay
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The default maximum time delay between retries, must be nonnegative.\n"
  example: []
  syntax:
    content: protected static readonly TimeSpan DefaultMaxDelay
    content.vb: Protected Shared ReadOnly DefaultMaxDelay As TimeSpan
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan)
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext,System.Int32,System.TimeSpan)'
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: ExecutionStrategy(ExecutionStrategyContext, Int32, TimeSpan)
  nameWithType: ExecutionStrategy.ExecutionStrategy(ExecutionStrategyContext, Int32, TimeSpan)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecutionStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext, System.Int32, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 53
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected ExecutionStrategy(ExecutionStrategyContext context, int maxRetryCount, TimeSpan maxRetryDelay)
    content.vb: Protected Sub New(context As ExecutionStrategyContext, maxRetryCount As Integer, maxRetryDelay As TimeSpan)
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
      description: 'The required dependencies. '
    - id: maxRetryCount
      type: System.Int32
      description: 'The maximum number of retry attempts. '
    - id: maxRetryDelay
      type: System.TimeSpan
      description: 'The maximum delay in milliseconds between retries. '
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
  id: ExceptionsEncountered
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: ExceptionsEncountered
  nameWithType: ExecutionStrategy.ExceptionsEncountered
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExceptionsEncountered
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExceptionsEncountered
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 76
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The list of exceptions that caused the operation to be retried so far.\n"
  example: []
  syntax:
    content: protected virtual List<Exception> ExceptionsEncountered { get; }
    content.vb: Protected Overridable ReadOnly Property ExceptionsEncountered As List(Of Exception)
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Exception}
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
  id: Random
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: ExecutionStrategy.Random
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Random
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Random
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    A pseudo-random number generater that can be used to vary the delay between retries.\n"
  example: []
  syntax:
    content: protected virtual Random Random { get; }
    content.vb: Protected Overridable ReadOnly Property Random As Random
    parameters: []
    return:
      type: System.Random
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
  id: MaxRetryCount
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: MaxRetryCount
  nameWithType: ExecutionStrategy.MaxRetryCount
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryCount
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MaxRetryCount
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 86
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The maximum number of retry attempts.\n"
  example: []
  syntax:
    content: protected virtual int MaxRetryCount { get; }
    content.vb: Protected Overridable ReadOnly Property MaxRetryCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
  id: MaxRetryDelay
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: MaxRetryDelay
  nameWithType: ExecutionStrategy.MaxRetryDelay
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.MaxRetryDelay
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MaxRetryDelay
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 91
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The maximum delay in milliseconds between retries.\n"
  example: []
  syntax:
    content: protected virtual TimeSpan MaxRetryDelay { get; }
    content.vb: Protected Overridable ReadOnly Property MaxRetryDelay As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
  id: Context
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: ExecutionStrategy.Context
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Context
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 96
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The context on which the operations will be invoked.\n"
  example: []
  syntax:
    content: protected virtual DbContext Context { get; }
    content.vb: Protected Overridable ReadOnly Property Context As DbContext
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.DbContext
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
  id: Logger
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: ExecutionStrategy.Logger
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Logger
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Logger
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 101
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The logger for this <xref href=\"Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: protected virtual ILogger<IExecutionStrategy> Logger { get; }
    content.vb: Protected Overridable ReadOnly Property Logger As ILogger(Of IExecutionStrategy)
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy}
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
  id: Suspended
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: Suspended
  nameWithType: ExecutionStrategy.Suspended
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Suspended
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Suspended
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 110
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Indicates whether the strategy is suspended. The strategy is typically suspending while executing to avoid\n    recursive execution from nested operations.\n"
  example: []
  syntax:
    content: protected static bool Suspended { get; set; }
    content.vb: Protected Shared Property Suspended As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  - static
  - get
  - set
  modifiers.vb:
  - Protected
  - Shared
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
  id: RetriesOnFailure
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: RetriesOnFailure
  nameWithType: ExecutionStrategy.RetriesOnFailure
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.RetriesOnFailure
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RetriesOnFailure
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 132
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Indicates whether this <xref href=\"Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref> might retry the execution after a failure.\n"
  example: []
  syntax:
    content: public virtual bool RetriesOnFailure { get; }
    content.vb: Public Overridable ReadOnly Property RetriesOnFailure As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  id: Execute``2(System.Func{``0,``1},``0)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: ExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 146
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Executes the specified operation and returns the result.\n"
  example: []
  syntax:
    content: public virtual TResult Execute<TState, TResult>(Func<TState, TResult> operation, TState state)
    content.vb: Public Overridable Function Execute(Of TState, TResult)(operation As Func(Of TState, TResult), state As TState) As TResult
    parameters:
    - id: operation
      type: System.Func{{TState},{TResult}}
      description: "\n    A delegate representing an executable operation that returns the result of type <em>TResult</em>.\n"
    - id: state
      type: '{TState}'
      description: The state that will be passed to the operation.
    typeParameters:
    - id: TState
      description: The type of the state.
    - id: TResult
      description: "\n    The return type of <em>operation</em>.\n"
    return:
      type: '{TResult}'
      description: The result from the operation.
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{{TState},{TResult}},{TState})
  nameWithType.vb: ExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  id: ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: ExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 212
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Executes the specified asynchronous operation and returns the result.\n"
  example: []
  syntax:
    content: public virtual Task<TResult> ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>> operation, TState state, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function ExecuteAsync(Of TState, TResult)(operation As Func(Of TState, CancellationToken, Task(Of TResult)), state As TState, cancellationToken As CancellationToken = Nothing) As Task(Of TResult)
    parameters:
    - id: operation
      type: System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}}
      description: "\n    A function that returns a started task of type <em>TResult</em>.\n"
    - id: state
      type: '{TState}'
      description: The state that will be passed to the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n    A cancellation token used to cancel the retry operation, but not operations that are already in flight\n    or that already completed successfully.\n"
    typeParameters:
    - id: TState
      description: The type of the state.
    - id: TResult
      description: "\n    The result type of the <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> returned by <em>operation</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n    A task that will run to completion if the original task completes successfully (either the\n    first time or after retrying transient failures). If the task fails with a non-transient error or\n    the retry limit is reached, the returned task will become faulted and the exception must be observed.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},{TState},System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution
  id: OnFirstExecution
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: OnFirstExecution()
  nameWithType: ExecutionStrategy.OnFirstExecution()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnFirstExecution()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnFirstExecution
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 264
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Method called before the first operation execution\n"
  example: []
  syntax:
    content: protected virtual void OnFirstExecution()
    content.vb: Protected Overridable Sub OnFirstExecution
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry
  id: OnRetry
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: OnRetry()
  nameWithType: ExecutionStrategy.OnRetry()
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.OnRetry()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OnRetry
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 279
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Method called before retrying the operation execution\n"
  example: []
  syntax:
    content: protected virtual void OnRetry()
    content.vb: Protected Overridable Sub OnRetry
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  id: GetNextDelay(System.Exception)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: GetNextDelay(Exception)
  nameWithType: ExecutionStrategy.GetNextDelay(Exception)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.GetNextDelay(System.Exception)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetNextDelay
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 291
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Determines whether the operation should be retried and the delay before the next attempt.\n"
  example: []
  syntax:
    content: protected virtual TimeSpan? GetNextDelay(Exception lastException)
    content.vb: Protected Overridable Function GetNextDelay(lastException As Exception) As TimeSpan?
    parameters:
    - id: lastException
      type: System.Exception
      description: The exception thrown during the last execution attempt.
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n    Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried;\n<code>null</code> otherwise\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  id: ShouldRetryOn(System.Exception)
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: ShouldRetryOn(Exception)
  nameWithType: ExecutionStrategy.ShouldRetryOn(Exception)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.ShouldRetryOn(System.Exception)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ShouldRetryOn
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 316
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Determines whether the specified exception represents a transient failure that can be compensated by a retry.\n"
  example: []
  syntax:
    content: protected abstract bool ShouldRetryOn(Exception exception)
    content.vb: Protected MustOverride Function ShouldRetryOn(exception As Exception) As Boolean
    parameters:
    - id: exception
      type: System.Exception
      description: The exception object to be verified.
    return:
      type: System.Boolean
      description: "\n<code>true</code> if the specified exception is considered as transient, otherwise <code>false</code>.\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  id: UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  langs:
  - csharp
  - vb
  name: UnwrapAndHandleException<T>(Exception, Func<Exception, T>)
  nameWithType: ExecutionStrategy.UnwrapAndHandleException<T>(Exception, Func<Exception, T>)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException<T>(System.Exception, System.Func<System.Exception, T>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UnwrapAndHandleException
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategy.cs
    startLine: 328
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Recursively gets InnerException from <em>exception</em> as long as it's an\n    exception created by Entity Framework and passes it to <em>exceptionHandler</em>\n"
  example: []
  syntax:
    content: public static T UnwrapAndHandleException<T>(Exception exception, Func<Exception, T> exceptionHandler)
    content.vb: Public Shared Function UnwrapAndHandleException(Of T)(exception As Exception, exceptionHandler As Func(Of Exception, T)) As T
    parameters:
    - id: exception
      type: System.Exception
      description: 'The exception to be unwrapped. '
    - id: exceptionHandler
      type: System.Func{System.Exception,{T}}
      description: 'A delegate that will be called with the unwrapped exception. '
    typeParameters:
    - id: T
      description: The type of the unwrapped exception.
    return:
      type: '{T}'
      description: "\n    The result from <em>exceptionHandler</em>.\n"
  nameWithType.vb: ExecutionStrategy.UnwrapAndHandleException(Of T)(Exception, Func(Of Exception, T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy.UnwrapAndHandleException(Of T)(System.Exception, System.Func(Of System.Exception, T))
  name.vb: UnwrapAndHandleException(Of T)(Exception, Func(Of Exception, T))
references:
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IExecutionStrategy
  nameWithType: IExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  name: Execute(Action)
  nameWithType: ExecutionStrategyExtensions.Execute(Action)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{{TResult}})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  name: Execute<TResult>(Func<TResult>)
  nameWithType: ExecutionStrategyExtensions.Execute<TResult>(Func<TResult>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>(System.Func<TResult>)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TResult)(Func(Of TResult))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)(System.Func(Of TResult))
  name.vb: Execute(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{``0})
    name: Execute<TResult>
    nameWithType: ExecutionStrategyExtensions.Execute<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{``0})
    name: Execute(Of TResult)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{{TState}},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  name: Execute<TState>(Action<TState>, TState)
  nameWithType: ExecutionStrategyExtensions.Execute<TState>(Action<TState>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>(System.Action<TState>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TState)(Action(Of TState), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)(System.Action(Of TState), TState)
  name.vb: Execute(Of TState)(Action(Of TState), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{``0},``0)
    name: Execute<TState>
    nameWithType: ExecutionStrategyExtensions.Execute<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{``0},``0)
    name: Execute(Of TState)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  name: ExecuteAsync(Func<Task>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Func<Task>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Func(Of Task))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func(Of System.Threading.Tasks.Task))
  name.vb: ExecuteAsync(Func(Of Task))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  name: ExecuteAsync(Func<CancellationToken, Task>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Func<CancellationToken, Task>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Func(Of CancellationToken, Task), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Func(Of CancellationToken, Task), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  name: ExecuteAsync<TResult>(Func<Task<TResult>>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(Func<Task<TResult>>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name: ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.Tasks.Task},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  name: ExecuteAsync<TState>(Func<TState, Task>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(Func<TState, Task>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(System.Func<TState, System.Threading.Tasks.Task>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Func(Of TState, Task), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(System.Func(Of TState, System.Threading.Tasks.Task), TState)
  name.vb: ExecuteAsync(Of TState)(Func(Of TState, Task), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task},{TState},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  name: ExecuteAsync<TState>(Func<TState, CancellationToken, Task>, TState, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(Func<TState, CancellationToken, Task>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task>, TState, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState)(Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{{TState},System.Threading.Tasks.Task{{TResult}}},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  name: ExecuteAsync<TState, TResult>(Func<TState, Task<TResult>>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(Func<TState, Task<TResult>>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.Tasks.Task<TResult>>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(Func(Of TState, Task(Of TResult)), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.Tasks.Task(Of TResult)), TState)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, Task(Of TResult)), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync<TState, TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  isExternal: true
  name: Execute(IExecutionStrategy, Action)
  nameWithType: ExecutionStrategyExtensions.Execute(IExecutionStrategy, Action)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Action)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  commentId: T:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: ExecutionStrategyExtensions
  nameWithType: ExecutionStrategyExtensions
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  isExternal: true
  name: Execute<TResult>(IExecutionStrategy, Func<TResult>)
  nameWithType: ExecutionStrategyExtensions.Execute<TResult>(IExecutionStrategy, Func<TResult>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TResult>)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TResult)(IExecutionStrategy, Func(Of TResult))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TResult))
  name.vb: Execute(Of TResult)(IExecutionStrategy, Func(Of TResult))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
    name: Execute<TResult>
    nameWithType: ExecutionStrategyExtensions.Execute<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
    name: Execute(Of TResult)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  isExternal: true
  name: Execute<TState>(IExecutionStrategy, Action<TState>, TState)
  nameWithType: ExecutionStrategyExtensions.Execute<TState>(IExecutionStrategy, Action<TState>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Action<TState>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TState)(IExecutionStrategy, Action(Of TState), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Action(Of TState), TState)
  name.vb: Execute(Of TState)(IExecutionStrategy, Action(Of TState), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
    name: Execute<TState>
    nameWithType: ExecutionStrategyExtensions.Execute<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
    name: Execute(Of TState)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  isExternal: true
  name: ExecuteAsync(IExecutionStrategy, Func<Task>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func<Task>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func(Of Task))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.Tasks.Task))
  name.vb: ExecuteAsync(IExecutionStrategy, Func(Of Task))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync(IExecutionStrategy, Func<CancellationToken, Task>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func<CancellationToken, Task>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func(Of CancellationToken, Task), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(IExecutionStrategy, Func(Of CancellationToken, Task), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  isExternal: true
  name: ExecuteAsync<TResult>(IExecutionStrategy, Func<Task<TResult>>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(IExecutionStrategy, Func<Task<TResult>>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of Task(Of TResult)))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of Task(Of TResult)))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync<TResult>(IExecutionStrategy, Func<CancellationToken, Task<TResult>>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(IExecutionStrategy, Func<CancellationToken, Task<TResult>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  isExternal: true
  name: ExecuteAsync<TState>(IExecutionStrategy, Func<TState, Task>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(IExecutionStrategy, Func<TState, Task>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TState, System.Threading.Tasks.Task>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, Task), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TState, System.Threading.Tasks.Task), TState)
  name.vb: ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, Task), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync<TState>(IExecutionStrategy, Func<TState, CancellationToken, Task>, TState, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(IExecutionStrategy, Func<TState, CancellationToken, Task>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task>, TState, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  isExternal: true
  name: ExecuteAsync<TState, TResult>(IExecutionStrategy, Func<TState, Task<TResult>>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(IExecutionStrategy, Func<TState, Task<TResult>>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TState, System.Threading.Tasks.Task<TResult>>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(IExecutionStrategy, Func(Of TState, Task(Of TResult)), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TState, System.Threading.Tasks.Task(Of TResult)), TState)
  name.vb: ExecuteAsync(Of TState, TResult)(IExecutionStrategy, Func(Of TState, Task(Of TResult)), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync<TState, TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ExecutionStrategy
  nameWithType: ExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ExecutionStrategyContext
  nameWithType: ExecutionStrategyContext
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
- uid: System.Collections.Generic.List{System.Exception}
  commentId: T:System.Collections.Generic.List{System.Exception}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Exception>
  nameWithType: List<Exception>
  fullName: System.Collections.Generic.List<System.Exception>
  nameWithType.vb: List(Of Exception)
  fullname.vb: System.Collections.Generic.List(Of System.Exception)
  name.vb: List(Of Exception)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Random
  commentId: T:System.Random
  parent: System
  isExternal: true
  name: Random
  nameWithType: Random
  fullName: System.Random
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<IExecutionStrategy>
  nameWithType: ILogger<IExecutionStrategy>
  fullName: Microsoft.Extensions.Logging.ILogger<Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy>
  nameWithType.vb: ILogger(Of IExecutionStrategy)
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy)
  name.vb: ILogger(Of IExecutionStrategy)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  isExternal: false
  name: RetriesOnFailure
  nameWithType: IExecutionStrategy.RetriesOnFailure
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{{TState},{TResult}},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  definition: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: IExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  nameWithType.vb: IExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute<TState, TResult>
    nameWithType: IExecutionStrategy.Execute<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute(Of TState, TResult)
    nameWithType: IExecutionStrategy.Execute(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TState},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TState, TResult>
  nameWithType: Func<TState, TResult>
  fullName: System.Func<TState, TResult>
  nameWithType.vb: Func(Of TState, TResult)
  fullname.vb: System.Func(Of TState, TResult)
  name.vb: Func(Of TState, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  isExternal: true
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: IExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  nameWithType.vb: IExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute<TState, TResult>
    nameWithType: IExecutionStrategy.Execute<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
    name: Execute(Of TState, TResult)
    nameWithType: IExecutionStrategy.Execute(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},{TState},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  definition: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  nameWithType.vb: IExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState, TResult>
    nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: IExecutionStrategy.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}}
  commentId: T:System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}}
  parent: System
  definition: System.Func`3
  name: Func<TState, CancellationToken, Task<TResult>>
  nameWithType: Func<TState, CancellationToken, Task<TResult>>
  fullName: System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of TState, CancellationToken, Task(Of TResult))
  fullname.vb: System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of TState, CancellationToken, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  nameWithType.vb: IExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState, TResult>
    nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: IExecutionStrategy.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Exception,{T}}
  commentId: T:System.Func{System.Exception,``0}
  parent: System
  definition: System.Func`2
  name: Func<Exception, T>
  nameWithType: Func<Exception, T>
  fullName: System.Func<System.Exception, T>
  nameWithType.vb: Func(Of Exception, T)
  fullname.vb: System.Func(Of System.Exception, T)
  name.vb: Func(Of Exception, T)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
