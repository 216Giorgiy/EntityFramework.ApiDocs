### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ModelExtensions
  commentId: T:Microsoft.EntityFrameworkCore.ModelExtensions
  id: ModelExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)
  - Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)
  - Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)
  langs:
  - csharp
  - vb
  name: ModelExtensions
  nameWithType: ModelExtensions
  fullName: Microsoft.EntityFrameworkCore.ModelExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ModelExtensions
    path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Extension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.IModel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class ModelExtensions
    content.vb: Public Module ModelExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)
  id: FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Type)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.ModelExtensions
  langs:
  - csharp
  - vb
  name: FindEntityType(IModel, Type)
  nameWithType: ModelExtensions.FindEntityType(IModel, Type)
  fullName: Microsoft.EntityFrameworkCore.ModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IModel, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindEntityType
    path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets the entity that maps the given entity class. Returns null if no entity type with the given name is found.\n"
  example: []
  syntax:
    content: public static IEntityType FindEntityType(this IModel model, Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindEntityType(model As IModel, type As Type) As IEntityType
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
      description: 'The model to find the entity type in. '
    - id: type
      type: System.Type
      description: 'The type of the entity class to find the type for. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
      description: 'The entity type, or null if none if found. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)
  commentId: M:Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)
  id: GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.ModelExtensions
  langs:
  - csharp
  - vb
  name: GetChangeTrackingStrategy(IModel)
  nameWithType: ModelExtensions.GetChangeTrackingStrategy(IModel)
  fullName: Microsoft.EntityFrameworkCore.ModelExtensions.GetChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetChangeTrackingStrategy
    path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
    startLine: 32
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets the default change tracking strategy being used for entities in the model. This strategy indicates how the\n    context detects changes to properties for an instance of an entity type.\n"
  example: []
  syntax:
    content: public static ChangeTrackingStrategy GetChangeTrackingStrategy(this IModel model)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetChangeTrackingStrategy(model As IModel) As ChangeTrackingStrategy
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
      description: 'The model to get the default change tracking strategy for. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
      description: 'The change tracking strategy. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)
  commentId: M:Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)
  id: GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.ModelExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyAccessMode(IModel)
  nameWithType: ModelExtensions.GetPropertyAccessMode(IModel)
  fullName: Microsoft.EntityFrameworkCore.ModelExtensions.GetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPropertyAccessMode
    path: src/Microsoft.EntityFrameworkCore/Extensions/ModelExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Gets the <xref href=\"Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode\" data-throw-if-not-resolved=\"false\"></xref> being used for properties of entity types in this model.\n    Null indicates that the default property access mode is being used.\n</p>\n<p>\n    Note that individual entity types can override this access mode, and individual properties of\n    entity types can override the access mode set on the entity type. The value returned here will\n    be used for any property for which no override has been specified.\n</p>\n"
  example: []
  syntax:
    content: public static PropertyAccessMode? GetPropertyAccessMode(this IModel model)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyAccessMode(model As IModel) As PropertyAccessMode?
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
      description: 'The model to get the access mode for. '
    return:
      type: System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
      description: 'The access mode being used, or null if the default access mode is being used. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.IModel
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IModel
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IModel
  nameWithType: IModel
  fullName: Microsoft.EntityFrameworkCore.Metadata.IModel
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: ChangeTrackingStrategy
  nameWithType: ChangeTrackingStrategy
  fullName: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
- uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: PropertyAccessMode
  nameWithType: PropertyAccessMode
  fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
- uid: System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
  commentId: T:System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
  parent: System
  definition: System.Nullable`1
  name: Nullable<PropertyAccessMode>
  nameWithType: Nullable<PropertyAccessMode>
  fullName: System.Nullable<Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode>
  nameWithType.vb: Nullable(Of PropertyAccessMode)
  fullname.vb: System.Nullable(Of Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  name.vb: Nullable(Of PropertyAccessMode)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
    name: PropertyAccessMode
    nameWithType: PropertyAccessMode
    fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
    name: PropertyAccessMode
    nameWithType: PropertyAccessMode
    fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
