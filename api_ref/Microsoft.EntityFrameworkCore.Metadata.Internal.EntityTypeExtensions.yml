### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  id: EntityTypeExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  children:
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  langs:
  - csharp
  - vb
  name: EntityTypeExtensions
  nameWithType: EntityTypeExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityTypeExtensions
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static class EntityTypeExtensions
    content.vb: Public Module EntityTypeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetAllBaseTypesInclusive(IEntityType)
  nameWithType: EntityTypeExtensions.GetAllBaseTypesInclusive(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetAllBaseTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAllBaseTypesInclusive
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 29
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEntityType> GetAllBaseTypesInclusive(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAllBaseTypesInclusive(entityType As IEntityType) As IEnumerable(Of IEntityType)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDirectlyDerivedTypes(IEntityType)
  nameWithType: EntityTypeExtensions.GetDirectlyDerivedTypes(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDirectlyDerivedTypes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDirectlyDerivedTypes
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEntityType> GetDirectlyDerivedTypes(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDirectlyDerivedTypes(entityType As IEntityType) As IEnumerable(Of IEntityType)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDerivedTypesInclusive(IEntityType)
  nameWithType: EntityTypeExtensions.GetDerivedTypesInclusive(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDerivedTypesInclusive(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDerivedTypesInclusive
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 65
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEntityType> GetDerivedTypesInclusive(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDerivedTypesInclusive(entityType As IEntityType) As IEnumerable(Of IEntityType)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: UseEagerSnapshots(IEntityType)
  nameWithType: EntityTypeExtensions.UseEagerSnapshots(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.UseEagerSnapshots(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UseEagerSnapshots
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool UseEagerSnapshots(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseEagerSnapshots(entityType As IEntityType) As Boolean
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: StoreGeneratedCount(IEntityType)
  nameWithType: EntityTypeExtensions.StoreGeneratedCount(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.StoreGeneratedCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: StoreGeneratedCount
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 84
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int StoreGeneratedCount(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StoreGeneratedCount(entityType As IEntityType) As Integer
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: RelationshipPropertyCount(IEntityType)
  nameWithType: EntityTypeExtensions.RelationshipPropertyCount(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.RelationshipPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationshipPropertyCount
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 91
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int RelationshipPropertyCount(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RelationshipPropertyCount(entityType As IEntityType) As Integer
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: OriginalValueCount(IEntityType)
  nameWithType: EntityTypeExtensions.OriginalValueCount(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.OriginalValueCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OriginalValueCount
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 98
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int OriginalValueCount(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OriginalValueCount(entityType As IEntityType) As Integer
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: ShadowPropertyCount(IEntityType)
  nameWithType: EntityTypeExtensions.ShadowPropertyCount(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ShadowPropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ShadowPropertyCount
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 105
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int ShadowPropertyCount(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ShadowPropertyCount(entityType As IEntityType) As Integer
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: NavigationCount(IEntityType)
  nameWithType: EntityTypeExtensions.NavigationCount(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.NavigationCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NavigationCount
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 112
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int NavigationCount(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NavigationCount(entityType As IEntityType) As Integer
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: PropertyCount(IEntityType)
  nameWithType: EntityTypeExtensions.PropertyCount(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.PropertyCount(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyCount
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 119
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int PropertyCount(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function PropertyCount(entityType As IEntityType) As Integer
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetCounts(IEntityType)
  nameWithType: EntityTypeExtensions.GetCounts(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCounts
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 126
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static PropertyCounts GetCounts(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCounts(entityType As IEntityType) As PropertyCounts
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: CalculateCounts(IEntityType)
  nameWithType: EntityTypeExtensions.CalculateCounts(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CalculateCounts(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CalculateCounts
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 133
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static PropertyCounts CalculateCounts(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CalculateCounts(entityType As IEntityType) As PropertyCounts
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetRelationshipSnapshotFactory(IEntityType)
  nameWithType: EntityTypeExtensions.GetRelationshipSnapshotFactory(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetRelationshipSnapshotFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetRelationshipSnapshotFactory
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 171
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Func<InternalEntityEntry, ISnapshot> GetRelationshipSnapshotFactory(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRelationshipSnapshotFactory(entityType As IEntityType) As Func(Of InternalEntityEntry, ISnapshot)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetOriginalValuesFactory(IEntityType)
  nameWithType: EntityTypeExtensions.GetOriginalValuesFactory(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetOriginalValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOriginalValuesFactory
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 178
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Func<InternalEntityEntry, ISnapshot> GetOriginalValuesFactory(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOriginalValuesFactory(entityType As IEntityType) As Func(Of InternalEntityEntry, ISnapshot)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetShadowValuesFactory(IEntityType)
  nameWithType: EntityTypeExtensions.GetShadowValuesFactory(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetShadowValuesFactory
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 185
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Func<ValueBuffer, ISnapshot> GetShadowValuesFactory(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetShadowValuesFactory(entityType As IEntityType) As Func(Of ValueBuffer, ISnapshot)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetEmptyShadowValuesFactory(IEntityType)
  nameWithType: EntityTypeExtensions.GetEmptyShadowValuesFactory(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetEmptyShadowValuesFactory(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetEmptyShadowValuesFactory
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 192
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Func<ISnapshot> GetEmptyShadowValuesFactory(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEmptyShadowValuesFactory(entityType As IEntityType) As Func(Of ISnapshot)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetConcreteTypesInHierarchy(IEntityType)
  nameWithType: EntityTypeExtensions.GetConcreteTypesInHierarchy(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetConcreteTypesInHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetConcreteTypesInHierarchy
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 199
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEntityType> GetConcreteTypesInHierarchy(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetConcreteTypesInHierarchy(entityType As IEntityType) As IEnumerable(Of IEntityType)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: IsSameHierarchy(IEntityType, IEntityType)
  nameWithType: EntityTypeExtensions.IsSameHierarchy(IEntityType, IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.IsSameHierarchy(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsSameHierarchy
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 206
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool IsSameHierarchy(this IEntityType firstEntityType, IEntityType secondEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSameHierarchy(firstEntityType As IEntityType, secondEntityType As IEntityType) As Boolean
    parameters:
    - id: firstEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: secondEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)
  id: LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: LeastDerivedType(EntityType, EntityType)
  nameWithType: EntityTypeExtensions.LeastDerivedType(EntityType, EntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.LeastDerivedType(Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType, Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: LeastDerivedType
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 214
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static EntityType LeastDerivedType(this EntityType entityType, EntityType otherEntityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LeastDerivedType(entityType As EntityType, otherEntityType As EntityType) As EntityType
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
    - id: otherEntityType
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindDeclaredPrimaryKey(IEntityType)
  nameWithType: EntityTypeExtensions.FindDeclaredPrimaryKey(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDeclaredPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindDeclaredPrimaryKey
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 221
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IKey FindDeclaredPrimaryKey(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindDeclaredPrimaryKey(entityType As IEntityType) As IKey
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IKey
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDeclaredKeys(IEntityType)
  nameWithType: EntityTypeExtensions.GetDeclaredKeys(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeclaredKeys
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 228
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IKey> GetDeclaredKeys(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDeclaredKeys(entityType As IEntityType) As IEnumerable(Of IKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IKey}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDeclaredForeignKeys(IEntityType)
  nameWithType: EntityTypeExtensions.GetDeclaredForeignKeys(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeclaredForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 235
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IForeignKey> GetDeclaredForeignKeys(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDeclaredForeignKeys(entityType As IEntityType) As IEnumerable(Of IForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDeclaredNavigations(IEntityType)
  nameWithType: EntityTypeExtensions.GetDeclaredNavigations(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeclaredNavigations
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 242
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<INavigation> GetDeclaredNavigations(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDeclaredNavigations(entityType As IEntityType) As IEnumerable(Of INavigation)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDeclaredReferencingForeignKeys(IEntityType)
  nameWithType: EntityTypeExtensions.GetDeclaredReferencingForeignKeys(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeclaredReferencingForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 253
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IForeignKey> GetDeclaredReferencingForeignKeys(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDeclaredReferencingForeignKeys(entityType As IEntityType) As IEnumerable(Of IForeignKey)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  id: FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindDerivedNavigations(IEntityType, String)
  nameWithType: EntityTypeExtensions.FindDerivedNavigations(IEntityType, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindDerivedNavigations
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 261
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<INavigation> FindDerivedNavigations(this IEntityType entityType, string navigationName)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindDerivedNavigations(entityType As IEntityType, navigationName As String) As IEnumerable(Of INavigation)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: navigationName
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDeclaredProperties(IEntityType)
  nameWithType: EntityTypeExtensions.GetDeclaredProperties(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeclaredProperties
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 270
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IProperty> GetDeclaredProperties(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDeclaredProperties(entityType As IEntityType) As IEnumerable(Of IProperty)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  id: FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: FindDerivedProperties(IEntityType, String)
  nameWithType: EntityTypeExtensions.FindDerivedProperties(IEntityType, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.FindDerivedProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindDerivedProperties
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 277
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IProperty> FindDerivedProperties(this IEntityType entityType, string propertyName)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindDerivedProperties(entityType As IEntityType, propertyName As String) As IEnumerable(Of IProperty)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: propertyName
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetPropertiesAndNavigations(IEntityType)
  nameWithType: EntityTypeExtensions.GetPropertiesAndNavigations(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetPropertiesAndNavigations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPropertiesAndNavigations
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 286
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IPropertyBase> GetPropertiesAndNavigations(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertiesAndNavigations(entityType As IEntityType) As IEnumerable(Of IPropertyBase)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  id: GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetDeclaredIndexes(IEntityType)
  nameWithType: EntityTypeExtensions.GetDeclaredIndexes(IEntityType)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetDeclaredIndexes(Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDeclaredIndexes
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 294
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IIndex> GetDeclaredIndexes(this IEntityType entityType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDeclaredIndexes(entityType As IEntityType) As IEnumerable(Of IIndex)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IIndex}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  id: CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: CheckChangeTrackingStrategy(IEntityType, ChangeTrackingStrategy)
  nameWithType: EntityTypeExtensions.CheckChangeTrackingStrategy(IEntityType, ChangeTrackingStrategy)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CheckChangeTrackingStrategy
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 301
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static string CheckChangeTrackingStrategy(this IEntityType entityType, ChangeTrackingStrategy value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CheckChangeTrackingStrategy(entityType As IEntityType, value As ChangeTrackingStrategy) As String
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: value
      type: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  id: GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetNotificationProperties(IEntityType, String)
  nameWithType: EntityTypeExtensions.GetNotificationProperties(IEntityType, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetNotificationProperties(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetNotificationProperties
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 326
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IPropertyBase> GetNotificationProperties(this IEntityType entityType, string propertyName)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetNotificationProperties(entityType As IEntityType, propertyName As String) As IEnumerable(Of IPropertyBase)
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: propertyName
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean,System.String)
  id: ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: ToDebugString(IEntityType, Boolean, String)
  nameWithType: EntityTypeExtensions.ToDebugString(IEntityType, Boolean, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToDebugString
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 356
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static string ToDebugString(this IEntityType entityType, bool singleLine = true, string indent = "")
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDebugString(entityType As IEntityType, singleLine As Boolean = True, indent As String = "") As String
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: singleLine
      type: System.Boolean
    - id: indent
      type: System.String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  id: GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: GetProperty(IEntityType, String)
  nameWithType: EntityTypeExtensions.GetProperty(IEntityType, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.GetProperty(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetProperty
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 429
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IProperty GetProperty(this IEntityType entityType, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperty(entityType As IEntityType, name As String) As IProperty
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: name
      type: System.String
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: CheckPropertyBelongsToType(IEntityType, IProperty)
  nameWithType: EntityTypeExtensions.CheckPropertyBelongsToType(IEntityType, IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.CheckPropertyBelongsToType(Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CheckPropertyBelongsToType
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 451
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IProperty CheckPropertyBelongsToType(this IEntityType entityType, IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CheckPropertyBelongsToType(entityType As IEntityType, property As IProperty) As IProperty
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  id: AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions
  langs:
  - csharp
  - vb
  name: AsEntityType(IEntityType, String)
  nameWithType: EntityTypeExtensions.AsEntityType(IEntityType, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions.AsEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AsEntityType
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/EntityTypeExtensions.cs
    startLine: 468
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static EntityType AsEntityType(this IEntityType entityType, string methodName = "")
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEntityType(entityType As IEntityType, methodName As String = "") As EntityType
    parameters:
    - id: entityType
      type: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    - id: methodName
      type: System.String
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IEntityType
  nameWithType: IEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEntityType>
  nameWithType: IEnumerable<IEntityType>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IEntityType>
  nameWithType.vb: IEnumerable(Of IEntityType)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  name.vb: IEnumerable(Of IEntityType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: PropertyCounts
  nameWithType: PropertyCounts
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts
- uid: System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  parent: System
  definition: System.Func`2
  name: Func<InternalEntityEntry, ISnapshot>
  nameWithType: Func<InternalEntityEntry, ISnapshot>
  fullName: System.Func<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot>
  nameWithType.vb: Func(Of InternalEntityEntry, ISnapshot)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot)
  name.vb: Func(Of InternalEntityEntry, ISnapshot)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
    name: ISnapshot
    nameWithType: ISnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
    name: InternalEntityEntry
    nameWithType: InternalEntityEntry
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
    name: ISnapshot
    nameWithType: ISnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  parent: System
  definition: System.Func`2
  name: Func<ValueBuffer, ISnapshot>
  nameWithType: Func<ValueBuffer, ISnapshot>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Storage.ValueBuffer, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot>
  nameWithType.vb: Func(Of ValueBuffer, ISnapshot)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Storage.ValueBuffer, Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot)
  name.vb: Func(Of ValueBuffer, ISnapshot)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
    name: ISnapshot
    nameWithType: ISnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
    name: ISnapshot
    nameWithType: ISnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot}
  parent: System
  definition: System.Func`1
  name: Func<ISnapshot>
  nameWithType: Func<ISnapshot>
  fullName: System.Func<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot>
  nameWithType.vb: Func(Of ISnapshot)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot)
  name.vb: Func(Of ISnapshot)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
    name: ISnapshot
    nameWithType: ISnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
    name: ISnapshot
    nameWithType: ISnapshot
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: EntityType
  nameWithType: EntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType
- uid: Microsoft.EntityFrameworkCore.Metadata.IKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IKey
  nameWithType: IKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IKey}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IKey>
  nameWithType: IEnumerable<IKey>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IKey>
  nameWithType.vb: IEnumerable(Of IKey)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IKey)
  name.vb: IEnumerable(Of IKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IKey
    name: IKey
    nameWithType: IKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IForeignKey>
  nameWithType: IEnumerable<IForeignKey>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>
  nameWithType.vb: IEnumerable(Of IForeignKey)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  name.vb: IEnumerable(Of IForeignKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<INavigation>
  nameWithType: IEnumerable<INavigation>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.INavigation>
  nameWithType.vb: IEnumerable(Of INavigation)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.INavigation)
  name.vb: IEnumerable(Of INavigation)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IProperty>
  nameWithType: IEnumerable<IProperty>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IProperty>
  nameWithType.vb: IEnumerable(Of IProperty)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IProperty)
  name.vb: IEnumerable(Of IProperty)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IPropertyBase}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IPropertyBase>
  nameWithType: IEnumerable<IPropertyBase>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IPropertyBase>
  nameWithType.vb: IEnumerable(Of IPropertyBase)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)
  name.vb: IEnumerable(Of IPropertyBase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
    name: IPropertyBase
    nameWithType: IPropertyBase
    fullName: Microsoft.EntityFrameworkCore.Metadata.IPropertyBase
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IIndex}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IIndex}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IIndex>
  nameWithType: IEnumerable<IIndex>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IIndex>
  nameWithType.vb: IEnumerable(Of IIndex)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IIndex)
  name.vb: IEnumerable(Of IIndex)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IIndex
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.EntityFrameworkCore.Metadata.IIndex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IIndex
    name: IIndex
    nameWithType: IIndex
    fullName: Microsoft.EntityFrameworkCore.Metadata.IIndex
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: ChangeTrackingStrategy
  nameWithType: ChangeTrackingStrategy
  fullName: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
- uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IProperty
  nameWithType: IProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
