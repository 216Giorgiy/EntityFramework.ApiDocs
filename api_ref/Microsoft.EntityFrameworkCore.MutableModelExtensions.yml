### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.MutableModelExtensions
  commentId: T:Microsoft.EntityFrameworkCore.MutableModelExtensions
  id: MutableModelExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  - Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)
  - Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  - Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  - Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  langs:
  - csharp
  - vb
  name: MutableModelExtensions
  nameWithType: MutableModelExtensions
  fullName: Microsoft.EntityFrameworkCore.MutableModelExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MutableModelExtensions
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Extension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.IMutableModel\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class MutableModelExtensions
    content.vb: Public Module MutableModelExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  id: FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableModelExtensions
  langs:
  - csharp
  - vb
  name: FindEntityType(IMutableModel, Type)
  nameWithType: MutableModelExtensions.FindEntityType(IMutableModel, Type)
  fullName: Microsoft.EntityFrameworkCore.MutableModelExtensions.FindEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindEntityType
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets the entity that maps the given entity class. Returns null if no entity type with the given name is found.\n"
  example: []
  syntax:
    content: public static IMutableEntityType FindEntityType(this IMutableModel model, Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindEntityType(model As IMutableModel, type As Type) As IMutableEntityType
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
      description: 'The model to find the entity type in. '
    - id: type
      type: System.Type
      description: 'The type of the entity class to find the type for. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type, or null if none if found. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)
  id: GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableModelExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddEntityType(IMutableModel, String)
  nameWithType: MutableModelExtensions.GetOrAddEntityType(IMutableModel, String)
  fullName: Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddEntityType
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
    startLine: 33
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets the entity type with the given name or adds a new entity type if none is found.\n"
  example: []
  syntax:
    content: public static IMutableEntityType GetOrAddEntityType(this IMutableModel model, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddEntityType(model As IMutableModel, name As String) As IMutableEntityType
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
      description: 'The model to find or add the entity type to. '
    - id: name
      type: System.String
      description: 'The name of the entity type. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The existing or newly created entity type. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  id: GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableModelExtensions
  langs:
  - csharp
  - vb
  name: GetOrAddEntityType(IMutableModel, Type)
  nameWithType: MutableModelExtensions.GetOrAddEntityType(IMutableModel, Type)
  fullName: Microsoft.EntityFrameworkCore.MutableModelExtensions.GetOrAddEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddEntityType
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
    startLine: 42
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets the entity type with the given .NET type or adds a new entity type if none is found.\n"
  example: []
  syntax:
    content: public static IMutableEntityType GetOrAddEntityType(this IMutableModel model, Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOrAddEntityType(model As IMutableModel, type As Type) As IMutableEntityType
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
      description: 'The model to find or add the entity type to. '
    - id: type
      type: System.Type
      description: 'The .NET type of the entity type. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The existing or newly created entity type. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  id: RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Type)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableModelExtensions
  langs:
  - csharp
  - vb
  name: RemoveEntityType(IMutableModel, Type)
  nameWithType: MutableModelExtensions.RemoveEntityType(IMutableModel, Type)
  fullName: Microsoft.EntityFrameworkCore.MutableModelExtensions.RemoveEntityType(Microsoft.EntityFrameworkCore.Metadata.IMutableModel, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RemoveEntityType
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
    startLine: 51
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Removes an entity type from the model.\n"
  example: []
  syntax:
    content: public static IMutableEntityType RemoveEntityType(this IMutableModel model, Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveEntityType(model As IMutableModel, type As Type) As IMutableEntityType
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
      description: 'The model to remove the entity type from. '
    - id: type
      type: System.Type
      description: 'The entity type to be removed. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
      description: 'The entity type that was removed. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  commentId: M:Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  id: SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutableModelExtensions
  langs:
  - csharp
  - vb
  name: SetPropertyAccessMode(IMutableModel, Nullable<PropertyAccessMode>)
  nameWithType: MutableModelExtensions.SetPropertyAccessMode(IMutableModel, Nullable<PropertyAccessMode>)
  fullName: Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel, System.Nullable<Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetPropertyAccessMode
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutableModelExtensions.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Sets the <xref href=\"Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode\" data-throw-if-not-resolved=\"false\"></xref> to use for properties of all entity types\n    in this model.\n</p>\n<p>\n    Note that individual entity types can override this access mode, and individual properties of\n    entity types can override the access mode set on the entity type. The value set here will\n    be used for any property for which no override has been specified.\n</p>\n"
  example: []
  syntax:
    content: public static void SetPropertyAccessMode(this IMutableModel model, PropertyAccessMode? propertyAccessMode)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPropertyAccessMode(model As IMutableModel, propertyAccessMode As PropertyAccessMode?)
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
      description: 'The model to set the access mode for. '
    - id: propertyAccessMode
      type: System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
      description: The <xref href="Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode" data-throw-if-not-resolved="false"></xref>, or null to clear the mode set.
  nameWithType.vb: MutableModelExtensions.SetPropertyAccessMode(IMutableModel, Nullable(Of PropertyAccessMode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutableModelExtensions.SetPropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.IMutableModel, System.Nullable(Of Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode))
  name.vb: SetPropertyAccessMode(IMutableModel, Nullable(Of PropertyAccessMode))
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableModel
  nameWithType: IMutableModel
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableModel
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableEntityType
  nameWithType: IMutableEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: PropertyAccessMode
  nameWithType: PropertyAccessMode
  fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
- uid: System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
  commentId: T:System.Nullable{Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode}
  parent: System
  definition: System.Nullable`1
  name: Nullable<PropertyAccessMode>
  nameWithType: Nullable<PropertyAccessMode>
  fullName: System.Nullable<Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode>
  nameWithType.vb: Nullable(Of PropertyAccessMode)
  fullname.vb: System.Nullable(Of Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  name.vb: Nullable(Of PropertyAccessMode)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
    name: PropertyAccessMode
    nameWithType: PropertyAccessMode
    fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
    name: PropertyAccessMode
    nameWithType: PropertyAccessMode
    fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
