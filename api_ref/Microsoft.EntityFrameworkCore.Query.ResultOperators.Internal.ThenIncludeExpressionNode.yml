### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  commentId: T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  id: ThenIncludeExpressionNode
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.ApplyNodeSpecificSemantics(QueryModel,ClauseGenerationContext)
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.CreateResultOperator(ClauseGenerationContext)
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.SupportedMethods
  langs:
  - csharp
  - vb
  name: ThenIncludeExpressionNode
  nameWithType: ThenIncludeExpressionNode
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ThenIncludeExpressionNode
    path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class ThenIncludeExpressionNode : ResultOperatorExpressionNodeBase'
    content.vb: >-
      Public Class ThenIncludeExpressionNode
          Inherits ResultOperatorExpressionNodeBase
  inheritance:
  - System.Object
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.SupportedMethods
  commentId: F:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.SupportedMethods
  id: SupportedMethods
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  langs:
  - csharp
  - vb
  name: SupportedMethods
  nameWithType: ThenIncludeExpressionNode.SupportedMethods
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.SupportedMethods
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: SupportedMethods
    path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static readonly IReadOnlyCollection<MethodInfo> SupportedMethods
    content.vb: Public Shared ReadOnly SupportedMethods As IReadOnlyCollection(Of MethodInfo)
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.Reflection.MethodInfo}
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)
  id: '#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.LambdaExpression)'
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  langs:
  - csharp
  - vb
  name: ThenIncludeExpressionNode(MethodCallExpressionParseInfo, LambdaExpression)
  nameWithType: ThenIncludeExpressionNode.ThenIncludeExpressionNode(MethodCallExpressionParseInfo, LambdaExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.ThenIncludeExpressionNode(MethodCallExpressionParseInfo, System.Linq.Expressions.LambdaExpression)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
    startLine: 36
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public ThenIncludeExpressionNode(MethodCallExpressionParseInfo parseInfo, LambdaExpression navigationPropertyPathLambda)
    content.vb: Public Sub New(parseInfo As MethodCallExpressionParseInfo, navigationPropertyPathLambda As LambdaExpression)
    parameters:
    - id: parseInfo
      type: MethodCallExpressionParseInfo
    - id: navigationPropertyPathLambda
      type: System.Linq.Expressions.LambdaExpression
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.ApplyNodeSpecificSemantics(QueryModel,ClauseGenerationContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.ApplyNodeSpecificSemantics(QueryModel,ClauseGenerationContext)
  id: ApplyNodeSpecificSemantics(QueryModel,ClauseGenerationContext)
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  langs:
  - csharp
  - vb
  name: ApplyNodeSpecificSemantics(QueryModel, ClauseGenerationContext)
  nameWithType: ThenIncludeExpressionNode.ApplyNodeSpecificSemantics(QueryModel, ClauseGenerationContext)
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.ApplyNodeSpecificSemantics(QueryModel, ClauseGenerationContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ApplyNodeSpecificSemantics
    path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
    startLine: 48
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected override void ApplyNodeSpecificSemantics(QueryModel queryModel, ClauseGenerationContext clauseGenerationContext)
    content.vb: Protected Overrides Sub ApplyNodeSpecificSemantics(queryModel As QueryModel, clauseGenerationContext As ClauseGenerationContext)
    parameters:
    - id: queryModel
      type: QueryModel
    - id: clauseGenerationContext
      type: ClauseGenerationContext
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.CreateResultOperator(ClauseGenerationContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.CreateResultOperator(ClauseGenerationContext)
  id: CreateResultOperator(ClauseGenerationContext)
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  langs:
  - csharp
  - vb
  name: CreateResultOperator(ClauseGenerationContext)
  nameWithType: ThenIncludeExpressionNode.CreateResultOperator(ClauseGenerationContext)
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.CreateResultOperator(ClauseGenerationContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CreateResultOperator
    path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
    startLine: 64
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected override ResultOperatorBase CreateResultOperator(ClauseGenerationContext clauseGenerationContext)
    content.vb: Protected Overrides Function CreateResultOperator(clauseGenerationContext As ClauseGenerationContext) As ResultOperatorBase
    parameters:
    - id: clauseGenerationContext
      type: ClauseGenerationContext
    return:
      type: ResultOperatorBase
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  id: Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode
  langs:
  - csharp
  - vb
  name: Resolve(ParameterExpression, Expression, ClauseGenerationContext)
  nameWithType: ThenIncludeExpressionNode.Resolve(ParameterExpression, Expression, ClauseGenerationContext)
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, ClauseGenerationContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Resolve
    path: src/Microsoft.EntityFrameworkCore/Query/ResultOperators/Internal/ThenIncludeExpressionNode.cs
    startLine: 71
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override Expression Resolve(ParameterExpression inputParameter, Expression expressionToBeResolved, ClauseGenerationContext clauseGenerationContext)
    content.vb: Public Overrides Function Resolve(inputParameter As ParameterExpression, expressionToBeResolved As Expression, clauseGenerationContext As ClauseGenerationContext) As Expression
    parameters:
    - id: inputParameter
      type: System.Linq.Expressions.ParameterExpression
    - id: expressionToBeResolved
      type: System.Linq.Expressions.Expression
    - id: clauseGenerationContext
      type: ClauseGenerationContext
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<ThenIncludeExpressionNode, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<ThenIncludeExpressionNode, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of ThenIncludeExpressionNode, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of ThenIncludeExpressionNode, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<ThenIncludeExpressionNode, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<ThenIncludeExpressionNode, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of ThenIncludeExpressionNode, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of ThenIncludeExpressionNode, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.ThenIncludeExpressionNode, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Collections.Generic.IReadOnlyCollection{System.Reflection.MethodInfo}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Reflection.MethodInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<MethodInfo>
  nameWithType: IReadOnlyCollection<MethodInfo>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Reflection.MethodInfo>
  nameWithType.vb: IReadOnlyCollection(Of MethodInfo)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Reflection.MethodInfo)
  name.vb: IReadOnlyCollection(Of MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: MethodCallExpressionParseInfo
  isExternal: true
  name: MethodCallExpressionParseInfo
  nameWithType: MethodCallExpressionParseInfo
  fullName: MethodCallExpressionParseInfo
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: QueryModel
  isExternal: true
  name: QueryModel
  nameWithType: QueryModel
  fullName: QueryModel
- uid: ClauseGenerationContext
  isExternal: true
  name: ClauseGenerationContext
  nameWithType: ClauseGenerationContext
  fullName: ClauseGenerationContext
- uid: ResultOperatorBase
  isExternal: true
  name: ResultOperatorBase
  nameWithType: ResultOperatorBase
  fullName: ResultOperatorBase
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
