### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  commentId: T:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  id: IConcurrencyDetector
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSection
  - Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSectionAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IConcurrencyDetector
  nameWithType: IConcurrencyDetector
  fullName: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/IConcurrencyDetector.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IConcurrencyDetector
    path: src/Microsoft.EntityFrameworkCore/Internal/IConcurrencyDetector.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public interface IConcurrencyDetector
    content.vb: Public Interface IConcurrencyDetector
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSection
  commentId: M:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSection
  id: EnterCriticalSection
  parent: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  langs:
  - csharp
  - vb
  name: EnterCriticalSection()
  nameWithType: IConcurrencyDetector.EnterCriticalSection()
  fullName: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSection()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/IConcurrencyDetector.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnterCriticalSection
    path: src/Microsoft.EntityFrameworkCore/Internal/IConcurrencyDetector.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: IDisposable EnterCriticalSection()
    content.vb: Function EnterCriticalSection As IDisposable
    return:
      type: System.IDisposable
- uid: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSectionAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSectionAsync(System.Threading.CancellationToken)
  id: EnterCriticalSectionAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  langs:
  - csharp
  - vb
  name: EnterCriticalSectionAsync(CancellationToken)
  nameWithType: IConcurrencyDetector.EnterCriticalSectionAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector.EnterCriticalSectionAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/IConcurrencyDetector.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnterCriticalSectionAsync
    path: src/Microsoft.EntityFrameworkCore/Internal/IConcurrencyDetector.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: Task<IDisposable> EnterCriticalSectionAsync(CancellationToken cancellationToken)
    content.vb: Function EnterCriticalSectionAsync(cancellationToken As CancellationToken) As Task(Of IDisposable)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.IDisposable}
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.IDisposable}
  commentId: T:System.Threading.Tasks.Task{System.IDisposable}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDisposable>
  nameWithType: Task<IDisposable>
  fullName: System.Threading.Tasks.Task<System.IDisposable>
  nameWithType.vb: Task(Of IDisposable)
  fullname.vb: System.Threading.Tasks.Task(Of System.IDisposable)
  name.vb: Task(Of IDisposable)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IDisposable
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
