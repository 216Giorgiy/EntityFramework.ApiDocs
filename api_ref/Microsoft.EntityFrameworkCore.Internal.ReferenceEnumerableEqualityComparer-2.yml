### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2
  commentId: T:Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2
  id: ReferenceEnumerableEqualityComparer`2
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.Equals(`0,`0)
  - Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.GetHashCode(`0)
  langs:
  - csharp
  - vb
  name: ReferenceEnumerableEqualityComparer<TEnumerable, TValue>
  nameWithType: ReferenceEnumerableEqualityComparer<TEnumerable, TValue>
  fullName: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer<TEnumerable, TValue>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/ReferenceEnumerableEqualityComparer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ReferenceEnumerableEqualityComparer
    path: src/Microsoft.EntityFrameworkCore/Internal/ReferenceEnumerableEqualityComparer.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public sealed class ReferenceEnumerableEqualityComparer<TEnumerable, TValue> : IEqualityComparer<TEnumerable> where TEnumerable : IEnumerable<TValue>'
    content.vb: >-
      Public NotInheritable Class ReferenceEnumerableEqualityComparer(Of TEnumerable As IEnumerable(Of TValue), TValue)
          Implements IEqualityComparer(Of TEnumerable)
    typeParameters:
    - id: TEnumerable
    - id: TValue
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEqualityComparer{{TEnumerable}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ReferenceEnumerableEqualityComparer(Of TEnumerable, TValue)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer(Of TEnumerable, TValue)
  name.vb: ReferenceEnumerableEqualityComparer(Of TEnumerable, TValue)
- uid: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.Equals(`0,`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.Equals(`0,`0)
  id: Equals(`0,`0)
  parent: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2
  langs:
  - csharp
  - vb
  name: Equals(TEnumerable, TEnumerable)
  nameWithType: ReferenceEnumerableEqualityComparer<TEnumerable, TValue>.Equals(TEnumerable, TEnumerable)
  fullName: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer<TEnumerable, TValue>.Equals(TEnumerable, TEnumerable)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/ReferenceEnumerableEqualityComparer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Equals
    path: src/Microsoft.EntityFrameworkCore/Internal/ReferenceEnumerableEqualityComparer.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public bool Equals(TEnumerable x, TEnumerable y)
    content.vb: Public Function Equals(x As TEnumerable, y As TEnumerable) As Boolean
    parameters:
    - id: x
      type: '{TEnumerable}'
    - id: y
      type: '{TEnumerable}'
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.IEqualityComparer{{TEnumerable}}.Equals({TEnumerable},{TEnumerable})
  nameWithType.vb: ReferenceEnumerableEqualityComparer(Of TEnumerable, TValue).Equals(TEnumerable, TEnumerable)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer(Of TEnumerable, TValue).Equals(TEnumerable, TEnumerable)
- uid: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.GetHashCode(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2.GetHashCode(`0)
  id: GetHashCode(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2
  langs:
  - csharp
  - vb
  name: GetHashCode(TEnumerable)
  nameWithType: ReferenceEnumerableEqualityComparer<TEnumerable, TValue>.GetHashCode(TEnumerable)
  fullName: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer<TEnumerable, TValue>.GetHashCode(TEnumerable)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/ReferenceEnumerableEqualityComparer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetHashCode
    path: src/Microsoft.EntityFrameworkCore/Internal/ReferenceEnumerableEqualityComparer.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public int GetHashCode(TEnumerable obj)
    content.vb: Public Function GetHashCode(obj As TEnumerable) As Integer
    parameters:
    - id: obj
      type: '{TEnumerable}'
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.IEqualityComparer{{TEnumerable}}.GetHashCode({TEnumerable})
  nameWithType.vb: ReferenceEnumerableEqualityComparer(Of TEnumerable, TValue).GetHashCode(TEnumerable)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer(Of TEnumerable, TValue).GetHashCode(TEnumerable)
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEqualityComparer{{TEnumerable}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TEnumerable>
  nameWithType: IEqualityComparer<TEnumerable>
  fullName: System.Collections.Generic.IEqualityComparer<TEnumerable>
  nameWithType.vb: IEqualityComparer(Of TEnumerable)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TEnumerable)
  name.vb: IEqualityComparer(Of TEnumerable)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    nameWithType: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEqualityComparer{{TEnumerable}}.Equals({TEnumerable},{TEnumerable})
  commentId: M:System.Collections.Generic.IEqualityComparer{`0}.Equals(`0,`0)
  parent: System.Collections.Generic.IEqualityComparer{{TEnumerable}}
  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  name: Equals(TEnumerable, TEnumerable)
  nameWithType: IEqualityComparer<TEnumerable>.Equals(TEnumerable, TEnumerable)
  fullName: System.Collections.Generic.IEqualityComparer<TEnumerable>.Equals(TEnumerable, TEnumerable)
  nameWithType.vb: IEqualityComparer(Of TEnumerable).Equals(TEnumerable, TEnumerable)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TEnumerable).Equals(TEnumerable, TEnumerable)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<TEnumerable>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<TEnumerable>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of TEnumerable).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of TEnumerable).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEnumerable}'
  commentId: '!:TEnumerable'
  definition: TEnumerable
  name: TEnumerable
  nameWithType: TEnumerable
  fullName: TEnumerable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  isExternal: true
  name: Equals(T, T)
  nameWithType: IEqualityComparer<T>.Equals(T, T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)
  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer<T>.Equals
    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: Equals
    nameWithType: IEqualityComparer(Of T).Equals
    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TEnumerable
  isExternal: false
  name: TEnumerable
  nameWithType: TEnumerable
  fullName: TEnumerable
- uid: System.Collections.Generic.IEqualityComparer{{TEnumerable}}.GetHashCode({TEnumerable})
  commentId: M:System.Collections.Generic.IEqualityComparer{`0}.GetHashCode(`0)
  parent: System.Collections.Generic.IEqualityComparer{{TEnumerable}}
  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  name: GetHashCode(TEnumerable)
  nameWithType: IEqualityComparer<TEnumerable>.GetHashCode(TEnumerable)
  fullName: System.Collections.Generic.IEqualityComparer<TEnumerable>.GetHashCode(TEnumerable)
  nameWithType.vb: IEqualityComparer(Of TEnumerable).GetHashCode(TEnumerable)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TEnumerable).GetHashCode(TEnumerable)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<TEnumerable>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<TEnumerable>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of TEnumerable).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of TEnumerable).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TEnumerable
    nameWithType: TEnumerable
    fullName: TEnumerable
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  isExternal: true
  name: GetHashCode(T)
  nameWithType: IEqualityComparer<T>.GetHashCode(T)
  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)
  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer<T>.GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: GetHashCode
    nameWithType: IEqualityComparer(Of T).GetHashCode
    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
