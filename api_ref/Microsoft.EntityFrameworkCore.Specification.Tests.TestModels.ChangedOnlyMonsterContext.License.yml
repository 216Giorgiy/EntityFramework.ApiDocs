### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  id: ChangedOnlyMonsterContext.License
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  children:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.#ctor
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Driver
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.ExpirationDate
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseClass
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseNumber
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Name
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Restrictions
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.State
  langs:
  - csharp
  - vb
  name: ChangedOnlyMonsterContext.License
  nameWithType: ChangedOnlyMonsterContext.License
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: License
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 416
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: 'public class License : ChangedOnlyMonsterContext.NotificationEntity, ILicense'
    content.vb: >-
      Public Class License
          Inherits ChangedOnlyMonsterContext.NotificationEntity
          Implements ILicense
  inheritance:
  - System.Object
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  inheritedMembers:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.PropertyChanged
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1({T},{T}@,System.String)
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.#ctor
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.#ctor
  id: '#ctor'
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: License()
  nameWithType: ChangedOnlyMonsterContext.License.License()
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.License()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 426
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public License()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Name
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Name
  id: Name
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ChangedOnlyMonsterContext.License.Name
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Name
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 431
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseNumber
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseNumber
  id: LicenseNumber
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: LicenseNumber
  nameWithType: ChangedOnlyMonsterContext.License.LicenseNumber
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseNumber
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: LicenseNumber
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 437
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public string LicenseNumber { get; set; }
    content.vb: Public Property LicenseNumber As String
    parameters: []
    return:
      type: System.String
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseNumber
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseClass
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseClass
  id: LicenseClass
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: LicenseClass
  nameWithType: ChangedOnlyMonsterContext.License.LicenseClass
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.LicenseClass
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: LicenseClass
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 443
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public string LicenseClass { get; set; }
    content.vb: Public Property LicenseClass As String
    parameters: []
    return:
      type: System.String
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseClass
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Restrictions
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Restrictions
  id: Restrictions
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: Restrictions
  nameWithType: ChangedOnlyMonsterContext.License.Restrictions
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Restrictions
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Restrictions
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 449
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public string Restrictions { get; set; }
    content.vb: Public Property Restrictions As String
    parameters: []
    return:
      type: System.String
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Restrictions
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.ExpirationDate
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.ExpirationDate
  id: ExpirationDate
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: ExpirationDate
  nameWithType: ChangedOnlyMonsterContext.License.ExpirationDate
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.ExpirationDate
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExpirationDate
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 455
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public DateTime ExpirationDate { get; set; }
    content.vb: Public Property ExpirationDate As Date
    parameters: []
    return:
      type: System.DateTime
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.ExpirationDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.State
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.State
  id: State
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: State
  nameWithType: ChangedOnlyMonsterContext.License.State
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.State
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: State
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 461
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public LicenseState? State { get; set; }
    content.vb: Public Property State As LicenseState?
    parameters: []
    return:
      type: System.Nullable{Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState}
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.State
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Driver
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Driver
  id: Driver
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License
  langs:
  - csharp
  - vb
  name: Driver
  nameWithType: ChangedOnlyMonsterContext.License.Driver
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Driver
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Driver
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/TestModels/ChangedOnlyMonsterContext.cs
    startLine: 467
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  syntax:
    content: public virtual IDriver Driver { get; set; }
    content.vb: Public Overridable Property Driver As IDriver
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.IDriver
  implements:
  - Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Driver
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  commentId: N:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  nameWithType: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  isExternal: false
  name: ChangedOnlyMonsterContext.NotificationEntity
  nameWithType: ChangedOnlyMonsterContext.NotificationEntity
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  isExternal: false
  name: ILicense
  nameWithType: ILicense
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.PropertyChanged
  commentId: E:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.PropertyChanged
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity
  isExternal: false
  name: PropertyChanged
  nameWithType: ChangedOnlyMonsterContext.NotificationEntity.PropertyChanged
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.PropertyChanged
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1({T},{T}@,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity
  definition: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
  name: SetWithNotify<T>(T, T, String)
  nameWithType: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>(T, T, String)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>(T, T, System.String)
  nameWithType.vb: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)(T, T, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)(T, T, System.String)
  name.vb: SetWithNotify(Of T)(T, T, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
    name: SetWithNotify<T>
    nameWithType: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
    name: SetWithNotify(Of T)
    nameWithType: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<ChangedOnlyMonsterContext.License, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<ChangedOnlyMonsterContext.License, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of ChangedOnlyMonsterContext.License, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of ChangedOnlyMonsterContext.License, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<ChangedOnlyMonsterContext.License, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<ChangedOnlyMonsterContext.License, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of ChangedOnlyMonsterContext.License, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of ChangedOnlyMonsterContext.License, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.License, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
  isExternal: true
  name: SetWithNotify<T>(T, T, String)
  nameWithType: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>(T, T, String)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>(T, T, System.String)
  nameWithType.vb: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)(T, T, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)(T, T, System.String)
  name.vb: SetWithNotify(Of T)(T, T, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
    name: SetWithNotify<T>
    nameWithType: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify``1(``0,``0@,System.String)
    name: SetWithNotify(Of T)
    nameWithType: ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ChangedOnlyMonsterContext.NotificationEntity.SetWithNotify(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Name
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Name
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  isExternal: false
  name: Name
  nameWithType: ILicense.Name
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseNumber
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseNumber
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  isExternal: false
  name: LicenseNumber
  nameWithType: ILicense.LicenseNumber
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseNumber
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseClass
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseClass
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  isExternal: false
  name: LicenseClass
  nameWithType: ILicense.LicenseClass
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.LicenseClass
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Restrictions
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Restrictions
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  isExternal: false
  name: Restrictions
  nameWithType: ILicense.Restrictions
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Restrictions
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.ExpirationDate
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.ExpirationDate
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  isExternal: false
  name: ExpirationDate
  nameWithType: ILicense.ExpirationDate
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.ExpirationDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.State
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.State
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  isExternal: false
  name: State
  nameWithType: ILicense.State
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.State
- uid: System.Nullable{Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState}
  commentId: T:System.Nullable{Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState}
  parent: System
  definition: System.Nullable`1
  name: Nullable<LicenseState>
  nameWithType: Nullable<LicenseState>
  fullName: System.Nullable<Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState>
  nameWithType.vb: Nullable(Of LicenseState)
  fullname.vb: System.Nullable(Of Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState)
  name.vb: Nullable(Of LicenseState)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState
    name: LicenseState
    nameWithType: LicenseState
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState
    name: LicenseState
    nameWithType: LicenseState
    fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.LicenseState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Driver
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Driver
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense
  isExternal: false
  name: Driver
  nameWithType: ILicense.Driver
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.ILicense.Driver
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.IDriver
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.IDriver
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels
  isExternal: false
  name: IDriver
  nameWithType: IDriver
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.IDriver
