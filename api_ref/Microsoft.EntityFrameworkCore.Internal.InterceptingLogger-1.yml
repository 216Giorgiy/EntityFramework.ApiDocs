### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1
  commentId: T:Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1
  id: InterceptingLogger`1
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbContextServices,System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)
  - Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.BeginScope``1(``0)
  - Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.IsEnabled(System.LogLevel)
  - Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  langs:
  - csharp
  - vb
  name: InterceptingLogger<T>
  nameWithType: InterceptingLogger<T>
  fullName: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger<T>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: InterceptingLogger
    path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class InterceptingLogger<T> : ILogger<T>'
    content.vb: >-
      Public Class InterceptingLogger(Of T)
          Inherits ILogger(Of T)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  nameWithType.vb: InterceptingLogger(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger(Of T)
  name.vb: InterceptingLogger(Of T)
- uid: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbContextServices,System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.#ctor(Microsoft.EntityFrameworkCore.Internal.IDbContextServices,System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)
  id: '#ctor(Microsoft.EntityFrameworkCore.Internal.IDbContextServices,System.IServiceProvider,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)'
  parent: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1
  langs:
  - csharp
  - vb
  name: InterceptingLogger(IDbContextServices, IServiceProvider, IDbContextOptions)
  nameWithType: InterceptingLogger<T>.InterceptingLogger(IDbContextServices, IServiceProvider, IDbContextOptions)
  fullName: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger<T>.InterceptingLogger(Microsoft.EntityFrameworkCore.Internal.IDbContextServices, System.IServiceProvider, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
    startLine: 26
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public InterceptingLogger(IDbContextServices contextServices, IServiceProvider serviceProvider, IDbContextOptions contextOptions)
    content.vb: Public Sub New(contextServices As IDbContextServices, serviceProvider As IServiceProvider, contextOptions As IDbContextOptions)
    parameters:
    - id: contextServices
      type: Microsoft.EntityFrameworkCore.Internal.IDbContextServices
    - id: serviceProvider
      type: System.IServiceProvider
    - id: contextOptions
      type: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  nameWithType.vb: InterceptingLogger(Of T).InterceptingLogger(IDbContextServices, IServiceProvider, IDbContextOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger(Of T).InterceptingLogger(Microsoft.EntityFrameworkCore.Internal.IDbContextServices, System.IServiceProvider, Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)
- uid: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  id: Log``1(System.LogLevel,EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})
  parent: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1
  langs:
  - csharp
  - vb
  name: Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  nameWithType: InterceptingLogger<T>.Log<TState>(LogLevel, EventId, TState, Exception, Func<TState, Exception, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger<T>.Log<TState>(System.LogLevel, EventId, TState, System.Exception, System.Func<TState, System.Exception, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Log
    path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
    startLine: 45
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
    content.vb: Public Overridable Sub Log(Of TState)(logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))
    parameters:
    - id: logLevel
      type: System.LogLevel
    - id: eventId
      type: EventId
    - id: state
      type: '{TState}'
    - id: exception
      type: System.Exception
    - id: formatter
      type: System.Func{{TState},System.Exception,System.String}
    typeParameters:
    - id: TState
  nameWithType.vb: InterceptingLogger(Of T).Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger(Of T).Log(Of TState)(System.LogLevel, EventId, TState, System.Exception, System.Func(Of TState, System.Exception, System.String))
  name.vb: Log(Of TState)(LogLevel, EventId, TState, Exception, Func(Of TState, Exception, String))
- uid: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.IsEnabled(System.LogLevel)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.IsEnabled(System.LogLevel)
  id: IsEnabled(System.LogLevel)
  parent: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1
  langs:
  - csharp
  - vb
  name: IsEnabled(LogLevel)
  nameWithType: InterceptingLogger<T>.IsEnabled(LogLevel)
  fullName: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger<T>.IsEnabled(System.LogLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IsEnabled
    path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
    startLine: 83
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsEnabled(LogLevel logLevel)
    content.vb: Public Overridable Function IsEnabled(logLevel As LogLevel) As Boolean
    parameters:
    - id: logLevel
      type: System.LogLevel
    return:
      type: System.Boolean
  nameWithType.vb: InterceptingLogger(Of T).IsEnabled(LogLevel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger(Of T).IsEnabled(System.LogLevel)
- uid: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.BeginScope``1(``0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.BeginScope``1(``0)
  id: BeginScope``1(``0)
  parent: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1
  langs:
  - csharp
  - vb
  name: BeginScope<TState>(TState)
  nameWithType: InterceptingLogger<T>.BeginScope<TState>(TState)
  fullName: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger<T>.BeginScope<TState>(TState)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BeginScope
    path: src/Microsoft.EntityFrameworkCore/Internal/InterceptingLogger.cs
    startLine: 90
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IDisposable BeginScope<TState>(TState state)
    content.vb: Public Overridable Function BeginScope(Of TState)(state As TState) As IDisposable
    parameters:
    - id: state
      type: '{TState}'
    typeParameters:
    - id: TState
    return:
      type: System.IDisposable
  nameWithType.vb: InterceptingLogger(Of T).BeginScope(Of TState)(TState)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger(Of T).BeginScope(Of TState)(TState)
  name.vb: BeginScope(Of TState)(TState)
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Internal.InterceptingLogger`1.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<InterceptingLogger<T>, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<InterceptingLogger<T>, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Internal.InterceptingLogger<T>, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of InterceptingLogger(Of T), TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Internal.InterceptingLogger(Of T), TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of InterceptingLogger(Of T), TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<InterceptingLogger<T>, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<InterceptingLogger<T>, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Internal.InterceptingLogger<T>, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of InterceptingLogger(Of T), TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of InterceptingLogger(Of T), TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Internal.InterceptingLogger(Of T), TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Internal.IDbContextServices
  commentId: T:Microsoft.EntityFrameworkCore.Internal.IDbContextServices
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: IDbContextServices
  nameWithType: IDbContextServices
  fullName: Microsoft.EntityFrameworkCore.Internal.IDbContextServices
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: IDbContextOptions
  nameWithType: IDbContextOptions
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: System.LogLevel
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: System.LogLevel
- uid: EventId
  isExternal: true
  name: EventId
  nameWithType: EventId
  fullName: EventId
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Func{{TState},System.Exception,System.String}
  commentId: T:System.Func{``0,System.Exception,System.String}
  parent: System
  definition: System.Func`3
  name: Func<TState, Exception, String>
  nameWithType: Func<TState, Exception, String>
  fullName: System.Func<TState, System.Exception, System.String>
  nameWithType.vb: Func(Of TState, Exception, String)
  fullname.vb: System.Func(Of TState, System.Exception, System.String)
  name.vb: Func(Of TState, Exception, String)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
