### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  id: Customer
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.#ctor
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CompanyName
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerAddress
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerID
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.EmailAddress
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.FirstName
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.LastName
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.MiddleName
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.ModifiedDate
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.NameStyle
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Orders
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordHash
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordSalt
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Phone
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.rowguid
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.SalesPerson
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Suffix
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Title
  langs:
  - csharp
  - vb
  name: Customer
  nameWithType: Customer
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Customer
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 10
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Table("Customer", Schema = "SalesLT")]

      public class Customer
    content.vb: >-
      <Table("Customer", Schema:="SalesLT")>

      Public Class Customer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.TableAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.TableAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Customer
    namedArguments:
    - name: Schema
      type: System.String
      value: SalesLT
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.#ctor
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.#ctor
  id: '#ctor'
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: Customer()
  nameWithType: Customer.Customer()
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Customer()
  type: Constructor
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public Customer()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerID
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerID
  id: CustomerID
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: CustomerID
  nameWithType: Customer.CustomerID
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerID
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CustomerID
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public int CustomerID { get; set; }
    content.vb: Public Property CustomerID As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.NameStyle
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.NameStyle
  id: NameStyle
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: NameStyle
  nameWithType: Customer.NameStyle
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.NameStyle
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: NameStyle
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public bool NameStyle { get; set; }
    content.vb: Public Property NameStyle As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.FirstName
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.FirstName
  id: FirstName
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: FirstName
  nameWithType: Customer.FirstName
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.FirstName
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: FirstName
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public string FirstName { get; set; }
    content.vb: Public Property FirstName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.MiddleName
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.MiddleName
  id: MiddleName
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: MiddleName
  nameWithType: Customer.MiddleName
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.MiddleName
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: MiddleName
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public string MiddleName { get; set; }
    content.vb: Public Property MiddleName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.LastName
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.LastName
  id: LastName
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: LastName
  nameWithType: Customer.LastName
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.LastName
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: LastName
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public string LastName { get; set; }
    content.vb: Public Property LastName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Phone
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Phone
  id: Phone
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: Phone
  nameWithType: Customer.Phone
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Phone
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Phone
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 26
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public string Phone { get; set; }
    content.vb: Public Property Phone As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CompanyName
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CompanyName
  id: CompanyName
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: CompanyName
  nameWithType: Customer.CompanyName
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CompanyName
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CompanyName
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [MaxLength(128)]

      public string CompanyName { get; set; }
    content.vb: >-
      <MaxLength(128)>

      Public Property CompanyName As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 128
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.EmailAddress
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.EmailAddress
  id: EmailAddress
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: EmailAddress
  nameWithType: Customer.EmailAddress
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.EmailAddress
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EmailAddress
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [MaxLength(50)]

      public string EmailAddress { get; set; }
    content.vb: >-
      <MaxLength(50)>

      Public Property EmailAddress As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 50
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.ModifiedDate
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.ModifiedDate
  id: ModifiedDate
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: ModifiedDate
  nameWithType: Customer.ModifiedDate
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.ModifiedDate
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ModifiedDate
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 34
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public DateTime ModifiedDate { get; set; }
    content.vb: Public Property ModifiedDate As Date
    parameters: []
    return:
      type: System.DateTime
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordHash
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordHash
  id: PasswordHash
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: PasswordHash
  nameWithType: Customer.PasswordHash
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordHash
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: PasswordHash
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 36
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Required]

      [MaxLength(128)]

      public string PasswordHash { get; set; }
    content.vb: >-
      <Required>

      <MaxLength(128)>

      Public Property PasswordHash As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 128
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordSalt
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordSalt
  id: PasswordSalt
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: PasswordSalt
  nameWithType: Customer.PasswordSalt
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.PasswordSalt
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: PasswordSalt
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 40
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [Required]

      [MaxLength(10)]

      public string PasswordSalt { get; set; }
    content.vb: >-
      <Required>

      <MaxLength(10)>

      Public Property PasswordSalt As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 10
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.SalesPerson
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.SalesPerson
  id: SalesPerson
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: SalesPerson
  nameWithType: Customer.SalesPerson
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.SalesPerson
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: SalesPerson
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 44
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [MaxLength(256)]

      public string SalesPerson { get; set; }
    content.vb: >-
      <MaxLength(256)>

      Public Property SalesPerson As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 256
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Suffix
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Suffix
  id: Suffix
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: Suffix
  nameWithType: Customer.Suffix
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Suffix
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Suffix
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [MaxLength(10)]

      public string Suffix { get; set; }
    content.vb: >-
      <MaxLength(10)>

      Public Property Suffix As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 10
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Title
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Title
  id: Title
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: Customer.Title
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Title
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Title
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 50
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [MaxLength(8)]

      public string Title { get; set; }
    content.vb: >-
      <MaxLength(8)>

      Public Property Title As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: System.ComponentModel.DataAnnotations.MaxLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.MaxLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 8
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.rowguid
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.rowguid
  id: rowguid
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: rowguid
  nameWithType: Customer.rowguid
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.rowguid
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: rowguid
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 53
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: public Guid rowguid { get; set; }
    content.vb: Public Property rowguid As Guid
    parameters: []
    return:
      type: System.Guid
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerAddress
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerAddress
  id: CustomerAddress
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: CustomerAddress
  nameWithType: Customer.CustomerAddress
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.CustomerAddress
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CustomerAddress
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [InverseProperty("Customer")]

      public virtual ICollection<CustomerAddress> CustomerAddress { get; set; }
    content.vb: >-
      <InverseProperty("Customer")>

      Public Overridable Property CustomerAddress As ICollection(Of CustomerAddress)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress}
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Customer
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Orders
  commentId: P:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Orders
  id: Orders
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer
  langs:
  - csharp
  - vb
  name: Orders
  nameWithType: Customer.Orders
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Orders
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Orders
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/Model/Customer.cs
    startLine: 58
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  syntax:
    content: >-
      [InverseProperty("Customer")]

      public virtual ICollection<SalesOrder> Orders { get; set; }
    content.vb: >-
      <InverseProperty("Customer")>

      Public Overridable Property Orders As ICollection(Of SalesOrder)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder}
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Customer
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<Customer, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<Customer, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of Customer, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of Customer, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<Customer, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<Customer, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of Customer, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of Customer, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.Customer, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<CustomerAddress>
  nameWithType: ICollection<CustomerAddress>
  fullName: System.Collections.Generic.ICollection<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress>
  nameWithType.vb: ICollection(Of CustomerAddress)
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress)
  name.vb: ICollection(Of CustomerAddress)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
    name: CustomerAddress
    nameWithType: CustomerAddress
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
    name: CustomerAddress
    nameWithType: CustomerAddress
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.CustomerAddress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder}
  commentId: T:System.Collections.Generic.ICollection{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<SalesOrder>
  nameWithType: ICollection<SalesOrder>
  fullName: System.Collections.Generic.ICollection<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder>
  nameWithType.vb: ICollection(Of SalesOrder)
  fullname.vb: System.Collections.Generic.ICollection(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder)
  name.vb: ICollection(Of SalesOrder)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder
    name: SalesOrder
    nameWithType: SalesOrder
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder
    name: SalesOrder
    nameWithType: SalesOrder
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.Model.SalesOrder
  - name: )
    nameWithType: )
    fullName: )
