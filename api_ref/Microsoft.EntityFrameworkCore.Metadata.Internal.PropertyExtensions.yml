### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  id: PropertyExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  children:
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.String)
  langs:
  - csharp
  - vb
  name: PropertyExtensions
  nameWithType: PropertyExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyExtensions
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static class PropertyExtensions
    content.vb: Public Module PropertyExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: GetContainingEntityTypes(IProperty)
  nameWithType: PropertyExtensions.GetContainingEntityTypes(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetContainingEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetContainingEntityTypes
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IEntityType> GetContainingEntityTypes(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainingEntityTypes(property As IProperty) As IEnumerable(Of IEntityType)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: GetReferencingForeignKeys(IProperty)
  nameWithType: PropertyExtensions.GetReferencingForeignKeys(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetReferencingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetReferencingForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IEnumerable<IForeignKey> GetReferencingForeignKeys(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetReferencingForeignKeys(property As IProperty) As IEnumerable(Of IForeignKey)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: GetGenerationProperty(IProperty)
  nameWithType: PropertyExtensions.GetGenerationProperty(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetGenerationProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetGenerationProperty
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IProperty GetGenerationProperty(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetGenerationProperty(property As IProperty) As IProperty
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: GetShadowIndex(IProperty)
  nameWithType: PropertyExtensions.GetShadowIndex(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetShadowIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetShadowIndex
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 74
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int GetShadowIndex(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetShadowIndex(property As IProperty) As Integer
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: GetOriginalValueIndex(IProperty)
  nameWithType: PropertyExtensions.GetOriginalValueIndex(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.GetOriginalValueIndex(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOriginalValueIndex
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static int GetOriginalValueIndex(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetOriginalValueIndex(property As IProperty) As Integer
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: MayBeStoreGenerated(IProperty)
  nameWithType: PropertyExtensions.MayBeStoreGenerated(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.MayBeStoreGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MayBeStoreGenerated
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 88
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool MayBeStoreGenerated(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MayBeStoreGenerated(property As IProperty) As Boolean
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: RequiresOriginalValue(IProperty)
  nameWithType: PropertyExtensions.RequiresOriginalValue(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.RequiresOriginalValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RequiresOriginalValue
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool RequiresOriginalValue(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RequiresOriginalValue(property As IProperty) As Boolean
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: IsKeyOrForeignKey(IProperty)
  nameWithType: PropertyExtensions.IsKeyOrForeignKey(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.IsKeyOrForeignKey(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsKeyOrForeignKey
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 119
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool IsKeyOrForeignKey(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsKeyOrForeignKey(property As IProperty) As Boolean
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  id: FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: FindPrincipal(IProperty)
  nameWithType: PropertyExtensions.FindPrincipal(IProperty)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.FindPrincipal(Microsoft.EntityFrameworkCore.Metadata.IProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FindPrincipal
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 127
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IProperty FindPrincipal(this IProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FindPrincipal(property As IProperty) As IProperty
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.String)
  id: ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: ToDebugString(IProperty, Boolean, String)
  nameWithType: PropertyExtensions.ToDebugString(IProperty, Boolean, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IProperty, System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToDebugString
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 151
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static string ToDebugString(this IProperty property, bool singleLine = true, string indent = "")
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDebugString(property As IProperty, singleLine As Boolean = True, indent As String = "") As String
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    - id: singleLine
      type: System.Boolean
    - id: indent
      type: System.String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)
  id: AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions
  langs:
  - csharp
  - vb
  name: AsProperty(IProperty, String)
  nameWithType: PropertyExtensions.AsProperty(IProperty, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions.AsProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AsProperty
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyExtensions.cs
    startLine: 271
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Property AsProperty(this IProperty property, string methodName = "")
    content.vb: "<ExtensionAttribute>\nPublic Shared Function AsProperty(property As IProperty, methodName As String = \"\") As "
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IProperty
    - id: methodName
      type: System.String
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Internal.Property
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IProperty
  nameWithType: IProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEntityType>
  nameWithType: IEnumerable<IEntityType>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IEntityType>
  nameWithType.vb: IEnumerable(Of IEntityType)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  name.vb: IEnumerable(Of IEntityType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IForeignKey>
  nameWithType: IEnumerable<IForeignKey>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IForeignKey>
  nameWithType.vb: IEnumerable(Of IForeignKey)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IForeignKey)
  name.vb: IEnumerable(Of IForeignKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
    name: IForeignKey
    nameWithType: IForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.Property
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.Property
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Property
  nameWithType: Property
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.Property
