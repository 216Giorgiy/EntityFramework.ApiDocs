### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode
  commentId: T:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode
  id: FromSqlExpressionNode
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator(ClauseGenerationContext)
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  - Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.SupportedMethods
  langs:
  - csharp
  - vb
  name: FromSqlExpressionNode
  nameWithType: FromSqlExpressionNode
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FromSqlExpressionNode
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class FromSqlExpressionNode : ResultOperatorExpressionNodeBase'
    content.vb: >-
      Public Class FromSqlExpressionNode
          Inherits ResultOperatorExpressionNodeBase
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.SupportedMethods
  commentId: F:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.SupportedMethods
  id: SupportedMethods
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode
  langs:
  - csharp
  - vb
  name: SupportedMethods
  nameWithType: FromSqlExpressionNode.SupportedMethods
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.SupportedMethods
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SupportedMethods
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static readonly IReadOnlyCollection<MethodInfo> SupportedMethods
    content.vb: Public Shared ReadOnly SupportedMethods As IReadOnlyCollection(Of MethodInfo)
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.Reflection.MethodInfo}
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.Expression)
  id: '#ctor(MethodCallExpressionParseInfo,System.Linq.Expressions.ConstantExpression,System.Linq.Expressions.Expression)'
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode
  langs:
  - csharp
  - vb
  name: FromSqlExpressionNode(MethodCallExpressionParseInfo, ConstantExpression, Expression)
  nameWithType: FromSqlExpressionNode.FromSqlExpressionNode(MethodCallExpressionParseInfo, ConstantExpression, Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.FromSqlExpressionNode(MethodCallExpressionParseInfo, System.Linq.Expressions.ConstantExpression, System.Linq.Expressions.Expression)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
    startLine: 34
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public FromSqlExpressionNode(MethodCallExpressionParseInfo parseInfo, ConstantExpression sql, Expression arguments)
    content.vb: Public Sub New(parseInfo As MethodCallExpressionParseInfo, sql As ConstantExpression, arguments As Expression)
    parameters:
    - id: parseInfo
      type: MethodCallExpressionParseInfo
    - id: sql
      type: System.Linq.Expressions.ConstantExpression
    - id: arguments
      type: System.Linq.Expressions.Expression
  overload: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator(ClauseGenerationContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator(ClauseGenerationContext)
  id: CreateResultOperator(ClauseGenerationContext)
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode
  langs:
  - csharp
  - vb
  name: CreateResultOperator(ClauseGenerationContext)
  nameWithType: FromSqlExpressionNode.CreateResultOperator(ClauseGenerationContext)
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator(ClauseGenerationContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateResultOperator
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
    startLine: 48
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected override ResultOperatorBase CreateResultOperator(ClauseGenerationContext clauseGenerationContext)
    content.vb: Protected Overrides Function CreateResultOperator(clauseGenerationContext As ClauseGenerationContext) As ResultOperatorBase
    parameters:
    - id: clauseGenerationContext
      type: ClauseGenerationContext
    return:
      type: ResultOperatorBase
  overload: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  id: Resolve(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,ClauseGenerationContext)
  parent: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode
  langs:
  - csharp
  - vb
  name: Resolve(ParameterExpression, Expression, ClauseGenerationContext)
  nameWithType: FromSqlExpressionNode.Resolve(ParameterExpression, Expression, ClauseGenerationContext)
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, ClauseGenerationContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Resolve
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/ResultOperators/Internal/FromSqlExpressionNode.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override Expression Resolve(ParameterExpression inputParameter, Expression expressionToBeResolved, ClauseGenerationContext clauseGenerationContext)
    content.vb: Public Overrides Function Resolve(inputParameter As ParameterExpression, expressionToBeResolved As Expression, clauseGenerationContext As ClauseGenerationContext) As Expression
    parameters:
    - id: inputParameter
      type: System.Linq.Expressions.ParameterExpression
    - id: expressionToBeResolved
      type: System.Linq.Expressions.Expression
    - id: clauseGenerationContext
      type: ClauseGenerationContext
    return:
      type: System.Linq.Expressions.Expression
  overload: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyCollection{System.Reflection.MethodInfo}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Reflection.MethodInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<MethodInfo>
  nameWithType: IReadOnlyCollection<MethodInfo>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Reflection.MethodInfo>
  nameWithType.vb: IReadOnlyCollection(Of MethodInfo)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Reflection.MethodInfo)
  name.vb: IReadOnlyCollection(Of MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.#ctor
  isExternal: false
  name: FromSqlExpressionNode
  nameWithType: FromSqlExpressionNode.FromSqlExpressionNode
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.FromSqlExpressionNode
- uid: MethodCallExpressionParseInfo
  isExternal: true
  name: MethodCallExpressionParseInfo
  nameWithType: MethodCallExpressionParseInfo
  fullName: MethodCallExpressionParseInfo
- uid: System.Linq.Expressions.ConstantExpression
  commentId: T:System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator
  isExternal: false
  name: CreateResultOperator
  nameWithType: FromSqlExpressionNode.CreateResultOperator
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.CreateResultOperator
- uid: ClauseGenerationContext
  isExternal: true
  name: ClauseGenerationContext
  nameWithType: ClauseGenerationContext
  fullName: ClauseGenerationContext
- uid: ResultOperatorBase
  isExternal: true
  name: ResultOperatorBase
  nameWithType: ResultOperatorBase
  fullName: ResultOperatorBase
- uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve
  isExternal: false
  name: Resolve
  nameWithType: FromSqlExpressionNode.Resolve
  fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.FromSqlExpressionNode.Resolve
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
