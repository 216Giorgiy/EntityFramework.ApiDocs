### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  id: IAsyncQueryProvider
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IAsyncQueryProvider
  nameWithType: IAsyncQueryProvider
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IAsyncQueryProvider
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncQueryProvider.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public interface IAsyncQueryProvider : IQueryProvider'
    content.vb: >-
      Public Interface IAsyncQueryProvider
          Inherits IQueryProvider
  inheritedMembers:
  - System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  - System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  - System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  - System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression)
  id: ExecuteAsync``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Expression)
  nameWithType: IAsyncQueryProvider.ExecuteAsync<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncQueryProvider.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: IAsyncEnumerable<TResult> ExecuteAsync<TResult>(Expression expression)
    content.vb: Function ExecuteAsync(Of TResult)(expression As Expression) As IAsyncEnumerable(Of TResult)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TResult
    return:
      type: IAsyncEnumerable{{TResult}}
  overload: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync*
  nameWithType.vb: IAsyncQueryProvider.ExecuteAsync(Of TResult)(Expression)
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: ExecuteAsync(Of TResult)(Expression)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  id: ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Expression, CancellationToken)
  nameWithType: IAsyncQueryProvider.ExecuteAsync<TResult>(Expression, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync<TResult>(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncQueryProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/IAsyncQueryProvider.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
    content.vb: Function ExecuteAsync(Of TResult)(expression As Expression, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
  overload: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync*
  nameWithType.vb: IAsyncQueryProvider.ExecuteAsync(Of TResult)(Expression, CancellationToken)
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Expression, CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  isExternal: true
  name: CreateQuery(Expression)
  nameWithType: IQueryProvider.CreateQuery(Expression)
  fullName: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
    name: CreateQuery
    nameWithType: IQueryProvider.CreateQuery
    fullName: System.Linq.IQueryProvider.CreateQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)
    name: CreateQuery
    nameWithType: IQueryProvider.CreateQuery
    fullName: System.Linq.IQueryProvider.CreateQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  isExternal: true
  name: CreateQuery<TElement>(Expression)
  nameWithType: IQueryProvider.CreateQuery<TElement>(Expression)
  fullName: System.Linq.IQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression)
  nameWithType.vb: IQueryProvider.CreateQuery(Of TElement)(Expression)
  fullname.vb: System.Linq.IQueryProvider.CreateQuery(Of TElement)(System.Linq.Expressions.Expression)
  name.vb: CreateQuery(Of TElement)(Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
    name: CreateQuery<TElement>
    nameWithType: IQueryProvider.CreateQuery<TElement>
    fullName: System.Linq.IQueryProvider.CreateQuery<TElement>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)
    name: CreateQuery(Of TElement)
    nameWithType: IQueryProvider.CreateQuery(Of TElement)
    fullName: System.Linq.IQueryProvider.CreateQuery(Of TElement)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  isExternal: true
  name: Execute(Expression)
  nameWithType: IQueryProvider.Execute(Expression)
  fullName: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
    name: Execute
    nameWithType: IQueryProvider.Execute
    fullName: System.Linq.IQueryProvider.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)
    name: Execute
    nameWithType: IQueryProvider.Execute
    fullName: System.Linq.IQueryProvider.Execute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  commentId: M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
  parent: System.Linq.IQueryProvider
  isExternal: true
  name: Execute<TResult>(Expression)
  nameWithType: IQueryProvider.Execute<TResult>(Expression)
  fullName: System.Linq.IQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression)
  nameWithType.vb: IQueryProvider.Execute(Of TResult)(Expression)
  fullname.vb: System.Linq.IQueryProvider.Execute(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: Execute(Of TResult)(Expression)
  spec.csharp:
  - uid: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
    name: Execute<TResult>
    nameWithType: IQueryProvider.Execute<TResult>
    fullName: System.Linq.IQueryProvider.Execute<TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)
    name: Execute(Of TResult)
    nameWithType: IQueryProvider.Execute(Of TResult)
    fullName: System.Linq.IQueryProvider.Execute(Of TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync
  isExternal: false
  name: ExecuteAsync<TResult>
  nameWithType: IAsyncQueryProvider.ExecuteAsync<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync<TResult>
  nameWithType.vb: IAsyncQueryProvider.ExecuteAsync(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Of TResult)
  name.vb: ExecuteAsync(Of TResult)
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: IAsyncEnumerable{{TResult}}
  commentId: '!:IAsyncEnumerable{``1}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<TResult>
  nameWithType: IAsyncEnumerable<TResult>
  fullName: IAsyncEnumerable<TResult>
  nameWithType.vb: IAsyncEnumerable(Of TResult)
  fullname.vb: IAsyncEnumerable(Of TResult)
  name.vb: IAsyncEnumerable(Of TResult)
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullname.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
