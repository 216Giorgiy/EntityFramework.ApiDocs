### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  id: QueryContextFactory
  parent: Microsoft.EntityFrameworkCore.Query
  children:
  - Microsoft.EntityFrameworkCore.Query.QueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  - Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ChangeDetector
  - Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ConcurrencyDetector
  - Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Create
  - Microsoft.EntityFrameworkCore.Query.QueryContextFactory.CreateQueryBuffer
  - Microsoft.EntityFrameworkCore.Query.QueryContextFactory.StateManager
  langs:
  - csharp
  - vb
  name: QueryContextFactory
  nameWithType: QueryContextFactory
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QueryContextFactory
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    A factory for <xref href=\"Microsoft.EntityFrameworkCore.Query.QueryContext\" data-throw-if-not-resolved=\"false\"></xref> instances.\n"
  example: []
  syntax:
    content: 'public abstract class QueryContextFactory : IQueryContextFactory'
    content.vb: >-
      Public MustInherit Class QueryContextFactory
          Implements IQueryContextFactory
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  id: '#ctor(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext,Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)'
  parent: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  langs:
  - csharp
  - vb
  name: QueryContextFactory(ICurrentDbContext, IConcurrencyDetector)
  nameWithType: QueryContextFactory.QueryContextFactory(ICurrentDbContext, IConcurrencyDetector)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.QueryContextFactory(Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext, Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
    startLine: 21
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected QueryContextFactory(ICurrentDbContext currentContext, IConcurrencyDetector concurrencyDetector)
    content.vb: Protected Sub New(currentContext As ICurrentDbContext, concurrencyDetector As IConcurrencyDetector)
    parameters:
    - id: currentContext
      type: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
    - id: concurrencyDetector
      type: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.CreateQueryBuffer
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.CreateQueryBuffer
  id: CreateQueryBuffer
  parent: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  langs:
  - csharp
  - vb
  name: CreateQueryBuffer()
  nameWithType: QueryContextFactory.CreateQueryBuffer()
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.CreateQueryBuffer()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CreateQueryBuffer
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
    startLine: 40
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Creates a query buffer.\n"
  example: []
  syntax:
    content: protected virtual IQueryBuffer CreateQueryBuffer()
    content.vb: Protected Overridable Function CreateQueryBuffer As IQueryBuffer
    return:
      type: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
      description: "\n    The new query buffer.\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ChangeDetector
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ChangeDetector
  id: ChangeDetector
  parent: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  langs:
  - csharp
  - vb
  name: ChangeDetector
  nameWithType: QueryContextFactory.ChangeDetector
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ChangeDetector
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ChangeDetector
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the change detector.\n"
  example: []
  syntax:
    content: protected virtual LazyRef<IChangeDetector> ChangeDetector { get; }
    content.vb: Protected Overridable ReadOnly Property ChangeDetector As LazyRef(Of IChangeDetector)
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector}
      description: "\n    The change detector.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.StateManager
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.StateManager
  id: StateManager
  parent: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  langs:
  - csharp
  - vb
  name: StateManager
  nameWithType: QueryContextFactory.StateManager
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.StateManager
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: StateManager
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
    startLine: 57
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the state manager.\n"
  example: []
  syntax:
    content: protected virtual LazyRef<IStateManager> StateManager { get; }
    content.vb: Protected Overridable ReadOnly Property StateManager As LazyRef(Of IStateManager)
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager}
      description: "\n    The state manager.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ConcurrencyDetector
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ConcurrencyDetector
  id: ConcurrencyDetector
  parent: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  langs:
  - csharp
  - vb
  name: ConcurrencyDetector
  nameWithType: QueryContextFactory.ConcurrencyDetector
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.ConcurrencyDetector
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConcurrencyDetector
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
    startLine: 65
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the concurrency detector.\n"
  example: []
  syntax:
    content: protected virtual IConcurrencyDetector ConcurrencyDetector { get; }
    content.vb: Protected Overridable ReadOnly Property ConcurrencyDetector As IConcurrencyDetector
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
      description: "\n    The concurrency detector.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Create
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Create
  id: Create
  parent: Microsoft.EntityFrameworkCore.Query.QueryContextFactory
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: QueryContextFactory.Create()
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Create()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Create
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContextFactory.cs
    startLine: 73
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Creates a new QueryContext.\n"
  example: []
  syntax:
    content: public abstract QueryContext Create()
    content.vb: Public MustOverride Function Create As QueryContext
    return:
      type: Microsoft.EntityFrameworkCore.Query.QueryContext
      description: "\n    A QueryContext.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryContext
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: QueryContext
  nameWithType: QueryContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: IQueryContextFactory
  nameWithType: IQueryContextFactory
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.QueryContextFactory.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<QueryContextFactory, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryContextFactory, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.QueryContextFactory, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of QueryContextFactory, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.QueryContextFactory, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of QueryContextFactory, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<QueryContextFactory, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryContextFactory, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.QueryContextFactory, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of QueryContextFactory, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of QueryContextFactory, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.QueryContextFactory, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  commentId: T:Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: ICurrentDbContext
  nameWithType: ICurrentDbContext
  fullName: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
- uid: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  commentId: T:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: IConcurrencyDetector
  nameWithType: IConcurrencyDetector
  fullName: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IQueryBuffer
  nameWithType: IQueryBuffer
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector}
  commentId: T:Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector}
  parent: Microsoft.EntityFrameworkCore.Internal
  definition: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  name: LazyRef<IChangeDetector>
  nameWithType: LazyRef<IChangeDetector>
  fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector>
  nameWithType.vb: LazyRef(Of IChangeDetector)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.LazyRef(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector)
  name.vb: LazyRef(Of IChangeDetector)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector
    name: IChangeDetector
    nameWithType: IChangeDetector
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector
    name: IChangeDetector
    nameWithType: IChangeDetector
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  commentId: T:Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  isExternal: false
  name: LazyRef<T>
  nameWithType: LazyRef<T>
  fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef<T>
  nameWithType.vb: LazyRef(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.LazyRef(Of T)
  name.vb: LazyRef(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager}
  commentId: T:Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager}
  parent: Microsoft.EntityFrameworkCore.Internal
  definition: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  name: LazyRef<IStateManager>
  nameWithType: LazyRef<IStateManager>
  fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager>
  nameWithType.vb: LazyRef(Of IStateManager)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.LazyRef(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)
  name.vb: LazyRef(Of IStateManager)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
    name: IStateManager
    nameWithType: IStateManager
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
    name: IStateManager
    nameWithType: IStateManager
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create
  commentId: M:Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create
  parent: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
  isExternal: false
  name: Create()
  nameWithType: IQueryContextFactory.Create()
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create
    name: Create
    nameWithType: IQueryContextFactory.Create
    fullName: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create
    name: Create
    nameWithType: IQueryContextFactory.Create
    fullName: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
