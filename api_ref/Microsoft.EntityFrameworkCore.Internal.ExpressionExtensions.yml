### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  id: ExpressionExtensions
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)
  - Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)
  - Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)
  - Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)
  langs:
  - csharp
  - vb
  name: ExpressionExtensions
  nameWithType: ExpressionExtensions
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExpressionExtensions
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static class ExpressionExtensions
    content.vb: Public Module ExpressionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)
  id: GetPropertyAccess(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyAccess(LambdaExpression)
  nameWithType: ExpressionExtensions.GetPropertyAccess(LambdaExpression)
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPropertyAccess
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 26
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static PropertyInfo GetPropertyAccess(this LambdaExpression propertyAccessExpression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyAccess(propertyAccessExpression As LambdaExpression) As PropertyInfo
    parameters:
    - id: propertyAccessExpression
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Reflection.PropertyInfo
  overload: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)
  id: GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetPropertyAccessList(LambdaExpression)
  nameWithType: ExpressionExtensions.GetPropertyAccessList(LambdaExpression)
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPropertyAccessList
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IReadOnlyList<PropertyInfo> GetPropertyAccessList(this LambdaExpression propertyAccessExpression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyAccessList(propertyAccessExpression As LambdaExpression) As IReadOnlyList(Of PropertyInfo)
    parameters:
    - id: propertyAccessExpression
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}
  overload: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)
  id: GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetComplexPropertyAccess(LambdaExpression)
  nameWithType: ExpressionExtensions.GetComplexPropertyAccess(LambdaExpression)
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess(System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetComplexPropertyAccess
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 134
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static IReadOnlyList<PropertyInfo> GetComplexPropertyAccess(this LambdaExpression propertyAccessExpression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetComplexPropertyAccess(propertyAccessExpression As LambdaExpression) As IReadOnlyList(Of PropertyInfo)
    parameters:
    - id: propertyAccessExpression
      type: System.Linq.Expressions.LambdaExpression
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}
  overload: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)
  id: RemoveConvert(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: RemoveConvert(Expression)
  nameWithType: ExpressionExtensions.RemoveConvert(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RemoveConvert
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 184
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static Expression RemoveConvert(this Expression expression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveConvert(expression As Expression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Linq.Expressions.Expression
  overload: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression``1(System.Linq.Expressions.Expression)
  id: GetRootExpression``1(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: GetRootExpression<TExpression>(Expression)
  nameWithType: ExpressionExtensions.GetRootExpression<TExpression>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression<TExpression>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetRootExpression
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 200
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public static TExpression GetRootExpression<TExpression>(this Expression expression)where TExpression : Expression'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRootExpression(Of TExpression As Expression)(expression As Expression) As TExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TExpression
    return:
      type: '{TExpression}'
  overload: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression*
  nameWithType.vb: ExpressionExtensions.GetRootExpression(Of TExpression)(Expression)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression(Of TExpression)(System.Linq.Expressions.Expression)
  name.vb: GetRootExpression(Of TExpression)(Expression)
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)
  id: IsLogicalOperation(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsLogicalOperation(Expression)
  nameWithType: ExpressionExtensions.IsLogicalOperation(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsLogicalOperation
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 216
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool IsLogicalOperation(this Expression expression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsLogicalOperation(expression As Expression) As Boolean
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)
  id: IsComparisonOperation(System.Linq.Expressions.Expression)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions
  langs:
  - csharp
  - vb
  name: IsComparisonOperation(Expression)
  nameWithType: ExpressionExtensions.IsComparisonOperation(Expression)
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsComparisonOperation
    path: src/Microsoft.EntityFrameworkCore/Extensions/Internal/ExpressionExtensions.cs
    startLine: 228
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool IsComparisonOperation(this Expression expression)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsComparisonOperation(expression As Expression) As Boolean
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess
  isExternal: false
  name: GetPropertyAccess
  nameWithType: ExpressionExtensions.GetPropertyAccess
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccess
- uid: System.Linq.Expressions.LambdaExpression
  commentId: T:System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList
  isExternal: false
  name: GetPropertyAccessList
  nameWithType: ExpressionExtensions.GetPropertyAccessList
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetPropertyAccessList
- uid: System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<PropertyInfo>
  nameWithType: IReadOnlyList<PropertyInfo>
  fullName: System.Collections.Generic.IReadOnlyList<System.Reflection.PropertyInfo>
  nameWithType.vb: IReadOnlyList(Of PropertyInfo)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.Reflection.PropertyInfo)
  name.vb: IReadOnlyList(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess
  isExternal: false
  name: GetComplexPropertyAccess
  nameWithType: ExpressionExtensions.GetComplexPropertyAccess
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetComplexPropertyAccess
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert
  isExternal: false
  name: RemoveConvert
  nameWithType: ExpressionExtensions.RemoveConvert
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.RemoveConvert
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression
  isExternal: false
  name: GetRootExpression<TExpression>
  nameWithType: ExpressionExtensions.GetRootExpression<TExpression>
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression<TExpression>
  nameWithType.vb: ExpressionExtensions.GetRootExpression(Of TExpression)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.GetRootExpression(Of TExpression)
  name.vb: GetRootExpression(Of TExpression)
- uid: '{TExpression}'
  commentId: '!:TExpression'
  definition: TExpression
  name: TExpression
  nameWithType: TExpression
  fullName: TExpression
- uid: TExpression
  commentId: '!:TExpression'
  isExternal: false
  name: TExpression
  nameWithType: TExpression
  fullName: TExpression
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation
  isExternal: false
  name: IsLogicalOperation
  nameWithType: ExpressionExtensions.IsLogicalOperation
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsLogicalOperation
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation*
  commentId: Overload:Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation
  isExternal: false
  name: IsComparisonOperation
  nameWithType: ExpressionExtensions.IsComparisonOperation
  fullName: Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions.IsComparisonOperation
