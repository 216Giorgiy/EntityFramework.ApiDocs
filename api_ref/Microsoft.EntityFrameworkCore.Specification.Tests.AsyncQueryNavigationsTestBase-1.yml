### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  id: AsyncQueryNavigationsTestBase`1
  parent: Microsoft.EntityFrameworkCore.Specification.Tests
  children:
  - Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.#ctor(`0)
  - Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  - Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  - Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.CreateContext
  - Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Fixture
  - Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Include_with_multiple_optional_navigations
  - Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Multiple_include_with_multiple_optional_navigations
  langs:
  - csharp
  - vb
  name: AsyncQueryNavigationsTestBase<TFixture>
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AsyncQueryNavigationsTestBase
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: 'public abstract class AsyncQueryNavigationsTestBase<TFixture> : IClassFixture<TFixture> where TFixture : NorthwindQueryFixtureBase, new ()'
    content.vb: >-
      Public MustInherit Class AsyncQueryNavigationsTestBase(Of TFixture As {NorthwindQueryFixtureBase, New})
          Inherits IClassFixture(Of TFixture)
    typeParameters:
    - id: TFixture
  inheritance:
  - System.Object
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture)
  name.vb: AsyncQueryNavigationsTestBase(Of TFixture)
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Include_with_multiple_optional_navigations
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Include_with_multiple_optional_navigations
  id: Include_with_multiple_optional_navigations
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  langs:
  - csharp
  - vb
  name: Include_with_multiple_optional_navigations()
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.Include_with_multiple_optional_navigations()
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.Include_with_multiple_optional_navigations()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Include_with_multiple_optional_navigations
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: public virtual Task Include_with_multiple_optional_navigations()
    content.vb: Public Overridable Function Include_with_multiple_optional_navigations As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Include_with_multiple_optional_navigations*
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).Include_with_multiple_optional_navigations()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).Include_with_multiple_optional_navigations()
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Multiple_include_with_multiple_optional_navigations
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Multiple_include_with_multiple_optional_navigations
  id: Multiple_include_with_multiple_optional_navigations
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  langs:
  - csharp
  - vb
  name: Multiple_include_with_multiple_optional_navigations()
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.Multiple_include_with_multiple_optional_navigations()
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.Multiple_include_with_multiple_optional_navigations()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Multiple_include_with_multiple_optional_navigations
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 26
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: public virtual Task Multiple_include_with_multiple_optional_navigations()
    content.vb: Public Overridable Function Multiple_include_with_multiple_optional_navigations As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Multiple_include_with_multiple_optional_navigations*
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).Multiple_include_with_multiple_optional_navigations()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).Multiple_include_with_multiple_optional_navigations()
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.CreateContext
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.CreateContext
  id: CreateContext
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  langs:
  - csharp
  - vb
  name: CreateContext()
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.CreateContext()
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.CreateContext()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateContext
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: protected NorthwindContext CreateContext()
    content.vb: Protected Function CreateContext As NorthwindContext
    return:
      type: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind.NorthwindContext
  overload: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.CreateContext*
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).CreateContext()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).CreateContext()
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.#ctor(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  langs:
  - csharp
  - vb
  name: AsyncQueryNavigationsTestBase(TFixture)
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.AsyncQueryNavigationsTestBase(TFixture)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.AsyncQueryNavigationsTestBase(TFixture)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 42
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: protected AsyncQueryNavigationsTestBase(TFixture fixture)
    content.vb: Protected Sub New(fixture As TFixture)
    parameters:
    - id: fixture
      type: '{TFixture}'
  overload: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.#ctor*
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).AsyncQueryNavigationsTestBase(TFixture)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).AsyncQueryNavigationsTestBase(TFixture)
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Fixture
  commentId: P:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Fixture
  id: Fixture
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  langs:
  - csharp
  - vb
  name: Fixture
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.Fixture
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.Fixture
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Fixture
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: protected TFixture Fixture { get; }
    content.vb: Protected ReadOnly Property Fixture As TFixture
    parameters: []
    return:
      type: '{TFixture}'
  overload: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Fixture*
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).Fixture
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).Fixture
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  id: AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  langs:
  - csharp
  - vb
  name: AssertQuery<TItem>(Func<IQueryable<TItem>, IQueryable<Object>>, Boolean, Int32, Action<IList<Object>, IList<Object>>)
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.AssertQuery<TItem>(Func<IQueryable<TItem>, IQueryable<Object>>, Boolean, Int32, Action<IList<Object>, IList<Object>>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.AssertQuery<TItem>(System.Func<System.Linq.IQueryable<TItem>, System.Linq.IQueryable<System.Object>>, System.Boolean, System.Int32, System.Action<System.Collections.Generic.IList<System.Object>, System.Collections.Generic.IList<System.Object>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AssertQuery
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: 'protected Task AssertQuery<TItem>(Func<IQueryable<TItem>, IQueryable<object>> query, bool assertOrder = false, int entryCount = 0, Action<IList<object>, IList<object>> asserter = null)where TItem : class'
    content.vb: Protected Function AssertQuery(Of TItem As Class)(query As Func(Of IQueryable(Of TItem), IQueryable(Of Object)), assertOrder As Boolean = False, entryCount As Integer = 0, asserter As Action(Of IList(Of Object), IList(Of Object)) = Nothing) As Task
    parameters:
    - id: query
      type: System.Func{System.Linq.IQueryable{{TItem}},System.Linq.IQueryable{System.Object}}
    - id: assertOrder
      type: System.Boolean
    - id: entryCount
      type: System.Int32
    - id: asserter
      type: System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}}
    typeParameters:
    - id: TItem
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery*
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).AssertQuery(Of TItem)(Func(Of IQueryable(Of TItem), IQueryable(Of Object)), Boolean, Int32, Action(Of IList(Of Object), IList(Of Object)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).AssertQuery(Of TItem)(System.Func(Of System.Linq.IQueryable(Of TItem), System.Linq.IQueryable(Of System.Object)), System.Boolean, System.Int32, System.Action(Of System.Collections.Generic.IList(Of System.Object), System.Collections.Generic.IList(Of System.Object)))
  name.vb: AssertQuery(Of TItem)(Func(Of IQueryable(Of TItem), IQueryable(Of Object)), Boolean, Int32, Action(Of IList(Of Object), IList(Of Object)))
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  commentId: M:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  id: AssertQuery``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}},System.Boolean,System.Int32,System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}})
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1
  langs:
  - csharp
  - vb
  name: AssertQuery<TItem>(Func<IQueryable<TItem>, IQueryable<Object>>, Func<IQueryable<TItem>, IQueryable<Object>>, Boolean, Int32, Action<IList<Object>, IList<Object>>)
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.AssertQuery<TItem>(Func<IQueryable<TItem>, IQueryable<Object>>, Func<IQueryable<TItem>, IQueryable<Object>>, Boolean, Int32, Action<IList<Object>, IList<Object>>)
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.AssertQuery<TItem>(System.Func<System.Linq.IQueryable<TItem>, System.Linq.IQueryable<System.Object>>, System.Func<System.Linq.IQueryable<TItem>, System.Linq.IQueryable<System.Object>>, System.Boolean, System.Int32, System.Action<System.Collections.Generic.IList<System.Object>, System.Collections.Generic.IList<System.Object>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AssertQuery
    path: src/Microsoft.EntityFrameworkCore.Specification.Tests/AsyncQueryNavigationsTestBase.cs
    startLine: 57
  assemblies:
  - Microsoft.EntityFrameworkCore.Specification.Tests
  namespace: Microsoft.EntityFrameworkCore.Specification.Tests
  syntax:
    content: 'protected Task AssertQuery<TItem>(Func<IQueryable<TItem>, IQueryable<object>> efQuery, Func<IQueryable<TItem>, IQueryable<object>> l2oQuery, bool assertOrder = false, int entryCount = 0, Action<IList<object>, IList<object>> asserter = null)where TItem : class'
    content.vb: Protected Function AssertQuery(Of TItem As Class)(efQuery As Func(Of IQueryable(Of TItem), IQueryable(Of Object)), l2oQuery As Func(Of IQueryable(Of TItem), IQueryable(Of Object)), assertOrder As Boolean = False, entryCount As Integer = 0, asserter As Action(Of IList(Of Object), IList(Of Object)) = Nothing) As Task
    parameters:
    - id: efQuery
      type: System.Func{System.Linq.IQueryable{{TItem}},System.Linq.IQueryable{System.Object}}
    - id: l2oQuery
      type: System.Func{System.Linq.IQueryable{{TItem}},System.Linq.IQueryable{System.Object}}
    - id: assertOrder
      type: System.Boolean
    - id: entryCount
      type: System.Int32
    - id: asserter
      type: System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}}
    typeParameters:
    - id: TItem
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery*
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).AssertQuery(Of TItem)(Func(Of IQueryable(Of TItem), IQueryable(Of Object)), Func(Of IQueryable(Of TItem), IQueryable(Of Object)), Boolean, Int32, Action(Of IList(Of Object), IList(Of Object)))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).AssertQuery(Of TItem)(System.Func(Of System.Linq.IQueryable(Of TItem), System.Linq.IQueryable(Of System.Object)), System.Func(Of System.Linq.IQueryable(Of TItem), System.Linq.IQueryable(Of System.Object)), System.Boolean, System.Int32, System.Action(Of System.Collections.Generic.IList(Of System.Object), System.Collections.Generic.IList(Of System.Object)))
  name.vb: AssertQuery(Of TItem)(Func(Of IQueryable(Of TItem), IQueryable(Of Object)), Func(Of IQueryable(Of TItem), IQueryable(Of Object)), Boolean, Int32, Action(Of IList(Of Object), IList(Of Object)))
references:
- uid: Microsoft.EntityFrameworkCore.Specification.Tests
  commentId: N:Microsoft.EntityFrameworkCore.Specification.Tests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Specification.Tests
  nameWithType: Microsoft.EntityFrameworkCore.Specification.Tests
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Include_with_multiple_optional_navigations*
  commentId: Overload:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Include_with_multiple_optional_navigations
  isExternal: false
  name: Include_with_multiple_optional_navigations
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.Include_with_multiple_optional_navigations
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.Include_with_multiple_optional_navigations
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).Include_with_multiple_optional_navigations
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).Include_with_multiple_optional_navigations
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Multiple_include_with_multiple_optional_navigations*
  commentId: Overload:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Multiple_include_with_multiple_optional_navigations
  isExternal: false
  name: Multiple_include_with_multiple_optional_navigations
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.Multiple_include_with_multiple_optional_navigations
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.Multiple_include_with_multiple_optional_navigations
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).Multiple_include_with_multiple_optional_navigations
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).Multiple_include_with_multiple_optional_navigations
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.CreateContext*
  commentId: Overload:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.CreateContext
  isExternal: false
  name: CreateContext
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.CreateContext
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.CreateContext
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).CreateContext
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).CreateContext
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind.NorthwindContext
  commentId: T:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind.NorthwindContext
  parent: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind
  isExternal: false
  name: NorthwindContext
  nameWithType: NorthwindContext
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind.NorthwindContext
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind
  commentId: N:Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind
  nameWithType: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.TestModels.Northwind
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.#ctor
  isExternal: false
  name: AsyncQueryNavigationsTestBase
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.AsyncQueryNavigationsTestBase
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.AsyncQueryNavigationsTestBase
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).AsyncQueryNavigationsTestBase
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).AsyncQueryNavigationsTestBase
- uid: '{TFixture}'
  commentId: '!:TFixture'
  definition: TFixture
  name: TFixture
  nameWithType: TFixture
  fullName: TFixture
- uid: TFixture
  isExternal: false
  name: TFixture
  nameWithType: TFixture
  fullName: TFixture
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Fixture*
  commentId: Overload:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.Fixture
  isExternal: false
  name: Fixture
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.Fixture
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.Fixture
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).Fixture
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).Fixture
- uid: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery*
  commentId: Overload:Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase`1.AssertQuery
  isExternal: false
  name: AssertQuery<TItem>
  nameWithType: AsyncQueryNavigationsTestBase<TFixture>.AssertQuery<TItem>
  fullName: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase<TFixture>.AssertQuery<TItem>
  nameWithType.vb: AsyncQueryNavigationsTestBase(Of TFixture).AssertQuery(Of TItem)
  fullname.vb: Microsoft.EntityFrameworkCore.Specification.Tests.AsyncQueryNavigationsTestBase(Of TFixture).AssertQuery(Of TItem)
  name.vb: AssertQuery(Of TItem)
- uid: System.Func{System.Linq.IQueryable{{TItem}},System.Linq.IQueryable{System.Object}}
  commentId: T:System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{System.Object}}
  parent: System
  definition: System.Func`2
  name: Func<IQueryable<TItem>, IQueryable<Object>>
  nameWithType: Func<IQueryable<TItem>, IQueryable<Object>>
  fullName: System.Func<System.Linq.IQueryable<TItem>, System.Linq.IQueryable<System.Object>>
  nameWithType.vb: Func(Of IQueryable(Of TItem), IQueryable(Of Object))
  fullname.vb: System.Func(Of System.Linq.IQueryable(Of TItem), System.Linq.IQueryable(Of System.Object))
  name.vb: Func(Of IQueryable(Of TItem), IQueryable(Of Object))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}}
  commentId: T:System.Action{System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object}}
  parent: System
  definition: System.Action`2
  name: Action<IList<Object>, IList<Object>>
  nameWithType: Action<IList<Object>, IList<Object>>
  fullName: System.Action<System.Collections.Generic.IList<System.Object>, System.Collections.Generic.IList<System.Object>>
  nameWithType.vb: Action(Of IList(Of Object), IList(Of Object))
  fullname.vb: System.Action(Of System.Collections.Generic.IList(Of System.Object), System.Collections.Generic.IList(Of System.Object))
  name.vb: Action(Of IList(Of Object), IList(Of Object))
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
