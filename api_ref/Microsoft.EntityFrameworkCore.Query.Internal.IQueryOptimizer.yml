### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  id: IQueryOptimizer
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  langs:
  - csharp
  - vb
  name: IQueryOptimizer
  nameWithType: IQueryOptimizer
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/IQueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IQueryOptimizer
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/IQueryOptimizer.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public interface IQueryOptimizer
    content.vb: Public Interface IQueryOptimizer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  id: Optimize(System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation},QueryModel)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer
  langs:
  - csharp
  - vb
  name: Optimize(IReadOnlyCollection<IQueryAnnotation>, QueryModel)
  nameWithType: IQueryOptimizer.Optimize(IReadOnlyCollection<IQueryAnnotation>, QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation>, QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/IQueryOptimizer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Optimize
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/IQueryOptimizer.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: void Optimize(IReadOnlyCollection<IQueryAnnotation> queryAnnotations, QueryModel queryModel)
    content.vb: Sub Optimize(queryAnnotations As IReadOnlyCollection(Of IQueryAnnotation), queryModel As QueryModel)
    parameters:
    - id: queryAnnotations
      type: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
    - id: queryModel
      type: QueryModel
  overload: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize*
  nameWithType.vb: IQueryOptimizer.Optimize(IReadOnlyCollection(Of IQueryAnnotation), QueryModel)
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize(System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation), QueryModel)
  name.vb: Optimize(IReadOnlyCollection(Of IQueryAnnotation), QueryModel)
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize
  isExternal: false
  name: Optimize
  nameWithType: IQueryOptimizer.Optimize
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryOptimizer.Optimize
- uid: System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<IQueryAnnotation>
  nameWithType: IReadOnlyCollection<IQueryAnnotation>
  fullName: System.Collections.Generic.IReadOnlyCollection<Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation>
  nameWithType.vb: IReadOnlyCollection(Of IQueryAnnotation)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation)
  name.vb: IReadOnlyCollection(Of IQueryAnnotation)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
    name: IQueryAnnotation
    nameWithType: IQueryAnnotation
    fullName: Microsoft.EntityFrameworkCore.Query.ResultOperators.IQueryAnnotation
  - name: )
    nameWithType: )
    fullName: )
- uid: QueryModel
  isExternal: true
  name: QueryModel
  nameWithType: QueryModel
  fullName: QueryModel
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
