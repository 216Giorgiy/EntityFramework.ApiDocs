### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  commentId: T:Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  id: StartupInvoker
  parent: Microsoft.EntityFrameworkCore.Design.Internal
  children:
  - Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.#ctor(Microsoft.EntityFrameworkCore.Internal.LazyRef{ILogger},System.Reflection.Assembly,System.String,System.String)
  - Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(IServiceCollection)
  - Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(System.Type,IServiceCollection)
  - Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureHostServices(IServiceCollection)
  - Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureServices
  langs:
  - csharp
  - vb
  name: StartupInvoker
  nameWithType: StartupInvoker
  fullName: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: StartupInvoker
    path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Design.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public class StartupInvoker
    content.vb: Public Class StartupInvoker
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.#ctor(Microsoft.EntityFrameworkCore.Internal.LazyRef{ILogger},System.Reflection.Assembly,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.#ctor(Microsoft.EntityFrameworkCore.Internal.LazyRef{ILogger},System.Reflection.Assembly,System.String,System.String)
  id: '#ctor(Microsoft.EntityFrameworkCore.Internal.LazyRef{ILogger},System.Reflection.Assembly,System.String,System.String)'
  parent: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  langs:
  - csharp
  - vb
  name: StartupInvoker(LazyRef<ILogger>, Assembly, String, String)
  nameWithType: StartupInvoker.StartupInvoker(LazyRef<ILogger>, Assembly, String, String)
  fullName: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.StartupInvoker(Microsoft.EntityFrameworkCore.Internal.LazyRef<ILogger>, System.Reflection.Assembly, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Design.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public StartupInvoker(LazyRef<ILogger> logger, Assembly startupAssembly, string environment, string contentRootPath)
    content.vb: Public Sub New(logger As LazyRef(Of ILogger), startupAssembly As Assembly, environment As String, contentRootPath As String)
    parameters:
    - id: logger
      type: Microsoft.EntityFrameworkCore.Internal.LazyRef{ILogger}
    - id: startupAssembly
      type: System.Reflection.Assembly
    - id: environment
      type: System.String
    - id: contentRootPath
      type: System.String
  nameWithType.vb: StartupInvoker.StartupInvoker(LazyRef(Of ILogger), Assembly, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.StartupInvoker(Microsoft.EntityFrameworkCore.Internal.LazyRef(Of ILogger), System.Reflection.Assembly, System.String, System.String)
  name.vb: StartupInvoker(LazyRef(Of ILogger), Assembly, String, String)
- uid: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureServices
  commentId: M:Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureServices
  id: ConfigureServices
  parent: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  langs:
  - csharp
  - vb
  name: ConfigureServices()
  nameWithType: StartupInvoker.ConfigureServices()
  fullName: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureServices()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConfigureServices
    path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
    startLine: 64
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Design.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IServiceProvider ConfigureServices()
    content.vb: Public Overridable Function ConfigureServices As IServiceProvider
    return:
      type: System.IServiceProvider
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(IServiceCollection)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(IServiceCollection)
  id: ConfigureDesignTimeServices(IServiceCollection)
  parent: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  langs:
  - csharp
  - vb
  name: ConfigureDesignTimeServices(IServiceCollection)
  nameWithType: StartupInvoker.ConfigureDesignTimeServices(IServiceCollection)
  fullName: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConfigureDesignTimeServices
    path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
    startLine: 79
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Design.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IServiceCollection ConfigureDesignTimeServices(IServiceCollection services)
    content.vb: Public Overridable Function ConfigureDesignTimeServices(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: IServiceCollection
    return:
      type: IServiceCollection
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(System.Type,IServiceCollection)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(System.Type,IServiceCollection)
  id: ConfigureDesignTimeServices(System.Type,IServiceCollection)
  parent: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  langs:
  - csharp
  - vb
  name: ConfigureDesignTimeServices(Type, IServiceCollection)
  nameWithType: StartupInvoker.ConfigureDesignTimeServices(Type, IServiceCollection)
  fullName: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureDesignTimeServices(System.Type, IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConfigureDesignTimeServices
    path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
    startLine: 86
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Design.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IServiceCollection ConfigureDesignTimeServices(Type type, IServiceCollection services)
    content.vb: Public Overridable Function ConfigureDesignTimeServices(type As Type, services As IServiceCollection) As IServiceCollection
    parameters:
    - id: type
      type: System.Type
    - id: services
      type: IServiceCollection
    return:
      type: IServiceCollection
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureHostServices(IServiceCollection)
  commentId: M:Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureHostServices(IServiceCollection)
  id: ConfigureHostServices(IServiceCollection)
  parent: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker
  langs:
  - csharp
  - vb
  name: ConfigureHostServices(IServiceCollection)
  nameWithType: StartupInvoker.ConfigureHostServices(IServiceCollection)
  fullName: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.ConfigureHostServices(IServiceCollection)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConfigureHostServices
    path: src/Microsoft.EntityFrameworkCore.Design/Design/Internal/StartupInvoker.cs
    startLine: 152
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Design.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual IServiceCollection ConfigureHostServices(IServiceCollection services)
    content.vb: Protected Overridable Function ConfigureHostServices(services As IServiceCollection) As IServiceCollection
    parameters:
    - id: services
      type: IServiceCollection
    return:
      type: IServiceCollection
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Design.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Design.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Design.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Design.Internal
  fullName: Microsoft.EntityFrameworkCore.Design.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<StartupInvoker, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<StartupInvoker, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of StartupInvoker, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of StartupInvoker, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<StartupInvoker, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<StartupInvoker, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of StartupInvoker, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of StartupInvoker, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Design.Internal.StartupInvoker, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Internal.LazyRef{ILogger}
  commentId: T:Microsoft.EntityFrameworkCore.Internal.LazyRef{ILogger}
  parent: Microsoft.EntityFrameworkCore.Internal
  definition: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  name: LazyRef<ILogger>
  nameWithType: LazyRef<ILogger>
  fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef<ILogger>
  nameWithType.vb: LazyRef(Of ILogger)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.LazyRef(Of ILogger)
  name.vb: LazyRef(Of ILogger)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: <
    nameWithType: <
    fullName: <
  - uid: ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  commentId: T:Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  isExternal: false
  name: LazyRef<T>
  nameWithType: LazyRef<T>
  fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef<T>
  nameWithType.vb: LazyRef(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.LazyRef(Of T)
  name.vb: LazyRef(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: IServiceCollection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: IServiceCollection
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
