### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  id: PropertyAccessors
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  children:
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.#ctor(System.Delegate,System.Delegate,System.Delegate,System.Delegate,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.CurrentValueGetter
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.OriginalValueGetter
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.PreStoreGeneratedCurrentValueGetter
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.RelationshipSnapshotGetter
  - Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.ValueBufferGetter
  langs:
  - csharp
  - vb
  name: PropertyAccessors
  nameWithType: PropertyAccessors
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PropertyAccessors
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public sealed class PropertyAccessors
    content.vb: Public NotInheritable Class PropertyAccessors
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.#ctor(System.Delegate,System.Delegate,System.Delegate,System.Delegate,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.#ctor(System.Delegate,System.Delegate,System.Delegate,System.Delegate,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})
  id: '#ctor(System.Delegate,System.Delegate,System.Delegate,System.Delegate,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})'
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  langs:
  - csharp
  - vb
  name: PropertyAccessors(Delegate, Delegate, Delegate, Delegate, Func<ValueBuffer, Object>)
  nameWithType: PropertyAccessors.PropertyAccessors(Delegate, Delegate, Delegate, Delegate, Func<ValueBuffer, Object>)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.PropertyAccessors(System.Delegate, System.Delegate, System.Delegate, System.Delegate, System.Func<Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public PropertyAccessors(Delegate currentValueGetter, Delegate preStoreGeneratedCurrentValueGetter, Delegate originalValueGetter, Delegate relationshipSnapshotGetter, Func<ValueBuffer, object> valueBufferGetter)
    content.vb: Public Sub New(currentValueGetter As  Delegate, preStoreGeneratedCurrentValueGetter As  Delegate, originalValueGetter As  Delegate, relationshipSnapshotGetter As  Delegate, valueBufferGetter As Func(Of ValueBuffer, Object))
    parameters:
    - id: currentValueGetter
      type: System.Delegate
    - id: preStoreGeneratedCurrentValueGetter
      type: System.Delegate
    - id: originalValueGetter
      type: System.Delegate
    - id: relationshipSnapshotGetter
      type: System.Delegate
    - id: valueBufferGetter
      type: System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object}
  nameWithType.vb: PropertyAccessors.PropertyAccessors(Delegate, Delegate, Delegate, Delegate, Func(Of ValueBuffer, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.PropertyAccessors(System.Delegate, System.Delegate, System.Delegate, System.Delegate, System.Func(Of Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object))
  name.vb: PropertyAccessors(Delegate, Delegate, Delegate, Delegate, Func(Of ValueBuffer, Object))
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.CurrentValueGetter
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.CurrentValueGetter
  id: CurrentValueGetter
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  langs:
  - csharp
  - vb
  name: CurrentValueGetter
  nameWithType: PropertyAccessors.CurrentValueGetter
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.CurrentValueGetter
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CurrentValueGetter
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public Delegate CurrentValueGetter { get; }
    content.vb: 'Public ReadOnly Property CurrentValueGetter As '
    parameters: []
    return:
      type: System.Delegate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.PreStoreGeneratedCurrentValueGetter
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.PreStoreGeneratedCurrentValueGetter
  id: PreStoreGeneratedCurrentValueGetter
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  langs:
  - csharp
  - vb
  name: PreStoreGeneratedCurrentValueGetter
  nameWithType: PropertyAccessors.PreStoreGeneratedCurrentValueGetter
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.PreStoreGeneratedCurrentValueGetter
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: PreStoreGeneratedCurrentValueGetter
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
    startLine: 43
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public Delegate PreStoreGeneratedCurrentValueGetter { get; }
    content.vb: 'Public ReadOnly Property PreStoreGeneratedCurrentValueGetter As '
    parameters: []
    return:
      type: System.Delegate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.OriginalValueGetter
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.OriginalValueGetter
  id: OriginalValueGetter
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  langs:
  - csharp
  - vb
  name: OriginalValueGetter
  nameWithType: PropertyAccessors.OriginalValueGetter
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.OriginalValueGetter
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OriginalValueGetter
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public Delegate OriginalValueGetter { get; }
    content.vb: 'Public ReadOnly Property OriginalValueGetter As '
    parameters: []
    return:
      type: System.Delegate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.RelationshipSnapshotGetter
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.RelationshipSnapshotGetter
  id: RelationshipSnapshotGetter
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  langs:
  - csharp
  - vb
  name: RelationshipSnapshotGetter
  nameWithType: PropertyAccessors.RelationshipSnapshotGetter
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.RelationshipSnapshotGetter
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationshipSnapshotGetter
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public Delegate RelationshipSnapshotGetter { get; }
    content.vb: 'Public ReadOnly Property RelationshipSnapshotGetter As '
    parameters: []
    return:
      type: System.Delegate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.ValueBufferGetter
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.ValueBufferGetter
  id: ValueBufferGetter
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors
  langs:
  - csharp
  - vb
  name: ValueBufferGetter
  nameWithType: PropertyAccessors.ValueBufferGetter
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors.ValueBufferGetter
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ValueBufferGetter
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/PropertyAccessors.cs
    startLine: 61
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public Func<ValueBuffer, object> ValueBufferGetter { get; }
    content.vb: Public ReadOnly Property ValueBufferGetter As Func(Of ValueBuffer, Object)
    parameters: []
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Delegate
  commentId: T:System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<ValueBuffer, Object>
  nameWithType: Func<ValueBuffer, Object>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object>
  nameWithType.vb: Func(Of ValueBuffer, Object)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object)
  name.vb: Func(Of ValueBuffer, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
