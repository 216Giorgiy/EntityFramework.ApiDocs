### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  id: ValueBuffer
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object})
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object},System.Int32)
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Count
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Empty
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Equals(System.Object)
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.GetHashCode
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.IsEmpty
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Item(System.Int32)
  - Microsoft.EntityFrameworkCore.Storage.ValueBuffer.WithOffset(System.Int32)
  langs:
  - csharp
  - vb
  name: ValueBuffer
  nameWithType: ValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  type: Struct
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ValueBuffer
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Represents a set of indexed values. Typically used to represent a row of data returned from a database.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: public struct ValueBuffer
    content.vb: Public Structure ValueBuffer
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Empty
  commentId: F:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Empty
  id: Empty
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: ValueBuffer.Empty
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Empty
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Empty
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    A buffer with no values in it.\n"
  example: []
  syntax:
    content: public static readonly ValueBuffer Empty
    content.vb: Public Shared ReadOnly Empty As ValueBuffer
    return:
      type: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object})
  id: '#ctor(System.Collections.Generic.IList{System.Object})'
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: ValueBuffer(IList<Object>)
  nameWithType: ValueBuffer.ValueBuffer(IList<Object>)
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.ValueBuffer(System.Collections.Generic.IList<System.Object>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 34
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.ValueBuffer\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ValueBuffer(IList<object> values)
    content.vb: Public Sub New(values As IList(Of Object))
    parameters:
    - id: values
      type: System.Collections.Generic.IList{System.Object}
      description: 'The list of values for this buffer. '
  nameWithType.vb: ValueBuffer.ValueBuffer(IList(Of Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.ValueBuffer(System.Collections.Generic.IList(Of System.Object))
  name.vb: ValueBuffer(IList(Of Object))
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object},System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.#ctor(System.Collections.Generic.IList{System.Object},System.Int32)
  id: '#ctor(System.Collections.Generic.IList{System.Object},System.Int32)'
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: ValueBuffer(IList<Object>, Int32)
  nameWithType: ValueBuffer.ValueBuffer(IList<Object>, Int32)
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.ValueBuffer(System.Collections.Generic.IList<System.Object>, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.ValueBuffer\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ValueBuffer(IList<object> values, int offset)
    content.vb: Public Sub New(values As IList(Of Object), offset As Integer)
    parameters:
    - id: values
      type: System.Collections.Generic.IList{System.Object}
      description: 'The list of values for this buffer. '
    - id: offset
      type: System.Int32
      description: "\n    The starting slot in <em>values</em> for this buffer.\n"
  nameWithType.vb: ValueBuffer.ValueBuffer(IList(Of Object), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.ValueBuffer(System.Collections.Generic.IList(Of System.Object), System.Int32)
  name.vb: ValueBuffer(IList(Of Object), Int32)
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Item(System.Int32)
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ValueBuffer.Item[Int32]
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: this[]
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 60
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the value at a requested index.\n"
  example: []
  syntax:
    content: public object this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: 'The index of the value to get. '
    return:
      type: System.Object
      description: 'The value at the requested index. '
  nameWithType.vb: ValueBuffer.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Count
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Count
  id: Count
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ValueBuffer.Count
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Count
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Count
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 72
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the number of values in this buffer.\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.WithOffset(System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.WithOffset(System.Int32)
  id: WithOffset(System.Int32)
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: WithOffset(Int32)
  nameWithType: ValueBuffer.WithOffset(Int32)
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.WithOffset(System.Int32)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: WithOffset
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 81
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Creates a new buffer with data starting at the given index in the current buffer.\n"
  example: []
  syntax:
    content: public ValueBuffer WithOffset(int offset)
    content.vb: Public Function WithOffset(offset As Integer) As ValueBuffer
    parameters:
    - id: offset
      type: System.Int32
      description: "\n    The slot in the current buffer that will be the starting slot in the new buffer.\n"
    return:
      type: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
      description: 'The newly created buffer. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.IsEmpty
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.IsEmpty
  id: IsEmpty
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: ValueBuffer.IsEmpty
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.IsEmpty
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsEmpty
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 93
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets a value indicating whether the value buffer is empty.\n"
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Equals(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ValueBuffer.Equals(Object)
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Equals
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 104
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Determines if this value buffer is equivalent to a given object (i.e. if they are both value buffers and contain the same values).\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n    The object to compare this value buffer to.\n"
    return:
      type: System.Boolean
      description: "\n    True if the object is a <xref href=\"Microsoft.EntityFrameworkCore.Storage.ValueBuffer\" data-throw-if-not-resolved=\"false\"></xref> and contains the same values, otherwise false.\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.GetHashCode
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ValueBuffer.GetHashCode
  id: GetHashCode
  parent: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ValueBuffer.GetHashCode()
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetHashCode
    path: src/Microsoft.EntityFrameworkCore/Storage/ValueBuffer.cs
    startLine: 125
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the hash code for the value buffer.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n    The hash code for the value buffer.\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ValueBuffer
  nameWithType: ValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
- uid: System.Collections.Generic.IList{System.Object}
  commentId: T:System.Collections.Generic.IList{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Object>
  nameWithType: IList<Object>
  fullName: System.Collections.Generic.IList<System.Object>
  nameWithType.vb: IList(Of Object)
  fullname.vb: System.Collections.Generic.IList(Of System.Object)
  name.vb: IList(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
