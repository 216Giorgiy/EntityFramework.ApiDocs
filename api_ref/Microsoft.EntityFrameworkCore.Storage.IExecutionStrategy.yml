### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  id: IExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  langs:
  - csharp
  - vb
  name: IExecutionStrategy
  nameWithType: IExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IExecutionStrategy
    path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nA strategy that is used to execute a command or query against the database, possibly with logic to retry when a failure occurs.\n"
  example: []
  syntax:
    content: public interface IExecutionStrategy
    content.vb: Public Interface IExecutionStrategy
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{{TResult}})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{{TState}},{TState})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.Tasks.Task},{TState})
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task},{TState},System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{{TState},System.Threading.Tasks.Task{{TResult}}},{TState})
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  id: RetriesOnFailure
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  langs:
  - csharp
  - vb
  name: RetriesOnFailure
  nameWithType: IExecutionStrategy.RetriesOnFailure
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RetriesOnFailure
    path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nIndicates whether this <xref href=\"Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref> might retry the execution after a failure.\n"
  example: []
  syntax:
    content: bool RetriesOnFailure { get; }
    content.vb: ReadOnly Property RetriesOnFailure As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute``2(System.Func{``0,``1},``0)
  id: Execute``2(System.Func{``0,``1},``0)
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  langs:
  - csharp
  - vb
  name: Execute<TState, TResult>(Func<TState, TResult>, TState)
  nameWithType: IExecutionStrategy.Execute<TState, TResult>(Func<TState, TResult>, TState)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>(System.Func<TState, TResult>, TState)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Execute
    path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nExecutes the specified operation and returns the result.\n"
  example: []
  syntax:
    content: TResult Execute<TState, TResult>(Func<TState, TResult> operation, TState state)
    content.vb: Function Execute(Of TState, TResult)(operation As Func(Of TState, TResult), state As TState) As TResult
    parameters:
    - id: operation
      type: System.Func{{TState},{TResult}}
      description: "\nA delegate representing an executable operation that returns the result of type <em>TResult</em>.\n"
    - id: state
      type: '{TState}'
      description: The state that will be passed to the operation.
    typeParameters:
    - id: TState
      description: The type of the state.
    - id: TResult
      description: The return type of <em>operation</em>.
    return:
      type: '{TResult}'
      description: The result from the operation.
  overload: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute*
  nameWithType.vb: IExecutionStrategy.Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)(System.Func(Of TState, TResult), TState)
  name.vb: Execute(Of TState, TResult)(Func(Of TState, TResult), TState)
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  id: ExecuteAsync``2(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, TState, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Storage/IExecutionStrategy.cs
    startLine: 52
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nExecutes the specified asynchronous operation and returns the result.\n"
  example: []
  syntax:
    content: Task<TResult> ExecuteAsync<TState, TResult>(Func<TState, CancellationToken, Task<TResult>> operation, TState state, CancellationToken cancellationToken)
    content.vb: Function ExecuteAsync(Of TState, TResult)(operation As Func(Of TState, CancellationToken, Task(Of TResult)), state As TState, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: operation
      type: System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}}
      description: "\nA function that returns a started task of type <em>TResult</em>.\n"
    - id: state
      type: '{TState}'
      description: The state that will be passed to the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA cancellation token used to cancel the retry operation, but not operations that are already in flight\nor that already completed successfully.\n"
    typeParameters:
    - id: TState
      description: The type of the state.
    - id: TResult
      description: "\nThe result type of the <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> returned by <em>operation</em>.\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\nA task that will run to completion if the original task completes successfully (either the\nfirst time or after retrying transient failures). If the task fails with a non-transient error or\nthe retry limit is reached, the returned task will become faulted and the exception must be observed.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync*
  nameWithType.vb: IExecutionStrategy.ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, CancellationToken, Task(Of TResult)), TState, CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  name: Execute(Action)
  nameWithType: ExecutionStrategyExtensions.Execute(Action)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{{TResult}})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  name: Execute<TResult>(Func<TResult>)
  nameWithType: ExecutionStrategyExtensions.Execute<TResult>(Func<TResult>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>(System.Func<TResult>)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TResult)(Func(Of TResult))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)(System.Func(Of TResult))
  name.vb: Execute(Of TResult)(Func(Of TResult))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{``0})
    name: Execute<TResult>
    nameWithType: ExecutionStrategyExtensions.Execute<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Func{``0})
    name: Execute(Of TResult)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{{TState}},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  name: Execute<TState>(Action<TState>, TState)
  nameWithType: ExecutionStrategyExtensions.Execute<TState>(Action<TState>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>(System.Action<TState>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TState)(Action(Of TState), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)(System.Action(Of TState), TState)
  name.vb: Execute(Of TState)(Action(Of TState), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{``0},``0)
    name: Execute<TState>
    nameWithType: ExecutionStrategyExtensions.Execute<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(System.Action{``0},``0)
    name: Execute(Of TState)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  name: ExecuteAsync(Func<Task>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Func<Task>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Func(Of Task))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func(Of System.Threading.Tasks.Task))
  name.vb: ExecuteAsync(Func(Of Task))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  name: ExecuteAsync(Func<CancellationToken, Task>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Func<CancellationToken, Task>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Func(Of CancellationToken, Task), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Func(Of CancellationToken, Task), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{{TResult}}})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  name: ExecuteAsync<TResult>(Func<Task<TResult>>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(Func<Task<TResult>>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  name: ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.Tasks.Task},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  name: ExecuteAsync<TState>(Func<TState, Task>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(Func<TState, Task>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(System.Func<TState, System.Threading.Tasks.Task>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Func(Of TState, Task), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(System.Func(Of TState, System.Threading.Tasks.Task), TState)
  name.vb: ExecuteAsync(Of TState)(Func(Of TState, Task), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task},{TState},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  name: ExecuteAsync<TState>(Func<TState, CancellationToken, Task>, TState, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(Func<TState, CancellationToken, Task>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task>, TState, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState)(Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{{TState},System.Threading.Tasks.Task{{TResult}}},{TState})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  parent: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  definition: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  name: ExecuteAsync<TState, TResult>(Func<TState, Task<TResult>>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(Func<TState, Task<TResult>>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(System.Func<TState, System.Threading.Tasks.Task<TResult>>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(Func(Of TState, Task(Of TResult)), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(System.Func(Of TState, System.Threading.Tasks.Task(Of TResult)), TState)
  name.vb: ExecuteAsync(Of TState, TResult)(Func(Of TState, Task(Of TResult)), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync<TState, TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
  isExternal: true
  name: Execute(IExecutionStrategy, Action)
  nameWithType: ExecutionStrategyExtensions.Execute(IExecutionStrategy, Action)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Action)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action)
    name: Execute
    nameWithType: ExecutionStrategyExtensions.Execute
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  commentId: T:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: ExecutionStrategyExtensions
  nameWithType: ExecutionStrategyExtensions
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
  isExternal: true
  name: Execute<TResult>(IExecutionStrategy, Func<TResult>)
  nameWithType: ExecutionStrategyExtensions.Execute<TResult>(IExecutionStrategy, Func<TResult>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TResult>)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TResult)(IExecutionStrategy, Func(Of TResult))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TResult))
  name.vb: Execute(Of TResult)(IExecutionStrategy, Func(Of TResult))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
    name: Execute<TResult>
    nameWithType: ExecutionStrategyExtensions.Execute<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0})
    name: Execute(Of TResult)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
  isExternal: true
  name: Execute<TState>(IExecutionStrategy, Action<TState>, TState)
  nameWithType: ExecutionStrategyExtensions.Execute<TState>(IExecutionStrategy, Action<TState>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Action<TState>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.Execute(Of TState)(IExecutionStrategy, Action(Of TState), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Action(Of TState), TState)
  name.vb: Execute(Of TState)(IExecutionStrategy, Action(Of TState), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
    name: Execute<TState>
    nameWithType: ExecutionStrategyExtensions.Execute<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action{``0},``0)
    name: Execute(Of TState)
    nameWithType: ExecutionStrategyExtensions.Execute(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
  isExternal: true
  name: ExecuteAsync(IExecutionStrategy, Func<Task>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func<Task>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.Tasks.Task>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func(Of Task))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.Tasks.Task))
  name.vb: ExecuteAsync(IExecutionStrategy, Func(Of Task))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task})
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync(IExecutionStrategy, Func<CancellationToken, Task>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func<CancellationToken, Task>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(IExecutionStrategy, Func(Of CancellationToken, Task), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(IExecutionStrategy, Func(Of CancellationToken, Task), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
  isExternal: true
  name: ExecuteAsync<TResult>(IExecutionStrategy, Func<Task<TResult>>)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(IExecutionStrategy, Func<Task<TResult>>)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.Tasks.Task<TResult>>)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of Task(Of TResult)))
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of Task(Of TResult)))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task{``0}})
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync<TResult>(IExecutionStrategy, Func<CancellationToken, Task<TResult>>, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>(IExecutionStrategy, Func<CancellationToken, Task<TResult>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(IExecutionStrategy, Func(Of CancellationToken, Task(Of TResult)), CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync<TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
    name: ExecuteAsync(Of TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
  isExternal: true
  name: ExecuteAsync<TState>(IExecutionStrategy, Func<TState, Task>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(IExecutionStrategy, Func<TState, Task>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TState, System.Threading.Tasks.Task>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, Task), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TState, System.Threading.Tasks.Task), TState)
  name.vb: ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, Task), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task},``0)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
  isExternal: true
  name: ExecuteAsync<TState>(IExecutionStrategy, Func<TState, CancellationToken, Task>, TState, CancellationToken)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>(IExecutionStrategy, Func<TState, CancellationToken, Task>, TState, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task>, TState, System.Threading.CancellationToken)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task), TState, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TState)(IExecutionStrategy, Func(Of TState, CancellationToken, Task), TState, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync<TState>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},``0,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TState)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  commentId: M:Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
  isExternal: true
  name: ExecuteAsync<TState, TResult>(IExecutionStrategy, Func<TState, Task<TResult>>, TState)
  nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(IExecutionStrategy, Func<TState, Task<TResult>>, TState)
  fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func<TState, System.Threading.Tasks.Task<TResult>>, TState)
  nameWithType.vb: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(IExecutionStrategy, Func(Of TState, Task(Of TResult)), TState)
  fullname.vb: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy, System.Func(Of TState, System.Threading.Tasks.Task(Of TResult)), TState)
  name.vb: ExecuteAsync(Of TState, TResult)(IExecutionStrategy, Func(Of TState, Task(Of TResult)), TState)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync<TState, TResult>
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync<TState, TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0,System.Threading.Tasks.Task{``1}},``0)
    name: ExecuteAsync(Of TState, TResult)
    nameWithType: ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
    fullName: Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.ExecuteAsync(Of TState, TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IExecutionStrategy
  nameWithType: IExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
  isExternal: false
  name: RetriesOnFailure
  nameWithType: IExecutionStrategy.RetriesOnFailure
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.RetriesOnFailure
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute
  isExternal: false
  name: Execute<TState, TResult>
  nameWithType: IExecutionStrategy.Execute<TState, TResult>
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute<TState, TResult>
  nameWithType.vb: IExecutionStrategy.Execute(Of TState, TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.Execute(Of TState, TResult)
  name.vb: Execute(Of TState, TResult)
- uid: System.Func{{TState},{TResult}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TState, TResult>
  nameWithType: Func<TState, TResult>
  fullName: System.Func<TState, TResult>
  nameWithType.vb: Func(Of TState, TResult)
  fullname.vb: System.Func(Of TState, TResult)
  name.vb: Func(Of TState, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TState}'
  commentId: '!:TState'
  definition: TState
  name: TState
  nameWithType: TState
  fullName: TState
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TState
  isExternal: false
  name: TState
  nameWithType: TState
  fullName: TState
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync
  isExternal: false
  name: ExecuteAsync<TState, TResult>
  nameWithType: IExecutionStrategy.ExecuteAsync<TState, TResult>
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync<TState, TResult>
  nameWithType.vb: IExecutionStrategy.ExecuteAsync(Of TState, TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy.ExecuteAsync(Of TState, TResult)
  name.vb: ExecuteAsync(Of TState, TResult)
- uid: System.Func{{TState},System.Threading.CancellationToken,System.Threading.Tasks.Task{{TResult}}}
  commentId: T:System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}}
  parent: System
  definition: System.Func`3
  name: Func<TState, CancellationToken, Task<TResult>>
  nameWithType: Func<TState, CancellationToken, Task<TResult>>
  fullName: System.Func<TState, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of TState, CancellationToken, Task(Of TResult))
  fullname.vb: System.Func(Of TState, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of TState, CancellationToken, Task(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
