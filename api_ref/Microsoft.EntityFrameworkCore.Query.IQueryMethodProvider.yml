### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  commentId: T:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  id: IQueryMethodProvider
  parent: Microsoft.EntityFrameworkCore.Query
  children:
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateCollectionRelatedEntitiesLoaderMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateGroupJoinInclude(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation},System.Boolean,System.Object,System.Object)
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateReferenceRelatedEntitiesLoaderMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.DefaultIfEmptyShapedQueryMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GetResultMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupByMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinIncludeType
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.IncludeMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.InjectParametersMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.QueryMethod
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.RelatedEntitiesLoaderType
  - Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.ShapedQueryMethod
  langs:
  - csharp
  - vb
  name: IQueryMethodProvider
  nameWithType: IQueryMethodProvider
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IQueryMethodProvider
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Provides reflection objects for late-binding to relational query operations.\n"
  example: []
  syntax:
    content: public interface IQueryMethodProvider
    content.vb: Public Interface IQueryMethodProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinMethod
  id: GroupJoinMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: GroupJoinMethod
  nameWithType: IQueryMethodProvider.GroupJoinMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GroupJoinMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the group join method.\n"
  example: []
  syntax:
    content: MethodInfo GroupJoinMethod { get; }
    content.vb: ReadOnly Property GroupJoinMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The group join method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupByMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupByMethod
  id: GroupByMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: GroupByMethod
  nameWithType: IQueryMethodProvider.GroupByMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupByMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GroupByMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the group by method.\n"
  example: []
  syntax:
    content: MethodInfo GroupByMethod { get; }
    content.vb: ReadOnly Property GroupByMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The group by method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.ShapedQueryMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.ShapedQueryMethod
  id: ShapedQueryMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: ShapedQueryMethod
  nameWithType: IQueryMethodProvider.ShapedQueryMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.ShapedQueryMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ShapedQueryMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the shaped query method.\n"
  example: []
  syntax:
    content: MethodInfo ShapedQueryMethod { get; }
    content.vb: ReadOnly Property ShapedQueryMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The shaped query method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.DefaultIfEmptyShapedQueryMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.DefaultIfEmptyShapedQueryMethod
  id: DefaultIfEmptyShapedQueryMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: DefaultIfEmptyShapedQueryMethod
  nameWithType: IQueryMethodProvider.DefaultIfEmptyShapedQueryMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.DefaultIfEmptyShapedQueryMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DefaultIfEmptyShapedQueryMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the default if empty shaped query method.\n"
  example: []
  syntax:
    content: MethodInfo DefaultIfEmptyShapedQueryMethod { get; }
    content.vb: ReadOnly Property DefaultIfEmptyShapedQueryMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The default if empty shaped query method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.QueryMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.QueryMethod
  id: QueryMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: QueryMethod
  nameWithType: IQueryMethodProvider.QueryMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.QueryMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QueryMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 54
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the query method.\n"
  example: []
  syntax:
    content: MethodInfo QueryMethod { get; }
    content.vb: ReadOnly Property QueryMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The query method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GetResultMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GetResultMethod
  id: GetResultMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: GetResultMethod
  nameWithType: IQueryMethodProvider.GetResultMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GetResultMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetResultMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 62
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the get result method.\n"
  example: []
  syntax:
    content: MethodInfo GetResultMethod { get; }
    content.vb: ReadOnly Property GetResultMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The get result method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.IncludeMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.IncludeMethod
  id: IncludeMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: IncludeMethod
  nameWithType: IQueryMethodProvider.IncludeMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.IncludeMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IncludeMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 70
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the include method.\n"
  example: []
  syntax:
    content: MethodInfo IncludeMethod { get; }
    content.vb: ReadOnly Property IncludeMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The include method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.RelatedEntitiesLoaderType
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.RelatedEntitiesLoaderType
  id: RelatedEntitiesLoaderType
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: RelatedEntitiesLoaderType
  nameWithType: IQueryMethodProvider.RelatedEntitiesLoaderType
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.RelatedEntitiesLoaderType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelatedEntitiesLoaderType
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 78
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the type of the related entities loader.\n"
  example: []
  syntax:
    content: Type RelatedEntitiesLoaderType { get; }
    content.vb: ReadOnly Property RelatedEntitiesLoaderType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n    The type of the related entities loader.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateReferenceRelatedEntitiesLoaderMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateReferenceRelatedEntitiesLoaderMethod
  id: CreateReferenceRelatedEntitiesLoaderMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: CreateReferenceRelatedEntitiesLoaderMethod
  nameWithType: IQueryMethodProvider.CreateReferenceRelatedEntitiesLoaderMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateReferenceRelatedEntitiesLoaderMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateReferenceRelatedEntitiesLoaderMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 86
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the create reference related entities loader method.\n"
  example: []
  syntax:
    content: MethodInfo CreateReferenceRelatedEntitiesLoaderMethod { get; }
    content.vb: ReadOnly Property CreateReferenceRelatedEntitiesLoaderMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The create reference related entities loader method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateCollectionRelatedEntitiesLoaderMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateCollectionRelatedEntitiesLoaderMethod
  id: CreateCollectionRelatedEntitiesLoaderMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: CreateCollectionRelatedEntitiesLoaderMethod
  nameWithType: IQueryMethodProvider.CreateCollectionRelatedEntitiesLoaderMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateCollectionRelatedEntitiesLoaderMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateCollectionRelatedEntitiesLoaderMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 94
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the create collection related entities loader method.\n"
  example: []
  syntax:
    content: MethodInfo CreateCollectionRelatedEntitiesLoaderMethod { get; }
    content.vb: ReadOnly Property CreateCollectionRelatedEntitiesLoaderMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The create collection related entities loader method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.InjectParametersMethod
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.InjectParametersMethod
  id: InjectParametersMethod
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: InjectParametersMethod
  nameWithType: IQueryMethodProvider.InjectParametersMethod
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.InjectParametersMethod
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InjectParametersMethod
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 102
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the inject parameters method.\n"
  example: []
  syntax:
    content: MethodInfo InjectParametersMethod { get; }
    content.vb: ReadOnly Property InjectParametersMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n    The pre execute method.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinIncludeType
  commentId: P:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinIncludeType
  id: GroupJoinIncludeType
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: GroupJoinIncludeType
  nameWithType: IQueryMethodProvider.GroupJoinIncludeType
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.GroupJoinIncludeType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GroupJoinIncludeType
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 110
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the type of the group join include.\n"
  example: []
  syntax:
    content: Type GroupJoinIncludeType { get; }
    content.vb: ReadOnly Property GroupJoinIncludeType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n    The type of the group join include.\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateGroupJoinInclude(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation},System.Boolean,System.Object,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateGroupJoinInclude(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation},System.Boolean,System.Object,System.Object)
  id: CreateGroupJoinInclude(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation},System.Boolean,System.Object,System.Object)
  parent: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider
  langs:
  - csharp
  - vb
  name: CreateGroupJoinInclude(IReadOnlyList<INavigation>, Boolean, Object, Object)
  nameWithType: IQueryMethodProvider.CreateGroupJoinInclude(IReadOnlyList<INavigation>, Boolean, Object, Object)
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateGroupJoinInclude(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.INavigation>, System.Boolean, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateGroupJoinInclude
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/IQueryMethodProvider.cs
    startLine: 123
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Creates a group join include used to describe an Include operation that should\n    be performed as part of a GroupJoin.\n"
  example: []
  syntax:
    content: object CreateGroupJoinInclude(IReadOnlyList<INavigation> navigationPath, bool querySourceRequiresTracking, object existingGroupJoinInclude, object relatedEntitiesLoaders)
    content.vb: Function CreateGroupJoinInclude(navigationPath As IReadOnlyList(Of INavigation), querySourceRequiresTracking As Boolean, existingGroupJoinInclude As Object, relatedEntitiesLoaders As Object) As Object
    parameters:
    - id: navigationPath
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
      description: 'The included navigation path. '
    - id: querySourceRequiresTracking
      type: System.Boolean
      description: 'true if this query source requires tracking. '
    - id: existingGroupJoinInclude
      type: System.Object
      description: 'A possibly null existing group join include. '
    - id: relatedEntitiesLoaders
      type: System.Object
      description: 'The related entities loaders. '
    return:
      type: System.Object
      description: "\n    A new group join include.\n"
  nameWithType.vb: IQueryMethodProvider.CreateGroupJoinInclude(IReadOnlyList(Of INavigation), Boolean, Object, Object)
  fullName.vb: Microsoft.EntityFrameworkCore.Query.IQueryMethodProvider.CreateGroupJoinInclude(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.INavigation), System.Boolean, System.Object, System.Object)
  name.vb: CreateGroupJoinInclude(IReadOnlyList(Of INavigation), Boolean, Object, Object)
references:
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<INavigation>
  nameWithType: IReadOnlyList<INavigation>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.INavigation>
  nameWithType.vb: IReadOnlyList(Of INavigation)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.INavigation)
  name.vb: IReadOnlyList(Of INavigation)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
