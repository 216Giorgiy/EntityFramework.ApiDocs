### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  commentId: T:Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  id: IncludeSpecification
  parent: Microsoft.EntityFrameworkCore.Query
  children:
  - Microsoft.EntityFrameworkCore.Query.IncludeSpecification.#ctor(IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})
  - Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget
  - Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath
  - Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource
  - Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString
  langs:
  - csharp
  - vb
  name: IncludeSpecification
  nameWithType: IncludeSpecification
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IncludeSpecification
    path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nRepresents a single query include operation.\n"
  example: []
  syntax:
    content: public class IncludeSpecification
    content.vb: Public Class IncludeSpecification
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.#ctor(IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})
  commentId: M:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.#ctor(IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})
  id: '#ctor(IQuerySource,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation})'
  parent: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  langs:
  - csharp
  - vb
  name: IncludeSpecification(IQuerySource, IReadOnlyList<INavigation>)
  nameWithType: IncludeSpecification.IncludeSpecification(IQuerySource, IReadOnlyList<INavigation>)
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IncludeSpecification(IQuerySource, System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.INavigation>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nInitializes a new instance of the Microsoft.EntityFrameworkCore.Query.IncludeSpecification class.\n"
  example: []
  syntax:
    content: public IncludeSpecification(IQuerySource querySource, IReadOnlyList<INavigation> navigationPath)
    content.vb: Public Sub New(querySource As IQuerySource, navigationPath As IReadOnlyList(Of INavigation))
    parameters:
    - id: querySource
      type: IQuerySource
      description: 'The query source. '
    - id: navigationPath
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
      description: 'The set of navigation properties to be included. '
  overload: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.#ctor*
  nameWithType.vb: IncludeSpecification.IncludeSpecification(IQuerySource, IReadOnlyList(Of INavigation))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IncludeSpecification(IQuerySource, System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.INavigation))
  name.vb: IncludeSpecification(IQuerySource, IReadOnlyList(Of INavigation))
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource
  commentId: P:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource
  id: QuerySource
  parent: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  langs:
  - csharp
  - vb
  name: QuerySource
  nameWithType: IncludeSpecification.QuerySource
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QuerySource
    path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
    startLine: 40
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nGets the query source.\n"
  example: []
  syntax:
    content: public virtual IQuerySource QuerySource { get; }
    content.vb: Public Overridable ReadOnly Property QuerySource As IQuerySource
    parameters: []
    return:
      type: IQuerySource
      description: "\nThe query source.\n"
  overload: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath
  commentId: P:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath
  id: NavigationPath
  parent: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  langs:
  - csharp
  - vb
  name: NavigationPath
  nameWithType: IncludeSpecification.NavigationPath
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NavigationPath
    path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
    startLine: 48
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nGets the set of navigation properties to be included.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<INavigation> NavigationPath { get; }
    content.vb: Public Overridable ReadOnly Property NavigationPath As IReadOnlyList(Of INavigation)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
      description: "\nThe set of navigation properties to be included.\n"
  overload: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget
  commentId: P:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget
  id: IsEnumerableTarget
  parent: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  langs:
  - csharp
  - vb
  name: IsEnumerableTarget
  nameWithType: IncludeSpecification.IsEnumerableTarget
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsEnumerableTarget
    path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
    startLine: 56
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nGets or sets a value indicating whether this object is an enumerable target.\n"
  example: []
  syntax:
    content: public virtual bool IsEnumerableTarget { get; set; }
    content.vb: Public Overridable Property IsEnumerableTarget As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\nTrue if this object is an enumerable target, false if not.\n"
  overload: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString
  commentId: M:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString
  id: ToString
  parent: Microsoft.EntityFrameworkCore.Query.IncludeSpecification
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: IncludeSpecification.ToString()
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ToString
    path: src/Microsoft.EntityFrameworkCore/Query/IncludeSpecification.cs
    startLine: 64
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\nConvert this object into a string representation.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\nA string that represents this object.\n"
  overridden: System.Object.ToString
  overload: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.#ctor
  isExternal: false
  name: IncludeSpecification
  nameWithType: IncludeSpecification.IncludeSpecification
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IncludeSpecification
- uid: IQuerySource
  isExternal: true
  name: IQuerySource
  nameWithType: IQuerySource
  fullName: IQuerySource
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.INavigation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<INavigation>
  nameWithType: IReadOnlyList<INavigation>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Metadata.INavigation>
  nameWithType.vb: IReadOnlyList(Of INavigation)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Metadata.INavigation)
  name.vb: IReadOnlyList(Of INavigation)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.INavigation
    name: INavigation
    nameWithType: INavigation
    fullName: Microsoft.EntityFrameworkCore.Metadata.INavigation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource
  isExternal: false
  name: QuerySource
  nameWithType: IncludeSpecification.QuerySource
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.QuerySource
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath
  isExternal: false
  name: NavigationPath
  nameWithType: IncludeSpecification.NavigationPath
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.NavigationPath
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget
  isExternal: false
  name: IsEnumerableTarget
  nameWithType: IncludeSpecification.IsEnumerableTarget
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.IsEnumerableTarget
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString
  isExternal: false
  name: ToString
  nameWithType: IncludeSpecification.ToString
  fullName: Microsoft.EntityFrameworkCore.Query.IncludeSpecification.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
