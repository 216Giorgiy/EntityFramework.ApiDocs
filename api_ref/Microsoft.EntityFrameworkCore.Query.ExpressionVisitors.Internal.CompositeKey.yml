### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  id: CompositeKey
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.#ctor(System.Object[])
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.CompositeKeyCtor
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.Equals(System.Object)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.GetHashCode
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.op_Equality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  - Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.op_Inequality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  langs:
  - csharp
  - vb
  name: CompositeKey
  nameWithType: CompositeKey
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  type: Struct
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CompositeKey
    path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public struct CompositeKey
    content.vb: Public Structure CompositeKey
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.CompositeKeyCtor
  commentId: F:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.CompositeKeyCtor
  id: CompositeKeyCtor
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  langs:
  - csharp
  - vb
  name: CompositeKeyCtor
  nameWithType: CompositeKey.CompositeKeyCtor
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.CompositeKeyCtor
  type: Field
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CompositeKeyCtor
    path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static readonly ConstructorInfo CompositeKeyCtor
    content.vb: Public Shared ReadOnly CompositeKeyCtor As ConstructorInfo
    return:
      type: System.Reflection.ConstructorInfo
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.op_Equality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.op_Equality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  id: op_Equality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  langs:
  - csharp
  - vb
  name: Equality(CompositeKey, CompositeKey)
  nameWithType: CompositeKey.Equality(CompositeKey, CompositeKey)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.Equality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  type: Operator
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: op_Equality
    path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
    startLine: 27
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool operator ==(CompositeKey x, CompositeKey y)
    content.vb: Public Shared Operator =(x As CompositeKey, y As CompositeKey) As Boolean
    parameters:
    - id: x
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
    - id: y
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.op_Inequality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.op_Inequality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  id: op_Inequality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey,Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  langs:
  - csharp
  - vb
  name: Inequality(CompositeKey, CompositeKey)
  nameWithType: CompositeKey.Inequality(CompositeKey, CompositeKey)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.Inequality(Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey, Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey)
  type: Operator
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: op_Inequality
    path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
    startLine: 33
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static bool operator !=(CompositeKey x, CompositeKey y)
    content.vb: Public Shared Operator <>(x As CompositeKey, y As CompositeKey) As Boolean
    parameters:
    - id: x
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
    - id: y
      type: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.#ctor(System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.#ctor(System.Object[])
  id: '#ctor(System.Object[])'
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  langs:
  - csharp
  - vb
  name: CompositeKey(Object[])
  nameWithType: CompositeKey.CompositeKey(Object[])
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.CompositeKey(System.Object[])
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public CompositeKey(object[] values)
    content.vb: Public Sub New(values As Object())
    parameters:
    - id: values
      type: System.Object[]
  nameWithType.vb: CompositeKey.CompositeKey(Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.CompositeKey(System.Object())
  name.vb: CompositeKey(Object())
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.Equals(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: CompositeKey.Equals(Object)
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Equals
    path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
    startLine: 51
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.GetHashCode
  commentId: M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.GetHashCode
  id: GetHashCode
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: CompositeKey.GetHashCode()
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetHashCode
    path: src/Microsoft.EntityFrameworkCore/Query/ExpressionVisitors/Internal/CompositeKey.cs
    startLine: 58
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: true
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  commentId: T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
  parent: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal
  isExternal: false
  name: CompositeKey
  nameWithType: CompositeKey
  fullName: Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.CompositeKey
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
