### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
  id: ICompiledQueryCache
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}})
  - Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}})
  langs:
  - csharp
  - vb
  name: ICompiledQueryCache
  nameWithType: ICompiledQueryCache
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/ICompiledQueryCache.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ICompiledQueryCache
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/ICompiledQueryCache.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public interface ICompiledQueryCache
    content.vb: Public Interface ICompiledQueryCache
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}})
  id: GetOrAddQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}})
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
  langs:
  - csharp
  - vb
  name: GetOrAddQuery<TResult>(Object, Func<Func<QueryContext, TResult>>)
  nameWithType: ICompiledQueryCache.GetOrAddQuery<TResult>(Object, Func<Func<QueryContext, TResult>>)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery<TResult>(System.Object, System.Func<System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, TResult>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/ICompiledQueryCache.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddQuery
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/ICompiledQueryCache.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: Func<QueryContext, TResult> GetOrAddQuery<TResult>(object cacheKey, Func<Func<QueryContext, TResult>> compiler)
    content.vb: Function GetOrAddQuery(Of TResult)(cacheKey As Object, compiler As Func(Of Func(Of QueryContext, TResult))) As Func(Of QueryContext, TResult)
    parameters:
    - id: cacheKey
      type: System.Object
    - id: compiler
      type: System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResult}}}
    typeParameters:
    - id: TResult
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResult}}
  overload: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery*
  nameWithType.vb: ICompiledQueryCache.GetOrAddQuery(Of TResult)(Object, Func(Of Func(Of QueryContext, TResult)))
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery(Of TResult)(System.Object, System.Func(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, TResult)))
  name.vb: GetOrAddQuery(Of TResult)(Object, Func(Of Func(Of QueryContext, TResult)))
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}})
  id: GetOrAddAsyncQuery``1(System.Object,System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}})
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
  langs:
  - csharp
  - vb
  name: GetOrAddAsyncQuery<TResult>(Object, Func<Func<QueryContext, IAsyncEnumerable<TResult>>>)
  nameWithType: ICompiledQueryCache.GetOrAddAsyncQuery<TResult>(Object, Func<Func<QueryContext, IAsyncEnumerable<TResult>>>)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery<TResult>(System.Object, System.Func<System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable<TResult>>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/ICompiledQueryCache.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetOrAddAsyncQuery
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/ICompiledQueryCache.cs
    startLine: 27
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: Func<QueryContext, IAsyncEnumerable<TResult>> GetOrAddAsyncQuery<TResult>(object cacheKey, Func<Func<QueryContext, IAsyncEnumerable<TResult>>> compiler)
    content.vb: Function GetOrAddAsyncQuery(Of TResult)(cacheKey As Object, compiler As Func(Of Func(Of QueryContext, IAsyncEnumerable(Of TResult)))) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))
    parameters:
    - id: cacheKey
      type: System.Object
    - id: compiler
      type: System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}}
    typeParameters:
    - id: TResult
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
  overload: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery*
  nameWithType.vb: ICompiledQueryCache.GetOrAddAsyncQuery(Of TResult)(Object, Func(Of Func(Of QueryContext, IAsyncEnumerable(Of TResult))))
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery(Of TResult)(System.Object, System.Func(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable(Of TResult))))
  name.vb: GetOrAddAsyncQuery(Of TResult)(Object, Func(Of Func(Of QueryContext, IAsyncEnumerable(Of TResult))))
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery
  isExternal: false
  name: GetOrAddQuery<TResult>
  nameWithType: ICompiledQueryCache.GetOrAddQuery<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery<TResult>
  nameWithType.vb: ICompiledQueryCache.GetOrAddQuery(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddQuery(Of TResult)
  name.vb: GetOrAddQuery(Of TResult)
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResult}}}
  commentId: T:System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}}
  parent: System
  definition: System.Func`1
  name: Func<Func<QueryContext, TResult>>
  nameWithType: Func<Func<QueryContext, TResult>>
  fullName: System.Func<System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, TResult>>
  nameWithType.vb: Func(Of Func(Of QueryContext, TResult))
  fullname.vb: System.Func(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, TResult))
  name.vb: Func(Of Func(Of QueryContext, TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResult}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, TResult>
  nameWithType: Func<QueryContext, TResult>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, TResult>
  nameWithType.vb: Func(Of QueryContext, TResult)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, TResult)
  name.vb: Func(Of QueryContext, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery*
  commentId: Overload:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery
  isExternal: false
  name: GetOrAddAsyncQuery<TResult>
  nameWithType: ICompiledQueryCache.GetOrAddAsyncQuery<TResult>
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery<TResult>
  nameWithType.vb: ICompiledQueryCache.GetOrAddAsyncQuery(Of TResult)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache.GetOrAddAsyncQuery(Of TResult)
  name.vb: GetOrAddAsyncQuery(Of TResult)
- uid: System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}}
  commentId: T:System.Func{System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}}
  parent: System
  definition: System.Func`1
  name: Func<Func<QueryContext, IAsyncEnumerable<TResult>>>
  nameWithType: Func<Func<QueryContext, IAsyncEnumerable<TResult>>>
  fullName: System.Func<System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable<TResult>>>
  nameWithType.vb: Func(Of Func(Of QueryContext, IAsyncEnumerable(Of TResult)))
  fullname.vb: System.Func(Of System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable(Of TResult)))
  name.vb: Func(Of Func(Of QueryContext, IAsyncEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, IAsyncEnumerable<TResult>>
  nameWithType: Func<QueryContext, IAsyncEnumerable<TResult>>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable<TResult>>
  nameWithType.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable(Of TResult))
  name.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
