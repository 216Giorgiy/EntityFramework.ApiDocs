### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  id: ModelBuilderTest.TestEntityTypeBuilder`1
  parent: Microsoft.EntityFrameworkCore.Tests
  children:
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAlternateKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAlternateKey(System.String[])
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAnnotation(System.String,System.Object)
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasBaseType(System.String)
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasBaseType``1
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasIndex(System.String[])
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasKey(System.String[])
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Ignore(System.String)
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Metadata
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Property``1(System.String)
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  langs:
  - csharp
  - vb
  name: ModelBuilderTest.TestEntityTypeBuilder<TEntity>
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: TestEntityTypeBuilder
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 144
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: >-
      public abstract class TestEntityTypeBuilder<TEntity>
          where TEntity : class
    content.vb: Public MustInherit Class TestEntityTypeBuilder(Of TEntity As Class)
    typeParameters:
    - id: TEntity
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
  name.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Metadata
  commentId: P:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Metadata
  id: Metadata
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Metadata
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Metadata
  type: Property
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Metadata
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 147
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract IMutableEntityType Metadata { get; }
    content.vb: Public MustOverride ReadOnly Property Metadata As IMutableEntityType
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Metadata
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Metadata
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAnnotation(System.String,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAnnotation(System.String,System.Object)
  id: HasAnnotation(System.String,System.Object)
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasAnnotation(String, Object)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasAnnotation(String, Object)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasAnnotation(System.String, System.Object)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasAnnotation
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 148
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestEntityTypeBuilder<TEntity> HasAnnotation(string annotation, object value)
    content.vb: Public MustOverride Function HasAnnotation(annotation As String, value As Object) As ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
    parameters:
    - id: annotation
      type: System.String
    - id: value
      type: System.Object
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasAnnotation(String, Object)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasAnnotation(System.String, System.Object)
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasBaseType``1
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasBaseType``1
  id: HasBaseType``1
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasBaseType<TBaseEntity>()
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasBaseType<TBaseEntity>()
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasBaseType<TBaseEntity>()
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasBaseType
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 150
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: 'public abstract ModelBuilderTest.TestEntityTypeBuilder<TEntity> HasBaseType<TBaseEntity>()where TBaseEntity : class'
    content.vb: Public MustOverride Function HasBaseType(Of TBaseEntity As Class) As ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
    typeParameters:
    - id: TBaseEntity
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasBaseType(Of TBaseEntity)()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasBaseType(Of TBaseEntity)()
  name.vb: HasBaseType(Of TBaseEntity)()
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasBaseType(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasBaseType(System.String)
  id: HasBaseType(System.String)
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasBaseType(String)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasBaseType(String)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasBaseType(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasBaseType
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 153
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestEntityTypeBuilder<TEntity> HasBaseType(string baseEntityTypeName)
    content.vb: Public MustOverride Function HasBaseType(baseEntityTypeName As String) As ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
    parameters:
    - id: baseEntityTypeName
      type: System.String
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasBaseType(String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasBaseType(System.String)
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: HasKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasKey(Expression<Func<TEntity, Object>>)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasKey(Expression<Func<TEntity, Object>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasKey(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasKey
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 154
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestKeyBuilder HasKey(Expression<Func<TEntity, object>> keyExpression)
    content.vb: Public MustOverride Function HasKey(keyExpression As Expression(Of Func(Of TEntity, Object))) As ModelBuilderTest.TestKeyBuilder
    parameters:
    - id: keyExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestKeyBuilder
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasKey(Expression(Of Func(Of TEntity, Object)))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasKey(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object)))
  name.vb: HasKey(Expression(Of Func(Of TEntity, Object)))
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasKey(System.String[])
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasKey(System.String[])
  id: HasKey(System.String[])
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasKey(String[])
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasKey(String[])
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasKey(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasKey
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 155
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestKeyBuilder HasKey(params string[] propertyNames)
    content.vb: Public MustOverride Function HasKey(ParamArray propertyNames As String()) As ModelBuilderTest.TestKeyBuilder
    parameters:
    - id: propertyNames
      type: System.String[]
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestKeyBuilder
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasKey(String())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasKey(System.String())
  name.vb: HasKey(String())
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAlternateKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAlternateKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: HasAlternateKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasAlternateKey(Expression<Func<TEntity, Object>>)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasAlternateKey(Expression<Func<TEntity, Object>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasAlternateKey(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasAlternateKey
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 156
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestKeyBuilder HasAlternateKey(Expression<Func<TEntity, object>> keyExpression)
    content.vb: Public MustOverride Function HasAlternateKey(keyExpression As Expression(Of Func(Of TEntity, Object))) As ModelBuilderTest.TestKeyBuilder
    parameters:
    - id: keyExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestKeyBuilder
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasAlternateKey(Expression(Of Func(Of TEntity, Object)))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasAlternateKey(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object)))
  name.vb: HasAlternateKey(Expression(Of Func(Of TEntity, Object)))
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAlternateKey(System.String[])
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasAlternateKey(System.String[])
  id: HasAlternateKey(System.String[])
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasAlternateKey(String[])
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasAlternateKey(String[])
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasAlternateKey(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasAlternateKey
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 157
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestKeyBuilder HasAlternateKey(params string[] propertyNames)
    content.vb: Public MustOverride Function HasAlternateKey(ParamArray propertyNames As String()) As ModelBuilderTest.TestKeyBuilder
    parameters:
    - id: propertyNames
      type: System.String[]
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestKeyBuilder
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasAlternateKey(String())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasAlternateKey(System.String())
  name.vb: HasAlternateKey(String())
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: Property<TProperty>(Expression<Func<TEntity, TProperty>>)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Property<TProperty>(Expression<Func<TEntity, TProperty>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Property<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Property
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 159
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestPropertyBuilder<TProperty> Property<TProperty>(Expression<Func<TEntity, TProperty>> propertyExpression)
    content.vb: Public MustOverride Function Property(Of TProperty)(propertyExpression As Expression(Of Func(Of TEntity, TProperty))) As ModelBuilderTest.TestPropertyBuilder(Of TProperty)
    parameters:
    - id: propertyExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TProperty}}}
    typeParameters:
    - id: TProperty
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder{{TProperty}}
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Property(Of TProperty)(Expression(Of Func(Of TEntity, TProperty)))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Property(Of TProperty)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty)))
  name.vb: Property(Of TProperty)(Expression(Of Func(Of TEntity, TProperty)))
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Property``1(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Property``1(System.String)
  id: Property``1(System.String)
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: Property<TProperty>(String)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Property<TProperty>(String)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Property<TProperty>(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Property
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 162
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestPropertyBuilder<TProperty> Property<TProperty>(string propertyName)
    content.vb: Public MustOverride Function Property(Of TProperty)(propertyName As String) As ModelBuilderTest.TestPropertyBuilder(Of TProperty)
    parameters:
    - id: propertyName
      type: System.String
    typeParameters:
    - id: TProperty
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder{{TProperty}}
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Property(Of TProperty)(String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Property(Of TProperty)(System.String)
  name.vb: Property(Of TProperty)(String)
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: Ignore(Expression<Func<TEntity, Object>>)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Ignore(Expression<Func<TEntity, Object>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Ignore(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Ignore
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 164
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestEntityTypeBuilder<TEntity> Ignore(Expression<Func<TEntity, object>> propertyExpression)
    content.vb: Public MustOverride Function Ignore(propertyExpression As Expression(Of Func(Of TEntity, Object))) As ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
    parameters:
    - id: propertyExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Ignore(Expression(Of Func(Of TEntity, Object)))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Ignore(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object)))
  name.vb: Ignore(Expression(Of Func(Of TEntity, Object)))
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Ignore(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Ignore(System.String)
  id: Ignore(System.String)
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: Ignore(String)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Ignore(String)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.Ignore(System.String)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Ignore
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 167
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestEntityTypeBuilder<TEntity> Ignore(string propertyName)
    content.vb: Public MustOverride Function Ignore(propertyName As String) As ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
    parameters:
    - id: propertyName
      type: System.String
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Ignore(String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).Ignore(System.String)
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  id: HasIndex(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasIndex(Expression<Func<TEntity, Object>>)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasIndex(Expression<Func<TEntity, Object>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasIndex(System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasIndex
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 169
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestIndexBuilder HasIndex(Expression<Func<TEntity, object>> indexExpression)
    content.vb: Public MustOverride Function HasIndex(indexExpression As Expression(Of Func(Of TEntity, Object))) As ModelBuilderTest.TestIndexBuilder
    parameters:
    - id: indexExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestIndexBuilder
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasIndex(Expression(Of Func(Of TEntity, Object)))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasIndex(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object)))
  name.vb: HasIndex(Expression(Of Func(Of TEntity, Object)))
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasIndex(System.String[])
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasIndex(System.String[])
  id: HasIndex(System.String[])
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasIndex(String[])
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasIndex(String[])
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasIndex(System.String[])
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasIndex
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 170
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestIndexBuilder HasIndex(params string[] propertyNames)
    content.vb: Public MustOverride Function HasIndex(ParamArray propertyNames As String()) As ModelBuilderTest.TestIndexBuilder
    parameters:
    - id: propertyNames
      type: System.String[]
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestIndexBuilder
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasIndex(String())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasIndex(System.String())
  name.vb: HasIndex(String())
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  id: HasOne``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasOne<TRelatedEntity>(Expression<Func<TEntity, TRelatedEntity>>)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasOne<TRelatedEntity>(Expression<Func<TEntity, TRelatedEntity>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasOne<TRelatedEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, TRelatedEntity>>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasOne
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 172
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: 'public abstract ModelBuilderTest.TestReferenceNavigationBuilder<TEntity, TRelatedEntity> HasOne<TRelatedEntity>(Expression<Func<TEntity, TRelatedEntity>> reference = null)where TRelatedEntity : class'
    content.vb: Public MustOverride Function HasOne(Of TRelatedEntity As Class)(reference As Expression(Of Func(Of TEntity, TRelatedEntity)) = Nothing) As ModelBuilderTest.TestReferenceNavigationBuilder(Of TEntity, TRelatedEntity)
    parameters:
    - id: reference
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TRelatedEntity}}}
    typeParameters:
    - id: TRelatedEntity
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder{{TEntity},{TRelatedEntity}}
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasOne(Of TRelatedEntity)(Expression(Of Func(Of TEntity, TRelatedEntity)))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasOne(Of TRelatedEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TRelatedEntity)))
  name.vb: HasOne(Of TRelatedEntity)(Expression(Of Func(Of TEntity, TRelatedEntity)))
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
  id: HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasMany<TRelatedEntity>(Expression<Func<TEntity, IEnumerable<TRelatedEntity>>>)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasMany<TRelatedEntity>(Expression<Func<TEntity, IEnumerable<TRelatedEntity>>>)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasMany<TRelatedEntity>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TRelatedEntity>>>)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasMany
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 176
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: 'public abstract ModelBuilderTest.TestCollectionNavigationBuilder<TEntity, TRelatedEntity> HasMany<TRelatedEntity>(Expression<Func<TEntity, IEnumerable<TRelatedEntity>>> collection = null)where TRelatedEntity : class'
    content.vb: Public MustOverride Function HasMany(Of TRelatedEntity As Class)(collection As Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity))) = Nothing) As ModelBuilderTest.TestCollectionNavigationBuilder(Of TEntity, TRelatedEntity)
    parameters:
    - id: collection
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Collections.Generic.IEnumerable{{TRelatedEntity}}}}
    typeParameters:
    - id: TRelatedEntity
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder{{TEntity},{TRelatedEntity}}
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasMany(Of TRelatedEntity)(Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity))))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasMany(Of TRelatedEntity)(System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Collections.Generic.IEnumerable(Of TRelatedEntity))))
  name.vb: HasMany(Of TRelatedEntity)(Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity))))
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  id: HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: HasChangeTrackingStrategy(ChangeTrackingStrategy)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasChangeTrackingStrategy(ChangeTrackingStrategy)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasChangeTrackingStrategy
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 180
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestEntityTypeBuilder<TEntity> HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy)
    content.vb: Public MustOverride Function HasChangeTrackingStrategy(changeTrackingStrategy As ChangeTrackingStrategy) As ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
    parameters:
    - id: changeTrackingStrategy
      type: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasChangeTrackingStrategy(ChangeTrackingStrategy)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).HasChangeTrackingStrategy(Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy)
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  commentId: M:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  id: UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  parent: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  langs:
  - csharp
  - vb
  name: UsePropertyAccessMode(PropertyAccessMode)
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>.UsePropertyAccessMode(PropertyAccessMode)
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>.UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: UsePropertyAccessMode
    path: test/Microsoft.EntityFrameworkCore.Tests/ModelBuilderTest/ModelBuilderTestBase.cs
    startLine: 182
  assemblies:
  - Microsoft.EntityFrameworkCore.Tests
  namespace: Microsoft.EntityFrameworkCore.Tests
  syntax:
    content: public abstract ModelBuilderTest.TestEntityTypeBuilder<TEntity> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode)
    content.vb: Public MustOverride Function UsePropertyAccessMode(propertyAccessMode As PropertyAccessMode) As ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
    parameters:
    - id: propertyAccessMode
      type: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
    return:
      type: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).UsePropertyAccessMode(PropertyAccessMode)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity).UsePropertyAccessMode(Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode)
references:
- uid: Microsoft.EntityFrameworkCore.Tests
  commentId: N:Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Tests
  nameWithType: Microsoft.EntityFrameworkCore.Tests
  fullName: Microsoft.EntityFrameworkCore.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<ModelBuilderTest.TestEntityTypeBuilder<TEntity>, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<ModelBuilderTest.TestEntityTypeBuilder<TEntity>, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of ModelBuilderTest.TestEntityTypeBuilder(Of TEntity), TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity), TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of ModelBuilderTest.TestEntityTypeBuilder(Of TEntity), TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<ModelBuilderTest.TestEntityTypeBuilder<TEntity>, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<ModelBuilderTest.TestEntityTypeBuilder<TEntity>, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of ModelBuilderTest.TestEntityTypeBuilder(Of TEntity), TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of ModelBuilderTest.TestEntityTypeBuilder(Of TEntity), TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity), TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableEntityType
  nameWithType: IMutableEntityType
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
  parent: Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: ModelBuilderTest.TestEntityTypeBuilder<TEntity>
  nameWithType: ModelBuilderTest.TestEntityTypeBuilder<TEntity>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder<TEntity>
  nameWithType.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
  name.vb: ModelBuilderTest.TestEntityTypeBuilder(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
    name: ModelBuilderTest.TestEntityTypeBuilder
    nameWithType: ModelBuilderTest.TestEntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder`1
    name: ModelBuilderTest.TestEntityTypeBuilder
    nameWithType: ModelBuilderTest.TestEntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestEntityTypeBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Object}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Object}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, Object>>
  nameWithType: Expression<Func<TEntity, Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Object>>
  nameWithType.vb: Expression(Of Func(Of TEntity, Object))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Object))
  name.vb: Expression(Of Func(Of TEntity, Object))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestKeyBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestKeyBuilder
  parent: Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: ModelBuilderTest.TestKeyBuilder
  nameWithType: ModelBuilderTest.TestKeyBuilder
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestKeyBuilder
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TProperty}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TProperty>>
  nameWithType: Expression<Func<TEntity, TProperty>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TProperty))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TProperty))
  name.vb: Expression(Of Func(Of TEntity, TProperty))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder{{TProperty}}
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder{``0}
  parent: Microsoft.EntityFrameworkCore.Tests
  definition: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder`1
  name: ModelBuilderTest.TestPropertyBuilder<TProperty>
  nameWithType: ModelBuilderTest.TestPropertyBuilder<TProperty>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder<TProperty>
  nameWithType.vb: ModelBuilderTest.TestPropertyBuilder(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder(Of TProperty)
  name.vb: ModelBuilderTest.TestPropertyBuilder(Of TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder`1
    name: ModelBuilderTest.TestPropertyBuilder
    nameWithType: ModelBuilderTest.TestPropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder`1
    name: ModelBuilderTest.TestPropertyBuilder
    nameWithType: ModelBuilderTest.TestPropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder`1
  parent: Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: ModelBuilderTest.TestPropertyBuilder<TProperty>
  nameWithType: ModelBuilderTest.TestPropertyBuilder<TProperty>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder<TProperty>
  nameWithType.vb: ModelBuilderTest.TestPropertyBuilder(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder(Of TProperty)
  name.vb: ModelBuilderTest.TestPropertyBuilder(Of TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder`1
    name: ModelBuilderTest.TestPropertyBuilder
    nameWithType: ModelBuilderTest.TestPropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder`1
    name: ModelBuilderTest.TestPropertyBuilder
    nameWithType: ModelBuilderTest.TestPropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestPropertyBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestIndexBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestIndexBuilder
  parent: Microsoft.EntityFrameworkCore.Tests
  isExternal: false
  name: ModelBuilderTest.TestIndexBuilder
  nameWithType: ModelBuilderTest.TestIndexBuilder
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestIndexBuilder
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TRelatedEntity}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,``0}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TRelatedEntity>>
  nameWithType: Expression<Func<TEntity, TRelatedEntity>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TRelatedEntity>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TRelatedEntity))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TRelatedEntity))
  name.vb: Expression(Of Func(Of TEntity, TRelatedEntity))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder{{TEntity},{TRelatedEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder{`0,``0}
  parent: Microsoft.EntityFrameworkCore.Tests
  definition: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder`2
  name: ModelBuilderTest.TestReferenceNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType: ModelBuilderTest.TestReferenceNavigationBuilder<TEntity, TRelatedEntity>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType.vb: ModelBuilderTest.TestReferenceNavigationBuilder(Of TEntity, TRelatedEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder(Of TEntity, TRelatedEntity)
  name.vb: ModelBuilderTest.TestReferenceNavigationBuilder(Of TEntity, TRelatedEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder`2
    name: ModelBuilderTest.TestReferenceNavigationBuilder
    nameWithType: ModelBuilderTest.TestReferenceNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder`2
    name: ModelBuilderTest.TestReferenceNavigationBuilder
    nameWithType: ModelBuilderTest.TestReferenceNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder`2
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder`2
  isExternal: false
  name: ModelBuilderTest.TestReferenceNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType: ModelBuilderTest.TestReferenceNavigationBuilder<TEntity, TRelatedEntity>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType.vb: ModelBuilderTest.TestReferenceNavigationBuilder(Of TEntity, TRelatedEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder(Of TEntity, TRelatedEntity)
  name.vb: ModelBuilderTest.TestReferenceNavigationBuilder(Of TEntity, TRelatedEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder`2
    name: ModelBuilderTest.TestReferenceNavigationBuilder
    nameWithType: ModelBuilderTest.TestReferenceNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder`2
    name: ModelBuilderTest.TestReferenceNavigationBuilder
    nameWithType: ModelBuilderTest.TestReferenceNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestReferenceNavigationBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},System.Collections.Generic.IEnumerable{{TRelatedEntity}}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, IEnumerable<TRelatedEntity>>>
  nameWithType: Expression<Func<TEntity, IEnumerable<TRelatedEntity>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TRelatedEntity>>>
  nameWithType.vb: Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity)))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, System.Collections.Generic.IEnumerable(Of TRelatedEntity)))
  name.vb: Expression(Of Func(Of TEntity, IEnumerable(Of TRelatedEntity)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder{{TEntity},{TRelatedEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder{`0,``0}
  parent: Microsoft.EntityFrameworkCore.Tests
  definition: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder`2
  name: ModelBuilderTest.TestCollectionNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType: ModelBuilderTest.TestCollectionNavigationBuilder<TEntity, TRelatedEntity>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType.vb: ModelBuilderTest.TestCollectionNavigationBuilder(Of TEntity, TRelatedEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder(Of TEntity, TRelatedEntity)
  name.vb: ModelBuilderTest.TestCollectionNavigationBuilder(Of TEntity, TRelatedEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder`2
    name: ModelBuilderTest.TestCollectionNavigationBuilder
    nameWithType: ModelBuilderTest.TestCollectionNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder`2
    name: ModelBuilderTest.TestCollectionNavigationBuilder
    nameWithType: ModelBuilderTest.TestCollectionNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder`2
  commentId: T:Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder`2
  isExternal: false
  name: ModelBuilderTest.TestCollectionNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType: ModelBuilderTest.TestCollectionNavigationBuilder<TEntity, TRelatedEntity>
  fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder<TEntity, TRelatedEntity>
  nameWithType.vb: ModelBuilderTest.TestCollectionNavigationBuilder(Of TEntity, TRelatedEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder(Of TEntity, TRelatedEntity)
  name.vb: ModelBuilderTest.TestCollectionNavigationBuilder(Of TEntity, TRelatedEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder`2
    name: ModelBuilderTest.TestCollectionNavigationBuilder
    nameWithType: ModelBuilderTest.TestCollectionNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder`2
    name: ModelBuilderTest.TestCollectionNavigationBuilder
    nameWithType: ModelBuilderTest.TestCollectionNavigationBuilder
    fullName: Microsoft.EntityFrameworkCore.Tests.ModelBuilderTest.TestCollectionNavigationBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TRelatedEntity
    nameWithType: TRelatedEntity
    fullName: TRelatedEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: ChangeTrackingStrategy
  nameWithType: ChangeTrackingStrategy
  fullName: Microsoft.EntityFrameworkCore.Metadata.ChangeTrackingStrategy
- uid: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: PropertyAccessMode
  nameWithType: PropertyAccessMode
  fullName: Microsoft.EntityFrameworkCore.Metadata.PropertyAccessMode
