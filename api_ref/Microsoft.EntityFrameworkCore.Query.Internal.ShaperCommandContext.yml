### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  id: ShaperCommandContext
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator})
  - Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  - Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.NotifyReaderCreated(System.Data.Common.DbDataReader)
  - Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.QuerySqlGeneratorFactory
  - Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.ValueBufferFactory
  langs:
  - csharp
  - vb
  name: ShaperCommandContext
  nameWithType: ShaperCommandContext
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ShaperCommandContext
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public class ShaperCommandContext
    content.vb: Public Class ShaperCommandContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator})
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator})'
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  langs:
  - csharp
  - vb
  name: ShaperCommandContext(IRelationalValueBufferFactoryFactory, Func<IQuerySqlGenerator>)
  nameWithType: ShaperCommandContext.ShaperCommandContext(IRelationalValueBufferFactoryFactory, Func<IQuerySqlGenerator>)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.ShaperCommandContext(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory, System.Func<Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
    startLine: 77
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public ShaperCommandContext(IRelationalValueBufferFactoryFactory valueBufferFactoryFactory, Func<IQuerySqlGenerator> querySqlGeneratorFactory)
    content.vb: Public Sub New(valueBufferFactoryFactory As IRelationalValueBufferFactoryFactory, querySqlGeneratorFactory As Func(Of IQuerySqlGenerator))
    parameters:
    - id: valueBufferFactoryFactory
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
    - id: querySqlGeneratorFactory
      type: System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator}
  nameWithType.vb: ShaperCommandContext.ShaperCommandContext(IRelationalValueBufferFactoryFactory, Func(Of IQuerySqlGenerator))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.ShaperCommandContext(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory, System.Func(Of Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator))
  name.vb: ShaperCommandContext(IRelationalValueBufferFactoryFactory, Func(Of IQuerySqlGenerator))
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.QuerySqlGeneratorFactory
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.QuerySqlGeneratorFactory
  id: QuerySqlGeneratorFactory
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  langs:
  - csharp
  - vb
  name: QuerySqlGeneratorFactory
  nameWithType: ShaperCommandContext.QuerySqlGeneratorFactory
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.QuerySqlGeneratorFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: QuerySqlGeneratorFactory
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual Func<IQuerySqlGenerator> QuerySqlGeneratorFactory { get; }
    content.vb: Public Overridable ReadOnly Property QuerySqlGeneratorFactory As Func(Of IQuerySqlGenerator)
    parameters: []
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.ValueBufferFactory
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.ValueBufferFactory
  id: ValueBufferFactory
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  langs:
  - csharp
  - vb
  name: ValueBufferFactory
  nameWithType: ShaperCommandContext.ValueBufferFactory
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.ValueBufferFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ValueBufferFactory
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
    startLine: 95
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IRelationalValueBufferFactory ValueBufferFactory { get; }
    content.vb: Public Overridable ReadOnly Property ValueBufferFactory As IRelationalValueBufferFactory
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  id: GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  langs:
  - csharp
  - vb
  name: GetRelationalCommand(IReadOnlyDictionary<String, Object>)
  nameWithType: ShaperCommandContext.GetRelationalCommand(IReadOnlyDictionary<String, Object>)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetRelationalCommand
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
    startLine: 101
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IRelationalCommand GetRelationalCommand(IReadOnlyDictionary<string, object> parameters)
    content.vb: Public Overridable Function GetRelationalCommand(parameters As IReadOnlyDictionary(Of String, Object)) As IRelationalCommand
    parameters:
    - id: parameters
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  nameWithType.vb: ShaperCommandContext.GetRelationalCommand(IReadOnlyDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object))
  name.vb: GetRelationalCommand(IReadOnlyDictionary(Of String, Object))
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.NotifyReaderCreated(System.Data.Common.DbDataReader)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.NotifyReaderCreated(System.Data.Common.DbDataReader)
  id: NotifyReaderCreated(System.Data.Common.DbDataReader)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext
  langs:
  - csharp
  - vb
  name: NotifyReaderCreated(DbDataReader)
  nameWithType: ShaperCommandContext.NotifyReaderCreated(DbDataReader)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ShaperCommandContext.NotifyReaderCreated(System.Data.Common.DbDataReader)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NotifyReaderCreated
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Internal/ShaperCommandContext.cs
    startLine: 127
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void NotifyReaderCreated(DbDataReader dataReader)
    content.vb: Public Overridable Sub NotifyReaderCreated(dataReader As DbDataReader)
    parameters:
    - id: dataReader
      type: System.Data.Common.DbDataReader
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalValueBufferFactoryFactory
  nameWithType: IRelationalValueBufferFactoryFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator}
  parent: System
  definition: System.Func`1
  name: Func<IQuerySqlGenerator>
  nameWithType: Func<IQuerySqlGenerator>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator>
  nameWithType.vb: Func(Of IQuerySqlGenerator)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator)
  name.vb: Func(Of IQuerySqlGenerator)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
    name: IQuerySqlGenerator
    nameWithType: IQuerySqlGenerator
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
    name: IQuerySqlGenerator
    nameWithType: IQuerySqlGenerator
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalValueBufferFactory
  nameWithType: IRelationalValueBufferFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, Object>
  nameWithType: IReadOnlyDictionary<String, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)
  name.vb: IReadOnlyDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalCommand
  nameWithType: IRelationalCommand
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: true
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: false
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
