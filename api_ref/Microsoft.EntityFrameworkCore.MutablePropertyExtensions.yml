### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  commentId: T:Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  id: MutablePropertyExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  - Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})
  - Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})
  - Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})
  langs:
  - csharp
  - vb
  name: MutablePropertyExtensions
  nameWithType: MutablePropertyExtensions
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MutablePropertyExtensions
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nExtension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.IMutableProperty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class MutablePropertyExtensions
    content.vb: Public Module MutablePropertyExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})
  commentId: M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})
  id: SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  langs:
  - csharp
  - vb
  name: SetValueGeneratorFactory(IMutableProperty, Func<IProperty, IEntityType, ValueGenerator>)
  nameWithType: MutablePropertyExtensions.SetValueGeneratorFactory(IMutableProperty, Func<IProperty, IEntityType, ValueGenerator>)
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, System.Func<Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetValueGeneratorFactory
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
    startLine: 34
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Sets the factory to use for generating values for this property, or null to clear any previously set factory.\n</p>\n<p>\n    Setting null does not disable value generation for this property, it just clears any generator explicitly\n    configured for this property. The database provider may still have a value generator for the property type.\n</p>\n"
  example: []
  syntax:
    content: public static void SetValueGeneratorFactory(this IMutableProperty property, Func<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetValueGeneratorFactory(property As IMutableProperty, valueGeneratorFactory As Func(Of IProperty, IEntityType, ValueGenerator))
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to set the value generator for. '
    - id: valueGeneratorFactory
      type: System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator}
      description: "\nA factory that will be used to create the value generator, or null to\nclear any previously set factory.\n"
  overload: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory*
  nameWithType.vb: MutablePropertyExtensions.SetValueGeneratorFactory(IMutableProperty, Func(Of IProperty, IEntityType, ValueGenerator))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, System.Func(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator))
  name.vb: SetValueGeneratorFactory(IMutableProperty, Func(Of IProperty, IEntityType, ValueGenerator))
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})
  commentId: M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})
  id: SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  langs:
  - csharp
  - vb
  name: SetMaxLength(IMutableProperty, Nullable<Int32>)
  nameWithType: MutablePropertyExtensions.SetMaxLength(IMutableProperty, Nullable<Int32>)
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetMaxLength
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
    startLine: 50
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSets the maximum length of data that is allowed in this property. For example, if the property is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> '\nthen this is the maximum number of characters.\n"
  example: []
  syntax:
    content: public static void SetMaxLength(this IMutableProperty property, int ? maxLength)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetMaxLength(property As IMutableProperty, maxLength As Integer?)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to set the maximum length of. '
    - id: maxLength
      type: System.Nullable{System.Int32}
      description: 'The maximum length of data that is allowed in this property. '
  overload: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength*
  nameWithType.vb: MutablePropertyExtensions.SetMaxLength(IMutableProperty, Nullable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, System.Nullable(Of System.Int32))
  name.vb: SetMaxLength(IMutableProperty, Nullable(Of Int32))
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})
  id: IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  langs:
  - csharp
  - vb
  name: IsUnicode(IMutableProperty, Nullable<Boolean>)
  nameWithType: MutablePropertyExtensions.IsUnicode(IMutableProperty, Nullable<Boolean>)
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsUnicode
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nSets a value indicating whether or not this property can persist unicode characters.\n"
  example: []
  syntax:
    content: public static void IsUnicode(this IMutableProperty property, bool ? unicode)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub IsUnicode(property As IMutableProperty, unicode As Boolean?)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to set the value for. '
    - id: unicode
      type: System.Nullable{System.Boolean}
      description: 'True if the property accepts unicode characters, false if it does not, null to clear the setting. '
  overload: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode*
  nameWithType.vb: MutablePropertyExtensions.IsUnicode(IMutableProperty, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty, System.Nullable(Of System.Boolean))
  name.vb: IsUnicode(IMutableProperty, Nullable(Of Boolean))
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  langs:
  - csharp
  - vb
  name: GetContainingForeignKeys(IMutableProperty)
  nameWithType: MutablePropertyExtensions.GetContainingForeignKeys(IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetContainingForeignKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
    startLine: 83
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all foreign keys that use this property (including composite foreign keys in which this property\nis included).\n"
  example: []
  syntax:
    content: public static IEnumerable<IMutableForeignKey> GetContainingForeignKeys(this IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainingForeignKeys(property As IMutableProperty) As IEnumerable(Of IMutableForeignKey)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to get foreign keys for. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
      description: "\nThe foreign keys that use this property.\n"
  overload: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  langs:
  - csharp
  - vb
  name: GetContainingPrimaryKey(IMutableProperty)
  nameWithType: MutablePropertyExtensions.GetContainingPrimaryKey(IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetContainingPrimaryKey
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
    startLine: 94
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets the primary key that uses this property (including a composite primary key in which this property\nis included).\n"
  example: []
  syntax:
    content: public static IMutableKey GetContainingPrimaryKey(this IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainingPrimaryKey(property As IMutableProperty) As IMutableKey
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to get primary key for. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
      description: "\nThe primary that use this property, or null if it is not part of the primary key.\n"
  overload: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  commentId: M:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  id: GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.MutablePropertyExtensions
  langs:
  - csharp
  - vb
  name: GetContainingKeys(IMutableProperty)
  nameWithType: MutablePropertyExtensions.GetContainingKeys(IMutableProperty)
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetContainingKeys
    path: src/Microsoft.EntityFrameworkCore/Extensions/MutablePropertyExtensions.cs
    startLine: 105
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore
  summary: "\nGets all primary or alternate keys that use this property (including composite keys in which this property\nis included).\n"
  example: []
  syntax:
    content: public static IEnumerable<IMutableKey> GetContainingKeys(this IMutableProperty property)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetContainingKeys(property As IMutableProperty) As IEnumerable(Of IMutableKey)
    parameters:
    - id: property
      type: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
      description: 'The property to get primary and alternate keys for. '
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableKey}
      description: "\nThe primary and alternate keys that use this property.\n"
  overload: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableProperty
  nameWithType: IMutableProperty
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableProperty
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory
  isExternal: false
  name: SetValueGeneratorFactory
  nameWithType: MutablePropertyExtensions.SetValueGeneratorFactory
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetValueGeneratorFactory
- uid: System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator}
  parent: System
  definition: System.Func`3
  name: Func<IProperty, IEntityType, ValueGenerator>
  nameWithType: Func<IProperty, IEntityType, ValueGenerator>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator>
  nameWithType.vb: Func(Of IProperty, IEntityType, ValueGenerator)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Metadata.IEntityType, Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator)
  name.vb: Func(Of IProperty, IEntityType, ValueGenerator)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
    name: ValueGenerator
    nameWithType: ValueGenerator
    fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Microsoft.EntityFrameworkCore.Metadata.IProperty
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
    name: ValueGenerator
    nameWithType: ValueGenerator
    fullName: Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength
  isExternal: false
  name: SetMaxLength
  nameWithType: MutablePropertyExtensions.SetMaxLength
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.SetMaxLength
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode
  isExternal: false
  name: IsUnicode
  nameWithType: MutablePropertyExtensions.IsUnicode
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.IsUnicode
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys
  isExternal: false
  name: GetContainingForeignKeys
  nameWithType: MutablePropertyExtensions.GetContainingForeignKeys
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingForeignKeys
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IMutableForeignKey>
  nameWithType: IEnumerable<IMutableForeignKey>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey>
  nameWithType.vb: IEnumerable(Of IMutableForeignKey)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey)
  name.vb: IEnumerable(Of IMutableForeignKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
    name: IMutableForeignKey
    nameWithType: IMutableForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
    name: IMutableForeignKey
    nameWithType: IMutableForeignKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey
  isExternal: false
  name: GetContainingPrimaryKey
  nameWithType: MutablePropertyExtensions.GetContainingPrimaryKey
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingPrimaryKey
- uid: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IMutableKey
  nameWithType: IMutableKey
  fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
- uid: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys*
  commentId: Overload:Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys
  isExternal: false
  name: GetContainingKeys
  nameWithType: MutablePropertyExtensions.GetContainingKeys
  fullName: Microsoft.EntityFrameworkCore.MutablePropertyExtensions.GetContainingKeys
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableKey}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IMutableKey}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IMutableKey>
  nameWithType: IEnumerable<IMutableKey>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IMutableKey>
  nameWithType.vb: IEnumerable(Of IMutableKey)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IMutableKey)
  name.vb: IEnumerable(Of IMutableKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
    name: IMutableKey
    nameWithType: IMutableKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
    name: IMutableKey
    nameWithType: IMutableKey
    fullName: Microsoft.EntityFrameworkCore.Metadata.IMutableKey
  - name: )
    nameWithType: )
    fullName: )
