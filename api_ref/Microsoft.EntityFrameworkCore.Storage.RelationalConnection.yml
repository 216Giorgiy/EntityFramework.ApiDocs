### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  id: RelationalConnection
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,ILogger)
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ActiveCursor
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction(System.Data.IsolationLevel)
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Close
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommandTimeout
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommitTransaction
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ConnectionString
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CreateDbConnection
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CurrentTransaction
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Dispose
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.IsMultipleActiveResultSetsEnabled
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Logger
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.RollbackTransaction
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransaction(System.Data.Common.DbTransaction)
  langs:
  - csharp
  - vb
  name: RelationalConnection
  nameWithType: RelationalConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: RelationalConnection
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Represents a connection with a relational database.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: 'public abstract class RelationalConnection : IRelationalConnection, IRelationalTransactionManager, IDbContextTransactionManager, IDisposable'
    content.vb: >-
      Public MustInherit Class RelationalConnection
          Implements IRelationalConnection, IRelationalTransactionManager, IDbContextTransactionManager, IDisposable
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  - Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager
  - Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,ILogger)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,ILogger)
  id: '#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,ILogger)'
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: RelationalConnection(IDbContextOptions, ILogger)
  nameWithType: RelationalConnection.RelationalConnection(IDbContextOptions, ILogger)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.RelationalConnection(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions, ILogger)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 46
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.IRelationalConnection\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected RelationalConnection(IDbContextOptions options, ILogger logger)
    content.vb: Protected Sub New(options As IDbContextOptions, logger As ILogger)
    parameters:
    - id: options
      type: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
      description: 'The options for the context that this connection will be used with. '
    - id: logger
      type: ILogger
      description: 'The logger to write to. '
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CreateDbConnection
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CreateDbConnection
  id: CreateDbConnection
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: CreateDbConnection()
  nameWithType: RelationalConnection.CreateDbConnection()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CreateDbConnection()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CreateDbConnection
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 83
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Creates a <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection\" data-throw-if-not-resolved=\"false\"></xref> to the database.\n"
  example: []
  syntax:
    content: protected abstract DbConnection CreateDbConnection()
    content.vb: Protected MustOverride Function CreateDbConnection As DbConnection
    return:
      type: System.Data.Common.DbConnection
      description: 'The connection. '
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Logger
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Logger
  id: Logger
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: RelationalConnection.Logger
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Logger
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Logger
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 88
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the logger to write to.\n"
  example: []
  syntax:
    content: protected virtual ILogger Logger { get; }
    content.vb: Protected Overridable ReadOnly Property Logger As ILogger
    parameters: []
    return:
      type: ILogger
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ConnectionString
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ConnectionString
  id: ConnectionString
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: RelationalConnection.ConnectionString
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ConnectionString
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConnectionString
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 93
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the connection string for the database.\n"
  example: []
  syntax:
    content: public virtual string ConnectionString { get; }
    content.vb: Public Overridable ReadOnly Property ConnectionString As String
    parameters: []
    return:
      type: System.String
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ConnectionString
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection
  id: DbConnection
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: DbConnection
  nameWithType: RelationalConnection.DbConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: DbConnection
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 98
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the underlying <xref href=\"System.Data.Common.DbConnection\" data-throw-if-not-resolved=\"false\"></xref> used to connect to the database.\n"
  example: []
  syntax:
    content: public virtual DbConnection DbConnection { get; }
    content.vb: Public Overridable ReadOnly Property DbConnection As DbConnection
    parameters: []
    return:
      type: System.Data.Common.DbConnection
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.DbConnection
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CurrentTransaction
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CurrentTransaction
  id: CurrentTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: CurrentTransaction
  nameWithType: RelationalConnection.CurrentTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CurrentTransaction
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CurrentTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 103
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the current transaction.\n"
  example: []
  syntax:
    content: public virtual IDbContextTransaction CurrentTransaction { get; protected set; }
    content.vb: Public Overridable Property CurrentTransaction As IDbContextTransaction
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CurrentTransaction
  modifiers.csharp:
  - public
  - virtual
  - get
  - protected set
  modifiers.vb:
  - Public
  - Overridable
  - Get
  - Protected Set
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommandTimeout
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommandTimeout
  id: CommandTimeout
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: CommandTimeout
  nameWithType: RelationalConnection.CommandTimeout
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommandTimeout
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CommandTimeout
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 108
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets the timeout for executing a command against the database.\n"
  example: []
  syntax:
    content: public virtual int ? CommandTimeout { get; set; }
    content.vb: Public Overridable Property CommandTimeout As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.CommandTimeout
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction
  id: BeginTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction()
  nameWithType: RelationalConnection.BeginTransaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BeginTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 127
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Begins a new transaction.\n"
  example: []
  syntax:
    content: public virtual IDbContextTransaction BeginTransaction()
    content.vb: Public Overridable Function BeginTransaction As IDbContextTransaction
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
      description: 'The newly created transaction. '
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Threading.CancellationToken)
  id: BeginTransactionAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(CancellationToken)
  nameWithType: RelationalConnection.BeginTransactionAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BeginTransactionAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 137
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously begins a new transaction.\n"
  example: []
  syntax:
    content: public virtual Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function BeginTransactionAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IDbContextTransaction)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
      description: "\n    A task that represents the asynchronous operation. The task result contains the newly created transaction. \n"
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction(System.Data.IsolationLevel)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction(IsolationLevel)
  nameWithType: RelationalConnection.BeginTransaction(IsolationLevel)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction(System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BeginTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 146
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Begins a new transaction.\n"
  example: []
  syntax:
    content: public virtual IDbContextTransaction BeginTransaction(IsolationLevel isolationLevel)
    content.vb: Public Overridable Function BeginTransaction(isolationLevel As IsolationLevel) As IDbContextTransaction
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: 'The isolation level to use for the transaction. '
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
      description: 'The newly created transaction. '
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction(System.Data.IsolationLevel)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
  id: BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(IsolationLevel, CancellationToken)
  nameWithType: RelationalConnection.BeginTransactionAsync(IsolationLevel, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Data.IsolationLevel, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BeginTransactionAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 167
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously begins a new transaction.\n"
  example: []
  syntax:
    content: public virtual Task<IDbContextTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function BeginTransactionAsync(isolationLevel As IsolationLevel, cancellationToken As CancellationToken = Nothing) As Task(Of IDbContextTransaction)
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: 'The isolation level to use for the transaction. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
      description: "\n    A task that represents the asynchronous operation. The task result contains the newly created transaction. \n"
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransaction(System.Data.Common.DbTransaction)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransaction(System.Data.Common.DbTransaction)
  id: UseTransaction(System.Data.Common.DbTransaction)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: UseTransaction(DbTransaction)
  nameWithType: RelationalConnection.UseTransaction(DbTransaction)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransaction(System.Data.Common.DbTransaction)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: UseTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 205
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Specifies an existing <xref href=\"System.Data.Common.DbTransaction\" data-throw-if-not-resolved=\"false\"></xref> to be used for database operations.\n"
  example: []
  syntax:
    content: public virtual IDbContextTransaction UseTransaction(DbTransaction transaction)
    content.vb: Public Overridable Function UseTransaction(transaction As DbTransaction) As IDbContextTransaction
    parameters:
    - id: transaction
      type: System.Data.Common.DbTransaction
      description: 'The transaction to be used. '
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommitTransaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommitTransaction
  id: CommitTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: CommitTransaction()
  nameWithType: RelationalConnection.CommitTransaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommitTransaction()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CommitTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 234
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Commits all changes made to the database in the current transaction.\n"
  example: []
  syntax:
    content: public virtual void CommitTransaction()
    content.vb: Public Overridable Sub CommitTransaction
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.RollbackTransaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.RollbackTransaction
  id: RollbackTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: RollbackTransaction()
  nameWithType: RelationalConnection.RollbackTransaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.RollbackTransaction()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: RollbackTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 247
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Discards all changes made to the database in the current transaction.\n"
  example: []
  syntax:
    content: public virtual void RollbackTransaction()
    content.vb: Public Overridable Sub RollbackTransaction
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open
  id: Open
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: Open()
  nameWithType: RelationalConnection.Open()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Open
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 260
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Opens the connection to the database.\n"
  example: []
  syntax:
    content: public virtual void Open()
    content.vb: Public Overridable Sub Open
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  nameWithType: RelationalConnection.OpenAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: OpenAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 304
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously opens the connection to the database.\n"
  example: []
  syntax:
    content: public virtual Task OpenAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function OpenAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n    A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the asynchronous operation. '
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Close
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Close
  id: Close
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: RelationalConnection.Close()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Close()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Close
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 356
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Closes the connection to the database.\n"
  example: []
  syntax:
    content: public virtual void Close()
    content.vb: Public Overridable Sub Close
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.IsMultipleActiveResultSetsEnabled
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.IsMultipleActiveResultSetsEnabled
  id: IsMultipleActiveResultSetsEnabled
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: IsMultipleActiveResultSetsEnabled
  nameWithType: RelationalConnection.IsMultipleActiveResultSetsEnabled
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.IsMultipleActiveResultSetsEnabled
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IsMultipleActiveResultSetsEnabled
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 384
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets a value indicating whether the multiple active result sets feature is enabled.\n"
  example: []
  syntax:
    content: public virtual bool IsMultipleActiveResultSetsEnabled { get; }
    content.vb: Public Overridable ReadOnly Property IsMultipleActiveResultSetsEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.IsMultipleActiveResultSetsEnabled
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ActiveCursor
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ActiveCursor
  id: ActiveCursor
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: ActiveCursor
  nameWithType: RelationalConnection.ActiveCursor
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ActiveCursor
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ActiveCursor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 389
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Gets or sets the active cursor.\n"
  example: []
  syntax:
    content: public virtual IValueBufferCursor ActiveCursor { get; set; }
    content.vb: Public Overridable Property ActiveCursor As IValueBufferCursor
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Query.Internal.IValueBufferCursor
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ActiveCursor
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Dispose
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Dispose
  id: Dispose
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: RelationalConnection.Dispose()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Dispose
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalConnection.cs
    startLine: 394
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\n"
  example: []
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalConnection
  nameWithType: IRelationalConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalTransactionManager
  nameWithType: IRelationalTransactionManager
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDbContextTransactionManager
  nameWithType: IDbContextTransactionManager
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<RelationalConnection, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<RelationalConnection, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Storage.RelationalConnection, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of RelationalConnection, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Storage.RelationalConnection, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of RelationalConnection, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<RelationalConnection, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<RelationalConnection, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Storage.RelationalConnection, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of RelationalConnection, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of RelationalConnection, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Storage.RelationalConnection, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: IDbContextOptions
  nameWithType: IDbContextOptions
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions
- uid: ILogger
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: ILogger
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  isExternal: false
  name: DbConnection
  nameWithType: RelationalConnection.DbConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection
- uid: System.Data.Common.DbConnection
  commentId: T:System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: true
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalConnection
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: RelationalConnection
  nameWithType: RelationalConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalConnection
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: false
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ConnectionString
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ConnectionString
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: false
  name: ConnectionString
  nameWithType: IRelationalConnection.ConnectionString
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.DbConnection
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.DbConnection
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: false
  name: DbConnection
  nameWithType: IRelationalConnection.DbConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.DbConnection
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CurrentTransaction
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CurrentTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  isExternal: false
  name: CurrentTransaction
  nameWithType: IDbContextTransactionManager.CurrentTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CurrentTransaction
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.CommandTimeout
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.CommandTimeout
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: false
  name: CommandTimeout
  nameWithType: IRelationalConnection.CommandTimeout
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.CommandTimeout
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  isExternal: false
  name: BeginTransaction()
  nameWithType: IDbContextTransactionManager.BeginTransaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction
    name: BeginTransaction
    nameWithType: IDbContextTransactionManager.BeginTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction
    name: BeginTransaction
    nameWithType: IDbContextTransactionManager.BeginTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  isExternal: true
  name: BeginTransactionAsync(CancellationToken)
  nameWithType: IDbContextTransactionManager.BeginTransactionAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync(System.Threading.CancellationToken)
    name: BeginTransactionAsync
    nameWithType: IDbContextTransactionManager.BeginTransactionAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync(System.Threading.CancellationToken)
    name: BeginTransactionAsync
    nameWithType: IDbContextTransactionManager.BeginTransactionAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.BeginTransactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDbContextTransaction>
  nameWithType: Task<IDbContextTransaction>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction>
  nameWithType.vb: Task(Of IDbContextTransaction)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Task(Of IDbContextTransaction)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction(System.Data.IsolationLevel)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction(System.Data.IsolationLevel)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager
  isExternal: true
  name: BeginTransaction(IsolationLevel)
  nameWithType: IRelationalTransactionManager.BeginTransaction(IsolationLevel)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction(System.Data.IsolationLevel)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction(System.Data.IsolationLevel)
    name: BeginTransaction
    nameWithType: IRelationalTransactionManager.BeginTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IsolationLevel
    name: IsolationLevel
    nameWithType: IsolationLevel
    fullName: System.Data.IsolationLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction(System.Data.IsolationLevel)
    name: BeginTransaction
    nameWithType: IRelationalTransactionManager.BeginTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IsolationLevel
    name: IsolationLevel
    nameWithType: IsolationLevel
    fullName: System.Data.IsolationLevel
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IsolationLevel
  commentId: T:System.Data.IsolationLevel
  parent: System.Data
  isExternal: true
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data
  commentId: N:System.Data
  isExternal: false
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager
  isExternal: true
  name: BeginTransactionAsync(IsolationLevel, CancellationToken)
  nameWithType: IRelationalTransactionManager.BeginTransactionAsync(IsolationLevel, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync(System.Data.IsolationLevel, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
    name: BeginTransactionAsync
    nameWithType: IRelationalTransactionManager.BeginTransactionAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IsolationLevel
    name: IsolationLevel
    nameWithType: IsolationLevel
    fullName: System.Data.IsolationLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)
    name: BeginTransactionAsync
    nameWithType: IRelationalTransactionManager.BeginTransactionAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.IsolationLevel
    name: IsolationLevel
    nameWithType: IsolationLevel
    fullName: System.Data.IsolationLevel
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbTransaction
  commentId: T:System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: true
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager
  isExternal: true
  name: UseTransaction(DbTransaction)
  nameWithType: IRelationalTransactionManager.UseTransaction(DbTransaction)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction)
    name: UseTransaction
    nameWithType: IRelationalTransactionManager.UseTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbTransaction
    name: DbTransaction
    nameWithType: DbTransaction
    fullName: System.Data.Common.DbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction)
    name: UseTransaction
    nameWithType: IRelationalTransactionManager.UseTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbTransaction
    name: DbTransaction
    nameWithType: DbTransaction
    fullName: System.Data.Common.DbTransaction
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  isExternal: false
  name: CommitTransaction()
  nameWithType: IDbContextTransactionManager.CommitTransaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction
    name: CommitTransaction
    nameWithType: IDbContextTransactionManager.CommitTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction
    name: CommitTransaction
    nameWithType: IDbContextTransactionManager.CommitTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.CommitTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction
  parent: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager
  isExternal: false
  name: RollbackTransaction()
  nameWithType: IDbContextTransactionManager.RollbackTransaction()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction
    name: RollbackTransaction
    nameWithType: IDbContextTransactionManager.RollbackTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction
    name: RollbackTransaction
    nameWithType: IDbContextTransactionManager.RollbackTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager.RollbackTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: false
  name: Open()
  nameWithType: IRelationalConnection.Open()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open
    name: Open
    nameWithType: IRelationalConnection.Open
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open
    name: Open
    nameWithType: IRelationalConnection.Open
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: true
  name: OpenAsync(CancellationToken)
  nameWithType: IRelationalConnection.OpenAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IRelationalConnection.OpenAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IRelationalConnection.OpenAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: false
  name: Close()
  nameWithType: IRelationalConnection.Close()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close
    name: Close
    nameWithType: IRelationalConnection.Close
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close
    name: Close
    nameWithType: IRelationalConnection.Close
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.IsMultipleActiveResultSetsEnabled
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.IsMultipleActiveResultSetsEnabled
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: false
  name: IsMultipleActiveResultSetsEnabled
  nameWithType: IRelationalConnection.IsMultipleActiveResultSetsEnabled
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.IsMultipleActiveResultSetsEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ActiveCursor
  commentId: P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ActiveCursor
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  isExternal: false
  name: ActiveCursor
  nameWithType: IRelationalConnection.ActiveCursor
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ActiveCursor
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IValueBufferCursor
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IValueBufferCursor
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IValueBufferCursor
  nameWithType: IValueBufferCursor
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IValueBufferCursor
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
