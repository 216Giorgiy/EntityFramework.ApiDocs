### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  commentId: T:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  id: DefaultQuerySqlGenerator
  parent: Microsoft.EntityFrameworkCore.Query.Sql
  children:
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException``1(``0,System.String)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOperator(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering})
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.InferTypeMappingFromColumn(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.IsCacheable
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ParameterValues
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SelectExpression
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Sql
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType,System.String@)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitProjection(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  - Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)
  langs:
  - csharp
  - vb
  name: DefaultQuerySqlGenerator
  nameWithType: DefaultQuerySqlGenerator
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DefaultQuerySqlGenerator
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    The default query SQL generator.\n"
  example: []
  syntax:
    content: 'public class DefaultQuerySqlGenerator : ThrowingExpressionVisitor, ISqlExpressionVisitor, IQuerySqlGenerator'
    content.vb: >-
      Public Class DefaultQuerySqlGenerator
          Inherits ThrowingExpressionVisitor
          Implements ISqlExpressionVisitor, IQuerySqlGenerator
  inheritance:
  - System.Object
  - System.Linq.Expressions.ExpressionVisitor
  - Remotion.Linq.Parsing.RelinqExpressionVisitor
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  - Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  inheritedMembers:
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2({TItem},System.String,System.Func{{TItem},{TResult}})
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{{T}})
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  - Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  - Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
  - System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  - System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)'
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: DefaultQuerySqlGenerator(IRelationalCommandBuilderFactory, ISqlGenerationHelper, IParameterNameGeneratorFactory, IRelationalTypeMapper, SelectExpression)
  nameWithType: DefaultQuerySqlGenerator.DefaultQuerySqlGenerator(IRelationalCommandBuilderFactory, ISqlGenerationHelper, IParameterNameGeneratorFactory, IRelationalTypeMapper, SelectExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.DefaultQuerySqlGenerator(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory, Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper, Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory, Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 63
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public DefaultQuerySqlGenerator(IRelationalCommandBuilderFactory relationalCommandBuilderFactory, ISqlGenerationHelper sqlGenerationHelper, IParameterNameGeneratorFactory parameterNameGeneratorFactory, IRelationalTypeMapper relationalTypeMapper, SelectExpression selectExpression)
    content.vb: Public Sub New(relationalCommandBuilderFactory As IRelationalCommandBuilderFactory, sqlGenerationHelper As ISqlGenerationHelper, parameterNameGeneratorFactory As IParameterNameGeneratorFactory, relationalTypeMapper As IRelationalTypeMapper, selectExpression As SelectExpression)
    parameters:
    - id: relationalCommandBuilderFactory
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
      description: 'The relational command builder factory. '
    - id: sqlGenerationHelper
      type: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
      description: 'The SQL generation helper. '
    - id: parameterNameGeneratorFactory
      type: Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
      description: 'The parameter name generator factory. '
    - id: relationalTypeMapper
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
      description: 'The relational type mapper. '
    - id: selectExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: 'The select expression. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.IsCacheable
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.IsCacheable
  id: IsCacheable
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: IsCacheable
  nameWithType: DefaultQuerySqlGenerator.IsCacheable
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.IsCacheable
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsCacheable
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 90
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets or sets a value indicating whether this SQL query is cacheable.\n"
  example: []
  syntax:
    content: public virtual bool IsCacheable { get; }
    content.vb: Public Overridable ReadOnly Property IsCacheable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n    true if this SQL query is cacheable, false if not.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.IsCacheable
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SelectExpression
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SelectExpression
  id: SelectExpression
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: SelectExpression
  nameWithType: DefaultQuerySqlGenerator.SelectExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SelectExpression
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SelectExpression
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 98
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets the select expression.\n"
  example: []
  syntax:
    content: protected virtual SelectExpression SelectExpression { get; }
    content.vb: Protected Overridable ReadOnly Property SelectExpression As SelectExpression
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: "\n    The select expression.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator
  id: SqlGenerator
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: SqlGenerator
  nameWithType: DefaultQuerySqlGenerator.SqlGenerator
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.SqlGenerator
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlGenerator
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 106
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets the SQL generation helper.\n"
  example: []
  syntax:
    content: protected virtual ISqlGenerationHelper SqlGenerator { get; }
    content.vb: Protected Overridable ReadOnly Property SqlGenerator As ISqlGenerationHelper
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
      description: "\n    The SQL generation helper.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ParameterValues
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ParameterValues
  id: ParameterValues
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: ParameterValues
  nameWithType: DefaultQuerySqlGenerator.ParameterValues
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ParameterValues
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ParameterValues
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 114
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Gets the parameter values.\n"
  example: []
  syntax:
    content: protected virtual IReadOnlyDictionary<string, object> ParameterValues { get; }
    content.vb: Protected Overridable ReadOnly Property ParameterValues As IReadOnlyDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: "\n    The parameter values.\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  id: GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: GenerateSql(IReadOnlyDictionary<String, Object>)
  nameWithType: DefaultQuerySqlGenerator.GenerateSql(IReadOnlyDictionary<String, Object>)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GenerateSql
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 123
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Generates SQL for the given parameter values.\n"
  example: []
  syntax:
    content: public virtual IRelationalCommand GenerateSql(IReadOnlyDictionary<string, object> parameterValues)
    content.vb: Public Overridable Function GenerateSql(parameterValues As IReadOnlyDictionary(Of String, Object)) As IRelationalCommand
    parameters:
    - id: parameterValues
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The parameter values. '
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
      description: "\n    A relational command.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  nameWithType.vb: DefaultQuerySqlGenerator.GenerateSql(IReadOnlyDictionary(Of String, Object))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object))
  name.vb: GenerateSql(IReadOnlyDictionary(Of String, Object))
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
  id: CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: CreateValueBufferFactory(IRelationalValueBufferFactoryFactory, DbDataReader)
  nameWithType: DefaultQuerySqlGenerator.CreateValueBufferFactory(IRelationalValueBufferFactoryFactory, DbDataReader)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory, System.Data.Common.DbDataReader)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateValueBufferFactory
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 146
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Creates a relational value buffer factory.\n"
  example: []
  syntax:
    content: public virtual IRelationalValueBufferFactory CreateValueBufferFactory(IRelationalValueBufferFactoryFactory relationalValueBufferFactoryFactory, DbDataReader dataReader)
    content.vb: Public Overridable Function CreateValueBufferFactory(relationalValueBufferFactoryFactory As IRelationalValueBufferFactoryFactory, dataReader As DbDataReader) As IRelationalValueBufferFactory
    parameters:
    - id: relationalValueBufferFactoryFactory
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
      description: 'The relational value buffer factory. '
    - id: dataReader
      type: System.Data.Common.DbDataReader
      description: 'The data reader. '
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
      description: "\n    The new value buffer factory.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Sql
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Sql
  id: Sql
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: Sql
  nameWithType: DefaultQuerySqlGenerator.Sql
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.Sql
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Sql
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 158
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    The generated SQL.\n"
  example: []
  syntax:
    content: protected virtual IRelationalCommandBuilder Sql { get; }
    content.vb: Protected Overridable ReadOnly Property Sql As IRelationalCommandBuilder
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator
  id: ConcatOperator
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: ConcatOperator
  nameWithType: DefaultQuerySqlGenerator.ConcatOperator
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ConcatOperator
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ConcatOperator
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 163
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    The default string concatenation operator SQL.\n"
  example: []
  syntax:
    content: protected virtual string ConcatOperator { get; }
    content.vb: Protected Overridable ReadOnly Property ConcatOperator As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral
  id: TypedTrueLiteral
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: TypedTrueLiteral
  nameWithType: DefaultQuerySqlGenerator.TypedTrueLiteral
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedTrueLiteral
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TypedTrueLiteral
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 168
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    The default true literal SQL.\n"
  example: []
  syntax:
    content: protected virtual string TypedTrueLiteral { get; }
    content.vb: Protected Overridable ReadOnly Property TypedTrueLiteral As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral
  id: TypedFalseLiteral
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: TypedFalseLiteral
  nameWithType: DefaultQuerySqlGenerator.TypedFalseLiteral
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TypedFalseLiteral
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TypedFalseLiteral
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 173
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    The default false literal SQL.\n"
  example: []
  syntax:
    content: protected virtual string TypedFalseLiteral { get; }
    content.vb: Protected Overridable ReadOnly Property TypedFalseLiteral As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  id: VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitSelect(SelectExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitSelect(SelectExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitSelect
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 182
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a top-level SelectExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitSelect(SelectExpression selectExpression)
    content.vb: Public Overridable Function VisitSelect(selectExpression As SelectExpression) As Expression
    parameters:
    - id: selectExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: 'The select expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitProjection(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitProjection(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  id: VisitProjection(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitProjection(IReadOnlyList<Expression>)
  nameWithType: DefaultQuerySqlGenerator.VisitProjection(IReadOnlyList<Expression>)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitProjection(System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitProjection
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 346
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit the projection.\n"
  example: []
  syntax:
    content: protected virtual void VisitProjection(IReadOnlyList<Expression> projections)
    content.vb: Protected Overridable Sub VisitProjection(projections As IReadOnlyList(Of Expression))
    parameters:
    - id: projections
      type: System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}
      description: 'The projection expression. '
  nameWithType.vb: DefaultQuerySqlGenerator.VisitProjection(IReadOnlyList(Of Expression))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitProjection(System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression))
  name.vb: VisitProjection(IReadOnlyList(Of Expression))
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering})
  id: GenerateOrderBy(System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering})
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: GenerateOrderBy(IReadOnlyList<Ordering>)
  nameWithType: DefaultQuerySqlGenerator.GenerateOrderBy(IReadOnlyList<Ordering>)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList<Remotion.Linq.Clauses.Ordering>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GenerateOrderBy
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 355
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Generates the ORDER BY SQL.\n"
  example: []
  syntax:
    content: protected virtual void GenerateOrderBy(IReadOnlyList<Ordering> orderings)
    content.vb: Protected Overridable Sub GenerateOrderBy(orderings As IReadOnlyList(Of Ordering))
    parameters:
    - id: orderings
      type: System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering}
      description: 'The orderings. '
  nameWithType.vb: DefaultQuerySqlGenerator.GenerateOrderBy(IReadOnlyList(Of Ordering))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOrderBy(System.Collections.Generic.IReadOnlyList(Of Remotion.Linq.Clauses.Ordering))
  name.vb: GenerateOrderBy(IReadOnlyList(Of Ordering))
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  id: VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitFromSql(FromSqlExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitFromSql(FromSqlExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitFromSql
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 423
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a FromSqlExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitFromSql(FromSqlExpression fromSqlExpression)
    content.vb: Public Overridable Function VisitFromSql(fromSqlExpression As FromSqlExpression) As Expression
    parameters:
    - id: fromSqlExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
      description: 'The FromSql expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  id: GenerateFromSql(System.String,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: GenerateFromSql(String, Expression, IReadOnlyDictionary<String, Object>)
  nameWithType: DefaultQuerySqlGenerator.GenerateFromSql(String, Expression, IReadOnlyDictionary<String, Object>)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String, System.Linq.Expressions.Expression, System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GenerateFromSql
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 446
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Generate SQL corresponding to a FromSql query.\n"
  example: []
  syntax:
    content: protected virtual void GenerateFromSql(string sql, Expression arguments, IReadOnlyDictionary<string, object> parameters)
    content.vb: Protected Overridable Sub GenerateFromSql(sql As String, arguments As Expression, parameters As IReadOnlyDictionary(Of String, Object))
    parameters:
    - id: sql
      type: System.String
      description: 'The FromSql SQL query. '
    - id: arguments
      type: System.Linq.Expressions.Expression
      description: 'The arguments. '
    - id: parameters
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
      description: 'The parameters for this query. '
  nameWithType.vb: DefaultQuerySqlGenerator.GenerateFromSql(String, Expression, IReadOnlyDictionary(Of String, Object))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateFromSql(System.String, System.Linq.Expressions.Expression, System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object))
  name.vb: GenerateFromSql(String, Expression, IReadOnlyDictionary(Of String, Object))
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  id: VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitTable(TableExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitTable(TableExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitTable
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 569
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a TableExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitTable(TableExpression tableExpression)
    content.vb: Public Overridable Function VisitTable(tableExpression As TableExpression) As Expression
    parameters:
    - id: tableExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
      description: 'The table expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  id: VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitCrossJoin(CrossJoinExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitCrossJoin(CrossJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitCrossJoin
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 593
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a CrossJoin expression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitCrossJoin(CrossJoinExpression crossJoinExpression)
    content.vb: Public Overridable Function VisitCrossJoin(crossJoinExpression As CrossJoinExpression) As Expression
    parameters:
    - id: crossJoinExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
      description: 'The cross join expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  id: VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitLateralJoin(LateralJoinExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitLateralJoin(LateralJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitLateralJoin
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 611
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a LateralJoin expression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitLateralJoin(LateralJoinExpression lateralJoinExpression)
    content.vb: Public Overridable Function VisitLateralJoin(lateralJoinExpression As LateralJoinExpression) As Expression
    parameters:
    - id: lateralJoinExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
      description: 'The lateral join expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  id: VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitCount(CountExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitCount(CountExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitCount
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 629
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a CountExpression\n"
  example: []
  syntax:
    content: public virtual Expression VisitCount(CountExpression countExpression)
    content.vb: Public Overridable Function VisitCount(countExpression As CountExpression) As Expression
    parameters:
    - id: countExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
      description: 'The count expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  id: VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitSum(SumExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitSum(SumExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitSum
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 645
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a SumExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitSum(SumExpression sumExpression)
    content.vb: Public Overridable Function VisitSum(sumExpression As SumExpression) As Expression
    parameters:
    - id: sumExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
      description: 'The sum expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  id: VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitMin(MinExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitMin(MinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitMin
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 665
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a MinExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitMin(MinExpression minExpression)
    content.vb: Public Overridable Function VisitMin(minExpression As MinExpression) As Expression
    parameters:
    - id: minExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
      description: 'The min expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  id: VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitMax(MaxExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitMax(MaxExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitMax
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 685
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a MaxExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitMax(MaxExpression maxExpression)
    content.vb: Public Overridable Function VisitMax(maxExpression As MaxExpression) As Expression
    parameters:
    - id: maxExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
      description: 'The max expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  id: VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitStringCompare(StringCompareExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitStringCompare(StringCompareExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitStringCompare
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 705
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a StringCompareExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitStringCompare(StringCompareExpression stringCompareExpression)
    content.vb: Public Overridable Function VisitStringCompare(stringCompareExpression As StringCompareExpression) As Expression
    parameters:
    - id: stringCompareExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
      description: 'The string compare expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  id: VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitIn(InExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitIn(InExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitIn
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 723
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit an InExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitIn(InExpression inExpression)
    content.vb: Public Overridable Function VisitIn(inExpression As InExpression) As Expression
    parameters:
    - id: inExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
      description: 'The in expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  id: VisitNotIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitNotIn(InExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitNotIn(InExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitNotIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitNotIn
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 784
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a negated InExpression.\n"
  example: []
  syntax:
    content: protected virtual Expression VisitNotIn(InExpression inExpression)
    content.vb: Protected Overridable Function VisitNotIn(inExpression As InExpression) As Expression
    parameters:
    - id: inExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
      description: 'The in expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ProcessInExpressionValues(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: ProcessInExpressionValues(IEnumerable<Expression>)
  nameWithType: DefaultQuerySqlGenerator.ProcessInExpressionValues(IEnumerable<Expression>)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ProcessInExpressionValues
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 835
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Process the InExpression values.\n"
  example: []
  syntax:
    content: protected virtual IReadOnlyList<Expression> ProcessInExpressionValues(IEnumerable<Expression> inExpressionValues)
    content.vb: Protected Overridable Function ProcessInExpressionValues(inExpressionValues As IEnumerable(Of Expression)) As IReadOnlyList(Of Expression)
    parameters:
    - id: inExpressionValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: 'The in expression values. '
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}
      description: "\n    A list of expressions.\n"
  nameWithType.vb: DefaultQuerySqlGenerator.ProcessInExpressionValues(IEnumerable(Of Expression))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ProcessInExpressionValues(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: ProcessInExpressionValues(IEnumerable(Of Expression))
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  id: ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: ExtractNonNullExpressionValues(IReadOnlyList<Expression>)
  nameWithType: DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(IReadOnlyList<Expression>)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExtractNonNullExpressionValues
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 913
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Extracts the non null expression values from a list of expressions.\n"
  example: []
  syntax:
    content: protected virtual IReadOnlyList<Expression> ExtractNonNullExpressionValues(IReadOnlyList<Expression> inExpressionValues)
    content.vb: Protected Overridable Function ExtractNonNullExpressionValues(inExpressionValues As IReadOnlyList(Of Expression)) As IReadOnlyList(Of Expression)
    parameters:
    - id: inExpressionValues
      type: System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}
      description: 'The list of expressions. '
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}
      description: "\n    The extracted non null expression values.\n"
  nameWithType.vb: DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(IReadOnlyList(Of Expression))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.ExtractNonNullExpressionValues(System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression))
  name.vb: ExtractNonNullExpressionValues(IReadOnlyList(Of Expression))
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  id: VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitInnerJoin(InnerJoinExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitInnerJoin(InnerJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitInnerJoin
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 955
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit an InnerJoinExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitInnerJoin(InnerJoinExpression innerJoinExpression)
    content.vb: Public Overridable Function VisitInnerJoin(innerJoinExpression As InnerJoinExpression) As Expression
    parameters:
    - id: innerJoinExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
      description: 'The inner join expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  id: VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitLeftOuterJoin(LeftOuterJoinExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitLeftOuterJoin(LeftOuterJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitLeftOuterJoin
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 977
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit an LeftOuterJoinExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitLeftOuterJoin(LeftOuterJoinExpression leftOuterJoinExpression)
    content.vb: Public Overridable Function VisitLeftOuterJoin(leftOuterJoinExpression As LeftOuterJoinExpression) As Expression
    parameters:
    - id: leftOuterJoinExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
      description: 'The left outer join expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  id: GenerateTop(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: GenerateTop(SelectExpression)
  nameWithType: DefaultQuerySqlGenerator.GenerateTop(SelectExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GenerateTop
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 996
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Generates the TOP part of the SELECT statement,\n"
  example: []
  syntax:
    content: protected virtual void GenerateTop(SelectExpression selectExpression)
    content.vb: Protected Overridable Sub GenerateTop(selectExpression As SelectExpression)
    parameters:
    - id: selectExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: 'The select expression. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  id: GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: GenerateLimitOffset(SelectExpression)
  nameWithType: DefaultQuerySqlGenerator.GenerateLimitOffset(SelectExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GenerateLimitOffset
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1015
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Generates the LIMIT OFFSET part of the SELECT statement,\n"
  example: []
  syntax:
    content: protected virtual void GenerateLimitOffset(SelectExpression selectExpression)
    content.vb: Protected Overridable Sub GenerateLimitOffset(selectExpression As SelectExpression)
    parameters:
    - id: selectExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
      description: 'The select expression. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  id: VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitConditional(ConditionalExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitConditional(ConditionalExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitConditional
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1046
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a ConditionalExpression.\n"
  example: []
  syntax:
    content: protected override Expression VisitConditional(ConditionalExpression expression)
    content.vb: Protected Overrides Function VisitConditional(expression As ConditionalExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.ConditionalExpression
      description: 'The conditional expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  id: VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitExists(ExistsExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitExists(ExistsExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitExists
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1102
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit an ExistsExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitExists(ExistsExpression existsExpression)
    content.vb: Public Overridable Function VisitExists(existsExpression As ExistsExpression) As Expression
    parameters:
    - id: existsExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
      description: 'The exists expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)
  id: VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitBinary(BinaryExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitBinary(BinaryExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitBinary(System.Linq.Expressions.BinaryExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitBinary
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1125
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a BinaryExpression.\n"
  example: []
  syntax:
    content: protected override Expression VisitBinary(BinaryExpression expression)
    content.vb: Protected Overrides Function VisitBinary(expression As BinaryExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.BinaryExpression
      description: 'The binary expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  id: VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitColumn(ColumnExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitColumn(ColumnExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitColumn
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1193
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits a ColumnExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitColumn(ColumnExpression columnExpression)
    content.vb: Public Overridable Function VisitColumn(columnExpression As ColumnExpression) As Expression
    parameters:
    - id: columnExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
      description: 'The column expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  id: VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitAlias(AliasExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitAlias(AliasExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitAlias
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1211
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits an AliasExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitAlias(AliasExpression aliasExpression)
    content.vb: Public Overridable Function VisitAlias(aliasExpression As AliasExpression) As Expression
    parameters:
    - id: aliasExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
      description: 'The alias expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  id: VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitIsNull(IsNullExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitIsNull(IsNullExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitIsNull
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1240
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits an IsNullExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitIsNull(IsNullExpression isNullExpression)
    content.vb: Public Overridable Function VisitIsNull(isNullExpression As IsNullExpression) As Expression
    parameters:
    - id: isNullExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
      description: 'The is null expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  id: VisitIsNotNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitIsNotNull(IsNullExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitIsNotNull(IsNullExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitIsNotNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitIsNotNull
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1258
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits an IsNotNullExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitIsNotNull(IsNullExpression isNotNullExpression)
    content.vb: Public Overridable Function VisitIsNotNull(isNotNullExpression As IsNullExpression) As Expression
    parameters:
    - id: isNotNullExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
      description: 'The is not null expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  id: VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitLike(LikeExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitLike(LikeExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitLike
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1276
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a LikeExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitLike(LikeExpression likeExpression)
    content.vb: Public Overridable Function VisitLike(likeExpression As LikeExpression) As Expression
    parameters:
    - id: likeExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
      description: 'The like expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  id: VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitSqlFunction(SqlFunctionExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitSqlFunction(SqlFunctionExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitSqlFunction
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1301
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits a SqlFunctionExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitSqlFunction(SqlFunctionExpression sqlFunctionExpression)
    content.vb: Public Overridable Function VisitSqlFunction(sqlFunctionExpression As SqlFunctionExpression) As Expression
    parameters:
    - id: sqlFunctionExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
      description: 'The SQL function expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  id: VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitExplicitCast(ExplicitCastExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitExplicitCast(ExplicitCastExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitExplicitCast
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1320
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visit a SQL ExplicitCastExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitExplicitCast(ExplicitCastExpression explicitCastExpression)
    content.vb: Public Overridable Function VisitExplicitCast(explicitCastExpression As ExplicitCastExpression) As Expression
    parameters:
    - id: explicitCastExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
      description: 'The explicit cast expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)
  id: VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitUnary(UnaryExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitUnary(UnaryExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitUnary(System.Linq.Expressions.UnaryExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitUnary
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1355
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits a UnaryExpression.\n"
  example: []
  syntax:
    content: protected override Expression VisitUnary(UnaryExpression expression)
    content.vb: Protected Overrides Function VisitUnary(expression As UnaryExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.UnaryExpression
      description: 'The unary expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)
  id: VisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitConstant(ConstantExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitConstant(ConstantExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitConstant(System.Linq.Expressions.ConstantExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitConstant
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1420
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits a ConstantExpression.\n"
  example: []
  syntax:
    content: protected override Expression VisitConstant(ConstantExpression expression)
    content.vb: Protected Overrides Function VisitConstant(expression As ConstantExpression) As Expression
    parameters:
    - id: expression
      type: System.Linq.Expressions.ConstantExpression
      description: 'The constant expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)
  id: VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitParameter(ParameterExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitParameter(ParameterExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitParameter(System.Linq.Expressions.ParameterExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitParameter
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1439
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits a ParameterExpression.\n"
  example: []
  syntax:
    content: protected override Expression VisitParameter(ParameterExpression parameterExpression)
    content.vb: Protected Overrides Function VisitParameter(parameterExpression As ParameterExpression) As Expression
    parameters:
    - id: parameterExpression
      type: System.Linq.Expressions.ParameterExpression
      description: 'The parameter expression to visit. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  id: VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: VisitPropertyParameter(PropertyParameterExpression)
  nameWithType: DefaultQuerySqlGenerator.VisitPropertyParameter(PropertyParameterExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: VisitPropertyParameter
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1467
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Visits a PropertyParameterExpression.\n"
  example: []
  syntax:
    content: public virtual Expression VisitPropertyParameter(PropertyParameterExpression propertyParameterExpression)
    content.vb: Public Overridable Function VisitPropertyParameter(propertyParameterExpression As PropertyParameterExpression) As Expression
    parameters:
    - id: propertyParameterExpression
      type: Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
      description: 'The property parameter expression. '
    return:
      type: System.Linq.Expressions.Expression
      description: "\n    An Expression.\n"
  implements:
  - Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.InferTypeMappingFromColumn(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.InferTypeMappingFromColumn(System.Linq.Expressions.Expression)
  id: InferTypeMappingFromColumn(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: InferTypeMappingFromColumn(Expression)
  nameWithType: DefaultQuerySqlGenerator.InferTypeMappingFromColumn(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.InferTypeMappingFromColumn(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: InferTypeMappingFromColumn
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1494
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Infers a type mapping from a column expression.\n"
  example: []
  syntax:
    content: protected virtual RelationalTypeMapping InferTypeMappingFromColumn(Expression expression)
    content.vb: Protected Overridable Function InferTypeMappingFromColumn(expression As Expression) As RelationalTypeMapping
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The expression to infer a type mapping for. '
    return:
      type: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
      description: "\n    A RelationalTypeMapping.\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType,System.String@)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType,System.String@)
  id: TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType,System.String@)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: TryGenerateBinaryOperator(ExpressionType, out String)
  nameWithType: DefaultQuerySqlGenerator.TryGenerateBinaryOperator(ExpressionType, out String)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType, out System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: TryGenerateBinaryOperator
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1510
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Attempts to generate binary operator for a given expression type.\n"
  example: []
  syntax:
    content: protected virtual bool TryGenerateBinaryOperator(ExpressionType op, out string result)
    content.vb: Protected Overridable Function TryGenerateBinaryOperator(op As ExpressionType, ByRef result As String) As Boolean
    parameters:
    - id: op
      type: System.Linq.Expressions.ExpressionType
      description: 'The operation. '
    - id: result
      type: System.String
      description: '[out] The SQL binary operator. '
    return:
      type: System.Boolean
      description: "\n    true if it succeeds, false if it fails.\n"
  nameWithType.vb: DefaultQuerySqlGenerator.TryGenerateBinaryOperator(ExpressionType, ByRef String)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.TryGenerateBinaryOperator(System.Linq.Expressions.ExpressionType, ByRef System.String)
  name.vb: TryGenerateBinaryOperator(ExpressionType, ByRef String)
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)
  id: GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: GenerateBinaryOperator(ExpressionType)
  nameWithType: DefaultQuerySqlGenerator.GenerateBinaryOperator(ExpressionType)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GenerateBinaryOperator
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1520
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Generates SQL for a given binary operation type.\n"
  example: []
  syntax:
    content: protected virtual string GenerateBinaryOperator(ExpressionType op)
    content.vb: Protected Overridable Function GenerateBinaryOperator(op As ExpressionType) As String
    parameters:
    - id: op
      type: System.Linq.Expressions.ExpressionType
      description: 'The operation. '
    return:
      type: System.String
      description: "\n    The binary operator.\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOperator(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOperator(System.Linq.Expressions.Expression)
  id: GenerateOperator(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: GenerateOperator(Expression)
  nameWithType: DefaultQuerySqlGenerator.GenerateOperator(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.GenerateOperator(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GenerateOperator
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1529
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Generates an SQL operator for a given expression.\n"
  example: []
  syntax:
    content: protected virtual string GenerateOperator(Expression expression)
    content.vb: Protected Overridable Function GenerateOperator(expression As Expression) As String
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: 'The expression. '
    return:
      type: System.String
      description: "\n    The operator.\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException``1(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException``1(``0,System.String)
  id: CreateUnhandledItemException``1(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  langs:
  - csharp
  - vb
  name: CreateUnhandledItemException<T>(T, String)
  nameWithType: DefaultQuerySqlGenerator.CreateUnhandledItemException<T>(T, String)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException<T>(T, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateUnhandledItemException
    path: src/Microsoft.EntityFrameworkCore.Relational/Query/Sql/DefaultQuerySqlGenerator.cs
    startLine: 1573
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Query.Sql
  summary: "\n    Creates unhandled item exception.\n"
  example: []
  syntax:
    content: protected override Exception CreateUnhandledItemException<T>(T unhandledItem, string visitMethod)
    content.vb: Protected Overrides Function CreateUnhandledItemException(Of T)(unhandledItem As T, visitMethod As String) As Exception
    parameters:
    - id: unhandledItem
      type: '{T}'
      description: 'The unhandled item. '
    - id: visitMethod
      type: System.String
      description: 'The visit method. '
    typeParameters:
    - id: T
      description: 'Generic type parameter. '
    return:
      type: System.Exception
      description: "\n    The new unhandled item exception.\n"
  overridden: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1({T},System.String)
  nameWithType.vb: DefaultQuerySqlGenerator.CreateUnhandledItemException(Of T)(T, String)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator.CreateUnhandledItemException(Of T)(T, System.String)
  name.vb: CreateUnhandledItemException(Of T)(T, String)
references:
- uid: Microsoft.EntityFrameworkCore.Query.Sql
  commentId: N:Microsoft.EntityFrameworkCore.Query.Sql
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Sql
  nameWithType: Microsoft.EntityFrameworkCore.Query.Sql
  fullName: Microsoft.EntityFrameworkCore.Query.Sql
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Linq.Expressions.ExpressionVisitor
  commentId: T:System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: true
  name: ExpressionVisitor
  nameWithType: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: Remotion.Linq.Parsing.RelinqExpressionVisitor
  commentId: T:Remotion.Linq.Parsing.RelinqExpressionVisitor
  parent: Remotion.Linq.Parsing
  isExternal: true
  name: RelinqExpressionVisitor
  nameWithType: RelinqExpressionVisitor
  fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  commentId: T:Remotion.Linq.Parsing.ThrowingExpressionVisitor
  parent: Remotion.Linq.Parsing
  isExternal: true
  name: ThrowingExpressionVisitor
  nameWithType: ThrowingExpressionVisitor
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  commentId: T:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  parent: Microsoft.EntityFrameworkCore.Query.Sql
  isExternal: false
  name: ISqlExpressionVisitor
  nameWithType: ISqlExpressionVisitor
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  commentId: T:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  parent: Microsoft.EntityFrameworkCore.Query.Sql
  isExternal: false
  name: IQuerySqlGenerator
  nameWithType: IQuerySqlGenerator
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: Visit(Expression)
  nameWithType: ThrowingExpressionVisitor.Visit(Expression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    nameWithType: ThrowingExpressionVisitor.Visit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit(System.Linq.Expressions.Expression)
    name: Visit
    nameWithType: ThrowingExpressionVisitor.Visit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitUnknownStandardExpression(Expression, String, Func<Expression, Expression>)
  nameWithType: ThrowingExpressionVisitor.VisitUnknownStandardExpression(Expression, String, Func<Expression, Expression>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression, System.String, System.Func<System.Linq.Expressions.Expression, System.Linq.Expressions.Expression>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitUnknownStandardExpression(Expression, String, Func(Of Expression, Expression))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression, System.String, System.Func(Of System.Linq.Expressions.Expression, System.Linq.Expressions.Expression))
  name.vb: VisitUnknownStandardExpression(Expression, String, Func(Of Expression, Expression))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
    name: VisitUnknownStandardExpression
    nameWithType: ThrowingExpressionVisitor.VisitUnknownStandardExpression
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression(System.Linq.Expressions.Expression,System.String,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})
    name: VisitUnknownStandardExpression
    nameWithType: ThrowingExpressionVisitor.VisitUnknownStandardExpression
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnknownStandardExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2({TItem},System.String,System.Func{{TItem},{TResult}})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  name: VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, System.String, System.Func<TItem, TResult>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, System.String, System.Func(Of TItem, TResult))
  name.vb: VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem<TItem, TResult>
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem(Of TItem, TResult)
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitExtension(Expression)
  nameWithType: ThrowingExpressionVisitor.VisitExtension(Expression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    nameWithType: ThrowingExpressionVisitor.VisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)
    name: VisitExtension
    nameWithType: ThrowingExpressionVisitor.VisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitExtension(Expression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitExtension(Expression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
    name: BaseVisitExtension
    nameWithType: ThrowingExpressionVisitor.BaseVisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension(System.Linq.Expressions.Expression)
    name: BaseVisitExtension
    nameWithType: ThrowingExpressionVisitor.BaseVisitExtension
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitExtension
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitUnary(UnaryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitUnary(UnaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
    name: BaseVisitUnary
    nameWithType: ThrowingExpressionVisitor.BaseVisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary(System.Linq.Expressions.UnaryExpression)
    name: BaseVisitUnary
    nameWithType: ThrowingExpressionVisitor.BaseVisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitBinary(BinaryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitBinary(BinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
    name: BaseVisitBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary(System.Linq.Expressions.BinaryExpression)
    name: BaseVisitBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitTypeBinary(TypeBinaryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitTypeBinary(TypeBinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.VisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: VisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.VisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitTypeBinary(TypeBinaryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitTypeBinary(TypeBinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: BaseVisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)
    name: BaseVisitTypeBinary
    nameWithType: ThrowingExpressionVisitor.BaseVisitTypeBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTypeBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TypeBinaryExpression
    name: TypeBinaryExpression
    nameWithType: TypeBinaryExpression
    fullName: System.Linq.Expressions.TypeBinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitConstant(ConstantExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitConstant(ConstantExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
    name: BaseVisitConstant
    nameWithType: ThrowingExpressionVisitor.BaseVisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant(System.Linq.Expressions.ConstantExpression)
    name: BaseVisitConstant
    nameWithType: ThrowingExpressionVisitor.BaseVisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitConditional(ConditionalExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitConditional(ConditionalExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: BaseVisitConditional
    nameWithType: ThrowingExpressionVisitor.BaseVisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: BaseVisitConditional
    nameWithType: ThrowingExpressionVisitor.BaseVisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitParameter(ParameterExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitParameter(ParameterExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
    name: BaseVisitParameter
    nameWithType: ThrowingExpressionVisitor.BaseVisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter(System.Linq.Expressions.ParameterExpression)
    name: BaseVisitParameter
    nameWithType: ThrowingExpressionVisitor.BaseVisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{{T}})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.VisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.VisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{{T}})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  name: BaseVisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.BaseVisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: BaseVisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMethodCall(MethodCallExpression)
  nameWithType: ThrowingExpressionVisitor.VisitMethodCall(MethodCallExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    nameWithType: ThrowingExpressionVisitor.VisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: VisitMethodCall
    nameWithType: ThrowingExpressionVisitor.VisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMethodCall(MethodCallExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMethodCall(MethodCallExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: BaseVisitMethodCall
    nameWithType: ThrowingExpressionVisitor.BaseVisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall(System.Linq.Expressions.MethodCallExpression)
    name: BaseVisitMethodCall
    nameWithType: ThrowingExpressionVisitor.BaseVisitMethodCall
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMethodCall
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MethodCallExpression
    name: MethodCallExpression
    nameWithType: MethodCallExpression
    fullName: System.Linq.Expressions.MethodCallExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitInvocation(InvocationExpression)
  nameWithType: ThrowingExpressionVisitor.VisitInvocation(InvocationExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    nameWithType: ThrowingExpressionVisitor.VisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: VisitInvocation
    nameWithType: ThrowingExpressionVisitor.VisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitInvocation(InvocationExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitInvocation(InvocationExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: BaseVisitInvocation
    nameWithType: ThrowingExpressionVisitor.BaseVisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation(System.Linq.Expressions.InvocationExpression)
    name: BaseVisitInvocation
    nameWithType: ThrowingExpressionVisitor.BaseVisitInvocation
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitInvocation
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.InvocationExpression
    name: InvocationExpression
    nameWithType: InvocationExpression
    fullName: System.Linq.Expressions.InvocationExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMember(MemberExpression)
  nameWithType: ThrowingExpressionVisitor.VisitMember(MemberExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    nameWithType: ThrowingExpressionVisitor.VisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)
    name: VisitMember
    nameWithType: ThrowingExpressionVisitor.VisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMember(MemberExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMember(MemberExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
    name: BaseVisitMember
    nameWithType: ThrowingExpressionVisitor.BaseVisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember(System.Linq.Expressions.MemberExpression)
    name: BaseVisitMember
    nameWithType: ThrowingExpressionVisitor.BaseVisitMember
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberExpression
    name: MemberExpression
    nameWithType: MemberExpression
    fullName: System.Linq.Expressions.MemberExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitNew(NewExpression)
  nameWithType: ThrowingExpressionVisitor.VisitNew(NewExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    nameWithType: ThrowingExpressionVisitor.VisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)
    name: VisitNew
    nameWithType: ThrowingExpressionVisitor.VisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitNew(NewExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitNew(NewExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
    name: BaseVisitNew
    nameWithType: ThrowingExpressionVisitor.BaseVisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew(System.Linq.Expressions.NewExpression)
    name: BaseVisitNew
    nameWithType: ThrowingExpressionVisitor.BaseVisitNew
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNew
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewExpression
    name: NewExpression
    nameWithType: NewExpression
    fullName: System.Linq.Expressions.NewExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitNewArray(NewArrayExpression)
  nameWithType: ThrowingExpressionVisitor.VisitNewArray(NewArrayExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    nameWithType: ThrowingExpressionVisitor.VisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: VisitNewArray
    nameWithType: ThrowingExpressionVisitor.VisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitNewArray(NewArrayExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitNewArray(NewArrayExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: BaseVisitNewArray
    nameWithType: ThrowingExpressionVisitor.BaseVisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray(System.Linq.Expressions.NewArrayExpression)
    name: BaseVisitNewArray
    nameWithType: ThrowingExpressionVisitor.BaseVisitNewArray
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitNewArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.NewArrayExpression
    name: NewArrayExpression
    nameWithType: NewArrayExpression
    fullName: System.Linq.Expressions.NewArrayExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberInit(MemberInitExpression)
  nameWithType: ThrowingExpressionVisitor.VisitMemberInit(MemberInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    nameWithType: ThrowingExpressionVisitor.VisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: VisitMemberInit
    nameWithType: ThrowingExpressionVisitor.VisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberInit(MemberInitExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberInit(MemberInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: BaseVisitMemberInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit(System.Linq.Expressions.MemberInitExpression)
    name: BaseVisitMemberInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberInitExpression
    name: MemberInitExpression
    nameWithType: MemberInitExpression
    fullName: System.Linq.Expressions.MemberInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitListInit(ListInitExpression)
  nameWithType: ThrowingExpressionVisitor.VisitListInit(ListInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    nameWithType: ThrowingExpressionVisitor.VisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)
    name: VisitListInit
    nameWithType: ThrowingExpressionVisitor.VisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitListInit(ListInitExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitListInit(ListInitExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
    name: BaseVisitListInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit(System.Linq.Expressions.ListInitExpression)
    name: BaseVisitListInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitListInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitListInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ListInitExpression
    name: ListInitExpression
    nameWithType: ListInitExpression
    fullName: System.Linq.Expressions.ListInitExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitBlock(BlockExpression)
  nameWithType: ThrowingExpressionVisitor.VisitBlock(BlockExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    nameWithType: ThrowingExpressionVisitor.VisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)
    name: VisitBlock
    nameWithType: ThrowingExpressionVisitor.VisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitBlock(BlockExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitBlock(BlockExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
    name: BaseVisitBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock(System.Linq.Expressions.BlockExpression)
    name: BaseVisitBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BlockExpression
    name: BlockExpression
    nameWithType: BlockExpression
    fullName: System.Linq.Expressions.BlockExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitDebugInfo(DebugInfoExpression)
  nameWithType: ThrowingExpressionVisitor.VisitDebugInfo(DebugInfoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.VisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: VisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.VisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitDebugInfo(DebugInfoExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitDebugInfo(DebugInfoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: BaseVisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.BaseVisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)
    name: BaseVisitDebugInfo
    nameWithType: ThrowingExpressionVisitor.BaseVisitDebugInfo
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDebugInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DebugInfoExpression
    name: DebugInfoExpression
    nameWithType: DebugInfoExpression
    fullName: System.Linq.Expressions.DebugInfoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitDefault(DefaultExpression)
  nameWithType: ThrowingExpressionVisitor.VisitDefault(DefaultExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    nameWithType: ThrowingExpressionVisitor.VisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)
    name: VisitDefault
    nameWithType: ThrowingExpressionVisitor.VisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitDefault(DefaultExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitDefault(DefaultExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
    name: BaseVisitDefault
    nameWithType: ThrowingExpressionVisitor.BaseVisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault(System.Linq.Expressions.DefaultExpression)
    name: BaseVisitDefault
    nameWithType: ThrowingExpressionVisitor.BaseVisitDefault
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitDefault
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DefaultExpression
    name: DefaultExpression
    nameWithType: DefaultExpression
    fullName: System.Linq.Expressions.DefaultExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitGoto(GotoExpression)
  nameWithType: ThrowingExpressionVisitor.VisitGoto(GotoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    nameWithType: ThrowingExpressionVisitor.VisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)
    name: VisitGoto
    nameWithType: ThrowingExpressionVisitor.VisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitGoto(GotoExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitGoto(GotoExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
    name: BaseVisitGoto
    nameWithType: ThrowingExpressionVisitor.BaseVisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto(System.Linq.Expressions.GotoExpression)
    name: BaseVisitGoto
    nameWithType: ThrowingExpressionVisitor.BaseVisitGoto
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitGoto
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.GotoExpression
    name: GotoExpression
    nameWithType: GotoExpression
    fullName: System.Linq.Expressions.GotoExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitIndex(IndexExpression)
  nameWithType: ThrowingExpressionVisitor.VisitIndex(IndexExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    nameWithType: ThrowingExpressionVisitor.VisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)
    name: VisitIndex
    nameWithType: ThrowingExpressionVisitor.VisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitIndex(IndexExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitIndex(IndexExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
    name: BaseVisitIndex
    nameWithType: ThrowingExpressionVisitor.BaseVisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex(System.Linq.Expressions.IndexExpression)
    name: BaseVisitIndex
    nameWithType: ThrowingExpressionVisitor.BaseVisitIndex
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.IndexExpression
    name: IndexExpression
    nameWithType: IndexExpression
    fullName: System.Linq.Expressions.IndexExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitLabel(LabelExpression)
  nameWithType: ThrowingExpressionVisitor.VisitLabel(LabelExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    nameWithType: ThrowingExpressionVisitor.VisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)
    name: VisitLabel
    nameWithType: ThrowingExpressionVisitor.VisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitLabel(LabelExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLabel(LabelExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
    name: BaseVisitLabel
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel(System.Linq.Expressions.LabelExpression)
    name: BaseVisitLabel
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabel
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabel
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelExpression
    name: LabelExpression
    nameWithType: LabelExpression
    fullName: System.Linq.Expressions.LabelExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitLoop(LoopExpression)
  nameWithType: ThrowingExpressionVisitor.VisitLoop(LoopExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    nameWithType: ThrowingExpressionVisitor.VisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)
    name: VisitLoop
    nameWithType: ThrowingExpressionVisitor.VisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitLoop(LoopExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLoop(LoopExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
    name: BaseVisitLoop
    nameWithType: ThrowingExpressionVisitor.BaseVisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop(System.Linq.Expressions.LoopExpression)
    name: BaseVisitLoop
    nameWithType: ThrowingExpressionVisitor.BaseVisitLoop
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLoop
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LoopExpression
    name: LoopExpression
    nameWithType: LoopExpression
    fullName: System.Linq.Expressions.LoopExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitRuntimeVariables(RuntimeVariablesExpression)
  nameWithType: ThrowingExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.VisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: VisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.VisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitRuntimeVariables(RuntimeVariablesExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitRuntimeVariables(RuntimeVariablesExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: BaseVisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)
    name: BaseVisitRuntimeVariables
    nameWithType: ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitRuntimeVariables
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.RuntimeVariablesExpression
    name: RuntimeVariablesExpression
    nameWithType: RuntimeVariablesExpression
    fullName: System.Linq.Expressions.RuntimeVariablesExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitSwitch(SwitchExpression)
  nameWithType: ThrowingExpressionVisitor.VisitSwitch(SwitchExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    nameWithType: ThrowingExpressionVisitor.VisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: VisitSwitch
    nameWithType: ThrowingExpressionVisitor.VisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitSwitch(SwitchExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitSwitch(SwitchExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: BaseVisitSwitch
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch(System.Linq.Expressions.SwitchExpression)
    name: BaseVisitSwitch
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitch
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchExpression
    name: SwitchExpression
    nameWithType: SwitchExpression
    fullName: System.Linq.Expressions.SwitchExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitTry(TryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitTry(TryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    nameWithType: ThrowingExpressionVisitor.VisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)
    name: VisitTry
    nameWithType: ThrowingExpressionVisitor.VisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitTry(TryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitTry(TryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
    name: BaseVisitTry
    nameWithType: ThrowingExpressionVisitor.BaseVisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry(System.Linq.Expressions.TryExpression)
    name: BaseVisitTry
    nameWithType: ThrowingExpressionVisitor.BaseVisitTry
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitTry
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.TryExpression
    name: TryExpression
    nameWithType: TryExpression
    fullName: System.Linq.Expressions.TryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberBinding(MemberBinding)
  nameWithType: ThrowingExpressionVisitor.VisitMemberBinding(MemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: VisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberBinding(MemberBinding)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberBinding(MemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: BaseVisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding(System.Linq.Expressions.MemberBinding)
    name: BaseVisitMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    nameWithType: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitElementInit(ElementInit)
  nameWithType: ThrowingExpressionVisitor.VisitElementInit(ElementInit)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    nameWithType: ThrowingExpressionVisitor.VisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)
    name: VisitElementInit
    nameWithType: ThrowingExpressionVisitor.VisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitElementInit(ElementInit)
  nameWithType: ThrowingExpressionVisitor.BaseVisitElementInit(ElementInit)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
    name: BaseVisitElementInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit(System.Linq.Expressions.ElementInit)
    name: BaseVisitElementInit
    nameWithType: ThrowingExpressionVisitor.BaseVisitElementInit
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitElementInit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    nameWithType: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberAssignment(MemberAssignment)
  nameWithType: ThrowingExpressionVisitor.VisitMemberAssignment(MemberAssignment)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.VisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: VisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.VisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberAssignment(MemberAssignment)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberAssignment(MemberAssignment)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: BaseVisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment(System.Linq.Expressions.MemberAssignment)
    name: BaseVisitMemberAssignment
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberAssignment
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberAssignment
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberAssignment
    name: MemberAssignment
    nameWithType: MemberAssignment
    fullName: System.Linq.Expressions.MemberAssignment
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: ThrowingExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: VisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberMemberBinding(MemberMemberBinding)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(MemberMemberBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: BaseVisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)
    name: BaseVisitMemberMemberBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberMemberBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberMemberBinding
    name: MemberMemberBinding
    nameWithType: MemberMemberBinding
    fullName: System.Linq.Expressions.MemberMemberBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitMemberListBinding(MemberListBinding)
  nameWithType: ThrowingExpressionVisitor.VisitMemberListBinding(MemberListBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: VisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.VisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitMemberListBinding(MemberListBinding)
  nameWithType: ThrowingExpressionVisitor.BaseVisitMemberListBinding(MemberListBinding)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: BaseVisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding(System.Linq.Expressions.MemberListBinding)
    name: BaseVisitMemberListBinding
    nameWithType: ThrowingExpressionVisitor.BaseVisitMemberListBinding
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitMemberListBinding
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.MemberListBinding
    name: MemberListBinding
    nameWithType: MemberListBinding
    fullName: System.Linq.Expressions.MemberListBinding
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitCatchBlock(CatchBlock)
  nameWithType: ThrowingExpressionVisitor.VisitCatchBlock(CatchBlock)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.VisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: VisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.VisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitCatchBlock(CatchBlock)
  nameWithType: ThrowingExpressionVisitor.BaseVisitCatchBlock(CatchBlock)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: BaseVisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock(System.Linq.Expressions.CatchBlock)
    name: BaseVisitCatchBlock
    nameWithType: ThrowingExpressionVisitor.BaseVisitCatchBlock
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitCatchBlock
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    nameWithType: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitLabelTarget(LabelTarget)
  nameWithType: ThrowingExpressionVisitor.VisitLabelTarget(LabelTarget)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.VisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: VisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.VisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitLabelTarget(LabelTarget)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLabelTarget(LabelTarget)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: BaseVisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget(System.Linq.Expressions.LabelTarget)
    name: BaseVisitLabelTarget
    nameWithType: ThrowingExpressionVisitor.BaseVisitLabelTarget
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLabelTarget
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.LabelTarget
    name: LabelTarget
    nameWithType: LabelTarget
    fullName: System.Linq.Expressions.LabelTarget
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitSwitchCase(SwitchCase)
  nameWithType: ThrowingExpressionVisitor.VisitSwitchCase(SwitchCase)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.VisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: VisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.VisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitSwitchCase(SwitchCase)
  nameWithType: ThrowingExpressionVisitor.BaseVisitSwitchCase(SwitchCase)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: BaseVisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase(System.Linq.Expressions.SwitchCase)
    name: BaseVisitSwitchCase
    nameWithType: ThrowingExpressionVisitor.BaseVisitSwitchCase
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSwitchCase
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    nameWithType: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitSubQuery(SubQueryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitSubQuery(SubQueryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: VisitSubQuery
    nameWithType: ThrowingExpressionVisitor.VisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: VisitSubQuery
    nameWithType: ThrowingExpressionVisitor.VisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitSubQuery(SubQueryExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitSubQuery(SubQueryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: BaseVisitSubQuery
    nameWithType: ThrowingExpressionVisitor.BaseVisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery(Remotion.Linq.Clauses.Expressions.SubQueryExpression)
    name: BaseVisitSubQuery
    nameWithType: ThrowingExpressionVisitor.BaseVisitSubQuery
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitSubQuery
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    name: SubQueryExpression
    nameWithType: SubQueryExpression
    fullName: Remotion.Linq.Clauses.Expressions.SubQueryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitQuerySourceReference(QuerySourceReferenceExpression)
  nameWithType: ThrowingExpressionVisitor.VisitQuerySourceReference(QuerySourceReferenceExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: VisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.VisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: VisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.VisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: BaseVisitQuerySourceReference(QuerySourceReferenceExpression)
  nameWithType: ThrowingExpressionVisitor.BaseVisitQuerySourceReference(QuerySourceReferenceExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: BaseVisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference(Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression)
    name: BaseVisitQuerySourceReference
    nameWithType: ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitQuerySourceReference
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    name: QuerySourceReferenceExpression
    nameWithType: QuerySourceReferenceExpression
    fullName: Remotion.Linq.Clauses.Expressions.QuerySourceReferenceExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
  commentId: M:Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
  parent: Remotion.Linq.Parsing.RelinqExpressionVisitor
  isExternal: true
  name: AdjustArgumentsForNewExpression(IList<Expression>, IList<MemberInfo>)
  nameWithType: RelinqExpressionVisitor.AdjustArgumentsForNewExpression(IList<Expression>, IList<MemberInfo>)
  fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList<System.Linq.Expressions.Expression>, System.Collections.Generic.IList<System.Reflection.MemberInfo>)
  nameWithType.vb: RelinqExpressionVisitor.AdjustArgumentsForNewExpression(IList(Of Expression), IList(Of MemberInfo))
  fullname.vb: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList(Of System.Linq.Expressions.Expression), System.Collections.Generic.IList(Of System.Reflection.MemberInfo))
  name.vb: AdjustArgumentsForNewExpression(IList(Of Expression), IList(Of MemberInfo))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
    name: AdjustArgumentsForNewExpression
    nameWithType: RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression(System.Collections.Generic.IList{System.Linq.Expressions.Expression},System.Collections.Generic.IList{System.Reflection.MemberInfo})
    name: AdjustArgumentsForNewExpression
    nameWithType: RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    fullName: Remotion.Linq.Parsing.RelinqExpressionVisitor.AdjustArgumentsForNewExpression
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: Visit(ReadOnlyCollection<Expression>)
  nameWithType: ExpressionVisitor.Visit(ReadOnlyCollection<Expression>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>)
  nameWithType.vb: ExpressionVisitor.Visit(ReadOnlyCollection(Of Expression))
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression))
  name.vb: Visit(ReadOnlyCollection(Of Expression))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    nameWithType: ExpressionVisitor.Visit
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})
    name: Visit
    nameWithType: ExpressionVisitor.Visit
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.Func{{T},{T}})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit<T>
    nameWithType: ExpressionVisitor.Visit<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit(Of T)
    nameWithType: ExpressionVisitor.Visit(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1({T},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  name: VisitAndConvert<T>(T, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, System.String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{{T}},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  parent: System.Linq.Expressions.ExpressionVisitor
  definition: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  parent: System.Linq.Expressions.ExpressionVisitor
  isExternal: true
  name: VisitDynamic(DynamicExpression)
  nameWithType: ExpressionVisitor.VisitDynamic(DynamicExpression)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    nameWithType: ExpressionVisitor.VisitDynamic
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    nameWithType: DynamicExpression
    fullName: System.Linq.Expressions.DynamicExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)
    name: VisitDynamic
    nameWithType: ExpressionVisitor.VisitDynamic
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitDynamic
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.DynamicExpression
    name: DynamicExpression
    nameWithType: DynamicExpression
    fullName: System.Linq.Expressions.DynamicExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: Remotion.Linq.Parsing
  commentId: N:Remotion.Linq.Parsing
  isExternal: false
  name: Remotion.Linq.Parsing
  nameWithType: Remotion.Linq.Parsing
  fullName: Remotion.Linq.Parsing
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
  isExternal: true
  name: VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, String, Func<TItem, TResult>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>(TItem, System.String, System.Func<TItem, TResult>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)(TItem, System.String, System.Func(Of TItem, TResult))
  name.vb: VisitUnhandledItem(Of TItem, TResult)(TItem, String, Func(Of TItem, TResult))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem<TItem, TResult>
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem<TItem, TResult>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem``2(``0,System.String,System.Func{``0,``1})
    name: VisitUnhandledItem(Of TItem, TResult)
    nameWithType: ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnhandledItem(Of TItem, TResult)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
  isExternal: true
  name: VisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.VisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.VisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: VisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.VisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: VisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.VisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
  isExternal: true
  name: BaseVisitLambda<T>(Expression<T>)
  nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>(Expression<T>)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>(System.Linq.Expressions.Expression<T>)
  nameWithType.vb: ThrowingExpressionVisitor.BaseVisitLambda(Of T)(Expression(Of T))
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)(System.Linq.Expressions.Expression(Of T))
  name.vb: BaseVisitLambda(Of T)(Expression(Of T))
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda<T>
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda``1(System.Linq.Expressions.Expression{``0})
    name: BaseVisitLambda(Of T)
    nameWithType: ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.BaseVisitLambda(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  commentId: M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
  isExternal: true
  name: Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  nameWithType: ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>)
  fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.Func<T, T>)
  nameWithType.vb: ExpressionVisitor.Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.Func(Of T, T))
  name.vb: Visit(Of T)(ReadOnlyCollection(Of T), Func(Of T, T))
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit<T>
    nameWithType: ExpressionVisitor.Visit<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})
    name: Visit(Of T)
    nameWithType: ExpressionVisitor.Visit(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.Visit(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
  isExternal: true
  name: VisitAndConvert<T>(T, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(T, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(T, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(T, String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(T, System.String)
  name.vb: VisitAndConvert(Of T)(T, String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  commentId: M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
  isExternal: true
  name: VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  nameWithType: ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, String)
  fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>(System.Collections.ObjectModel.ReadOnlyCollection<T>, System.String)
  nameWithType.vb: ExpressionVisitor.VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  fullname.vb: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)(System.Collections.ObjectModel.ReadOnlyCollection(Of T), System.String)
  name.vb: VisitAndConvert(Of T)(ReadOnlyCollection(Of T), String)
  spec.csharp:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert<T>
    nameWithType: ExpressionVisitor.VisitAndConvert<T>
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)
    name: VisitAndConvert(Of T)
    nameWithType: ExpressionVisitor.VisitAndConvert(Of T)
    fullName: System.Linq.Expressions.ExpressionVisitor.VisitAndConvert(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  commentId: T:Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
  parent: Microsoft.EntityFrameworkCore.Query.Sql
  isExternal: false
  name: DefaultQuerySqlGenerator
  nameWithType: DefaultQuerySqlGenerator
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.DefaultQuerySqlGenerator
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalCommandBuilderFactory
  nameWithType: IRelationalCommandBuilderFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory
- uid: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ISqlGenerationHelper
  nameWithType: ISqlGenerationHelper
  fullName: Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper
- uid: Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IParameterNameGeneratorFactory
  nameWithType: IParameterNameGeneratorFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalTypeMapper
  nameWithType: IRelationalTypeMapper
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMapper
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: SelectExpression
  nameWithType: SelectExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Query.Expressions
  commentId: N:Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Expressions
  nameWithType: Microsoft.EntityFrameworkCore.Query.Expressions
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.IsCacheable
  commentId: P:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.IsCacheable
  parent: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  isExternal: false
  name: IsCacheable
  nameWithType: IQuerySqlGenerator.IsCacheable
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.IsCacheable
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, Object>
  nameWithType: IReadOnlyDictionary<String, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)
  name.vb: IReadOnlyDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
  parent: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  isExternal: true
  name: GenerateSql(IReadOnlyDictionary<String, Object>)
  nameWithType: IQuerySqlGenerator.GenerateSql(IReadOnlyDictionary<String, Object>)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>)
  nameWithType.vb: IQuerySqlGenerator.GenerateSql(IReadOnlyDictionary(Of String, Object))
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object))
  name.vb: GenerateSql(IReadOnlyDictionary(Of String, Object))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    name: GenerateSql
    nameWithType: IQuerySqlGenerator.GenerateSql
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})
    name: GenerateSql
    nameWithType: IQuerySqlGenerator.GenerateSql
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.GenerateSql
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalCommand
  nameWithType: IRelationalCommand
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommand
- uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator
  isExternal: true
  name: CreateValueBufferFactory(IRelationalValueBufferFactoryFactory, DbDataReader)
  nameWithType: IQuerySqlGenerator.CreateValueBufferFactory(IRelationalValueBufferFactoryFactory, DbDataReader)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory, System.Data.Common.DbDataReader)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
    name: CreateValueBufferFactory
    nameWithType: IQuerySqlGenerator.CreateValueBufferFactory
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
    name: IRelationalValueBufferFactoryFactory
    nameWithType: IRelationalValueBufferFactoryFactory
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,System.Data.Common.DbDataReader)
    name: CreateValueBufferFactory
    nameWithType: IQuerySqlGenerator.CreateValueBufferFactory
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.IQuerySqlGenerator.CreateValueBufferFactory
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
    name: IRelationalValueBufferFactoryFactory
    nameWithType: IRelationalValueBufferFactoryFactory
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalValueBufferFactoryFactory
  nameWithType: IRelationalValueBufferFactoryFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: true
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalValueBufferFactory
  nameWithType: IRelationalValueBufferFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: false
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalCommandBuilder
  nameWithType: IRelationalCommandBuilder
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitSelect(SelectExpression)
  nameWithType: ISqlExpressionVisitor.VisitSelect(SelectExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
    name: VisitSelect
    nameWithType: ISqlExpressionVisitor.VisitSelect
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
    name: SelectExpression
    nameWithType: SelectExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)
    name: VisitSelect
    nameWithType: ISqlExpressionVisitor.VisitSelect
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSelect
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
    name: SelectExpression
    nameWithType: SelectExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Expression>
  nameWithType: IReadOnlyList<Expression>
  fullName: System.Collections.Generic.IReadOnlyList<System.Linq.Expressions.Expression>
  nameWithType.vb: IReadOnlyList(Of Expression)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.Linq.Expressions.Expression)
  name.vb: IReadOnlyList(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering}
  commentId: T:System.Collections.Generic.IReadOnlyList{Remotion.Linq.Clauses.Ordering}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Ordering>
  nameWithType: IReadOnlyList<Ordering>
  fullName: System.Collections.Generic.IReadOnlyList<Remotion.Linq.Clauses.Ordering>
  nameWithType.vb: IReadOnlyList(Of Ordering)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Remotion.Linq.Clauses.Ordering)
  name.vb: IReadOnlyList(Of Ordering)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Remotion.Linq.Clauses.Ordering
    name: Ordering
    nameWithType: Ordering
    fullName: Remotion.Linq.Clauses.Ordering
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Remotion.Linq.Clauses.Ordering
    name: Ordering
    nameWithType: Ordering
    fullName: Remotion.Linq.Clauses.Ordering
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitFromSql(FromSqlExpression)
  nameWithType: ISqlExpressionVisitor.VisitFromSql(FromSqlExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
    name: VisitFromSql
    nameWithType: ISqlExpressionVisitor.VisitFromSql
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
    name: FromSqlExpression
    nameWithType: FromSqlExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression)
    name: VisitFromSql
    nameWithType: ISqlExpressionVisitor.VisitFromSql
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitFromSql
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
    name: FromSqlExpression
    nameWithType: FromSqlExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: FromSqlExpression
  nameWithType: FromSqlExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.FromSqlExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitTable(TableExpression)
  nameWithType: ISqlExpressionVisitor.VisitTable(TableExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
    name: VisitTable
    nameWithType: ISqlExpressionVisitor.VisitTable
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
    name: TableExpression
    nameWithType: TableExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression)
    name: VisitTable
    nameWithType: ISqlExpressionVisitor.VisitTable
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitTable
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
    name: TableExpression
    nameWithType: TableExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: TableExpression
  nameWithType: TableExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.TableExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitCrossJoin(CrossJoinExpression)
  nameWithType: ISqlExpressionVisitor.VisitCrossJoin(CrossJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
    name: VisitCrossJoin
    nameWithType: ISqlExpressionVisitor.VisitCrossJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
    name: CrossJoinExpression
    nameWithType: CrossJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression)
    name: VisitCrossJoin
    nameWithType: ISqlExpressionVisitor.VisitCrossJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCrossJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
    name: CrossJoinExpression
    nameWithType: CrossJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: CrossJoinExpression
  nameWithType: CrossJoinExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.CrossJoinExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitLateralJoin(LateralJoinExpression)
  nameWithType: ISqlExpressionVisitor.VisitLateralJoin(LateralJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
    name: VisitLateralJoin
    nameWithType: ISqlExpressionVisitor.VisitLateralJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
    name: LateralJoinExpression
    nameWithType: LateralJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression)
    name: VisitLateralJoin
    nameWithType: ISqlExpressionVisitor.VisitLateralJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLateralJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
    name: LateralJoinExpression
    nameWithType: LateralJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: LateralJoinExpression
  nameWithType: LateralJoinExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LateralJoinExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitCount(CountExpression)
  nameWithType: ISqlExpressionVisitor.VisitCount(CountExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
    name: VisitCount
    nameWithType: ISqlExpressionVisitor.VisitCount
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
    name: CountExpression
    nameWithType: CountExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount(Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression)
    name: VisitCount
    nameWithType: ISqlExpressionVisitor.VisitCount
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitCount
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
    name: CountExpression
    nameWithType: CountExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: CountExpression
  nameWithType: CountExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.CountExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitSum(SumExpression)
  nameWithType: ISqlExpressionVisitor.VisitSum(SumExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
    name: VisitSum
    nameWithType: ISqlExpressionVisitor.VisitSum
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
    name: SumExpression
    nameWithType: SumExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum(Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression)
    name: VisitSum
    nameWithType: ISqlExpressionVisitor.VisitSum
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSum
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
    name: SumExpression
    nameWithType: SumExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: SumExpression
  nameWithType: SumExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SumExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitMin(MinExpression)
  nameWithType: ISqlExpressionVisitor.VisitMin(MinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
    name: VisitMin
    nameWithType: ISqlExpressionVisitor.VisitMin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
    name: MinExpression
    nameWithType: MinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin(Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression)
    name: VisitMin
    nameWithType: ISqlExpressionVisitor.VisitMin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
    name: MinExpression
    nameWithType: MinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: MinExpression
  nameWithType: MinExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.MinExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitMax(MaxExpression)
  nameWithType: ISqlExpressionVisitor.VisitMax(MaxExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
    name: VisitMax
    nameWithType: ISqlExpressionVisitor.VisitMax
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
    name: MaxExpression
    nameWithType: MaxExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax(Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression)
    name: VisitMax
    nameWithType: ISqlExpressionVisitor.VisitMax
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitMax
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
    name: MaxExpression
    nameWithType: MaxExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: MaxExpression
  nameWithType: MaxExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.MaxExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitStringCompare(StringCompareExpression)
  nameWithType: ISqlExpressionVisitor.VisitStringCompare(StringCompareExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
    name: VisitStringCompare
    nameWithType: ISqlExpressionVisitor.VisitStringCompare
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
    name: StringCompareExpression
    nameWithType: StringCompareExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare(Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression)
    name: VisitStringCompare
    nameWithType: ISqlExpressionVisitor.VisitStringCompare
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitStringCompare
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
    name: StringCompareExpression
    nameWithType: StringCompareExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: StringCompareExpression
  nameWithType: StringCompareExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.StringCompareExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitIn(InExpression)
  nameWithType: ISqlExpressionVisitor.VisitIn(InExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
    name: VisitIn
    nameWithType: ISqlExpressionVisitor.VisitIn
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
    name: InExpression
    nameWithType: InExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.Expressions.InExpression)
    name: VisitIn
    nameWithType: ISqlExpressionVisitor.VisitIn
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIn
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
    name: InExpression
    nameWithType: InExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: InExpression
  nameWithType: InExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.InExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  commentId: T:System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  nameWithType.vb: IEnumerable(Of Expression)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitInnerJoin(InnerJoinExpression)
  nameWithType: ISqlExpressionVisitor.VisitInnerJoin(InnerJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
    name: VisitInnerJoin
    nameWithType: ISqlExpressionVisitor.VisitInnerJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
    name: InnerJoinExpression
    nameWithType: InnerJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression)
    name: VisitInnerJoin
    nameWithType: ISqlExpressionVisitor.VisitInnerJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitInnerJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
    name: InnerJoinExpression
    nameWithType: InnerJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: InnerJoinExpression
  nameWithType: InnerJoinExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.InnerJoinExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitLeftOuterJoin(LeftOuterJoinExpression)
  nameWithType: ISqlExpressionVisitor.VisitLeftOuterJoin(LeftOuterJoinExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
    name: VisitLeftOuterJoin
    nameWithType: ISqlExpressionVisitor.VisitLeftOuterJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
    name: LeftOuterJoinExpression
    nameWithType: LeftOuterJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin(Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression)
    name: VisitLeftOuterJoin
    nameWithType: ISqlExpressionVisitor.VisitLeftOuterJoin
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLeftOuterJoin
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
    name: LeftOuterJoinExpression
    nameWithType: LeftOuterJoinExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: LeftOuterJoinExpression
  nameWithType: LeftOuterJoinExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LeftOuterJoinExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitConditional(ConditionalExpression)
  nameWithType: ThrowingExpressionVisitor.VisitConditional(ConditionalExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    nameWithType: ThrowingExpressionVisitor.VisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)
    name: VisitConditional
    nameWithType: ThrowingExpressionVisitor.VisitConditional
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConditional
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConditionalExpression
    name: ConditionalExpression
    nameWithType: ConditionalExpression
    fullName: System.Linq.Expressions.ConditionalExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ConditionalExpression
  commentId: T:System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConditionalExpression
  nameWithType: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitExists(ExistsExpression)
  nameWithType: ISqlExpressionVisitor.VisitExists(ExistsExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
    name: VisitExists
    nameWithType: ISqlExpressionVisitor.VisitExists
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
    name: ExistsExpression
    nameWithType: ExistsExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression)
    name: VisitExists
    nameWithType: ISqlExpressionVisitor.VisitExists
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
    name: ExistsExpression
    nameWithType: ExistsExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: ExistsExpression
  nameWithType: ExistsExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ExistsExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitBinary(BinaryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitBinary(BinaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    nameWithType: ThrowingExpressionVisitor.VisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)
    name: VisitBinary
    nameWithType: ThrowingExpressionVisitor.VisitBinary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitBinary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.BinaryExpression
    name: BinaryExpression
    nameWithType: BinaryExpression
    fullName: System.Linq.Expressions.BinaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.BinaryExpression
  commentId: T:System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: BinaryExpression
  nameWithType: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitColumn(ColumnExpression)
  nameWithType: ISqlExpressionVisitor.VisitColumn(ColumnExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
    name: VisitColumn
    nameWithType: ISqlExpressionVisitor.VisitColumn
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
    name: ColumnExpression
    nameWithType: ColumnExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression)
    name: VisitColumn
    nameWithType: ISqlExpressionVisitor.VisitColumn
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitColumn
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
    name: ColumnExpression
    nameWithType: ColumnExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: ColumnExpression
  nameWithType: ColumnExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ColumnExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitAlias(AliasExpression)
  nameWithType: ISqlExpressionVisitor.VisitAlias(AliasExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
    name: VisitAlias
    nameWithType: ISqlExpressionVisitor.VisitAlias
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
    name: AliasExpression
    nameWithType: AliasExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias(Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression)
    name: VisitAlias
    nameWithType: ISqlExpressionVisitor.VisitAlias
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitAlias
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
    name: AliasExpression
    nameWithType: AliasExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: AliasExpression
  nameWithType: AliasExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.AliasExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitIsNull(IsNullExpression)
  nameWithType: ISqlExpressionVisitor.VisitIsNull(IsNullExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
    name: VisitIsNull
    nameWithType: ISqlExpressionVisitor.VisitIsNull
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
    name: IsNullExpression
    nameWithType: IsNullExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull(Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression)
    name: VisitIsNull
    nameWithType: ISqlExpressionVisitor.VisitIsNull
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitIsNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
    name: IsNullExpression
    nameWithType: IsNullExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: IsNullExpression
  nameWithType: IsNullExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.IsNullExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitLike(LikeExpression)
  nameWithType: ISqlExpressionVisitor.VisitLike(LikeExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
    name: VisitLike
    nameWithType: ISqlExpressionVisitor.VisitLike
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
    name: LikeExpression
    nameWithType: LikeExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression)
    name: VisitLike
    nameWithType: ISqlExpressionVisitor.VisitLike
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitLike
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
    name: LikeExpression
    nameWithType: LikeExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: LikeExpression
  nameWithType: LikeExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.LikeExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitSqlFunction(SqlFunctionExpression)
  nameWithType: ISqlExpressionVisitor.VisitSqlFunction(SqlFunctionExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
    name: VisitSqlFunction
    nameWithType: ISqlExpressionVisitor.VisitSqlFunction
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
    name: SqlFunctionExpression
    nameWithType: SqlFunctionExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression)
    name: VisitSqlFunction
    nameWithType: ISqlExpressionVisitor.VisitSqlFunction
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitSqlFunction
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
    name: SqlFunctionExpression
    nameWithType: SqlFunctionExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: SqlFunctionExpression
  nameWithType: SqlFunctionExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.SqlFunctionExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitExplicitCast(ExplicitCastExpression)
  nameWithType: ISqlExpressionVisitor.VisitExplicitCast(ExplicitCastExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
    name: VisitExplicitCast
    nameWithType: ISqlExpressionVisitor.VisitExplicitCast
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
    name: ExplicitCastExpression
    nameWithType: ExplicitCastExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast(Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression)
    name: VisitExplicitCast
    nameWithType: ISqlExpressionVisitor.VisitExplicitCast
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitExplicitCast
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
    name: ExplicitCastExpression
    nameWithType: ExplicitCastExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: ExplicitCastExpression
  nameWithType: ExplicitCastExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.ExplicitCastExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitUnary(UnaryExpression)
  nameWithType: ThrowingExpressionVisitor.VisitUnary(UnaryExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    nameWithType: ThrowingExpressionVisitor.VisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)
    name: VisitUnary
    nameWithType: ThrowingExpressionVisitor.VisitUnary
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitUnary
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.UnaryExpression
    name: UnaryExpression
    nameWithType: UnaryExpression
    fullName: System.Linq.Expressions.UnaryExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.UnaryExpression
  commentId: T:System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: UnaryExpression
  nameWithType: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitConstant(ConstantExpression)
  nameWithType: ThrowingExpressionVisitor.VisitConstant(ConstantExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    nameWithType: ThrowingExpressionVisitor.VisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)
    name: VisitConstant
    nameWithType: ThrowingExpressionVisitor.VisitConstant
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitConstant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ConstantExpression
    name: ConstantExpression
    nameWithType: ConstantExpression
    fullName: System.Linq.Expressions.ConstantExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ConstantExpression
  commentId: T:System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ConstantExpression
  nameWithType: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  isExternal: true
  name: VisitParameter(ParameterExpression)
  nameWithType: ThrowingExpressionVisitor.VisitParameter(ParameterExpression)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    nameWithType: ThrowingExpressionVisitor.VisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)
    name: VisitParameter
    nameWithType: ThrowingExpressionVisitor.VisitParameter
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.VisitParameter
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    nameWithType: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: ParameterExpression
  nameWithType: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  parent: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor
  isExternal: false
  name: VisitPropertyParameter(PropertyParameterExpression)
  nameWithType: ISqlExpressionVisitor.VisitPropertyParameter(PropertyParameterExpression)
  fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
    name: VisitPropertyParameter
    nameWithType: ISqlExpressionVisitor.VisitPropertyParameter
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
    name: PropertyParameterExpression
    nameWithType: PropertyParameterExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter(Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression)
    name: VisitPropertyParameter
    nameWithType: ISqlExpressionVisitor.VisitPropertyParameter
    fullName: Microsoft.EntityFrameworkCore.Query.Sql.ISqlExpressionVisitor.VisitPropertyParameter
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
    name: PropertyParameterExpression
    nameWithType: PropertyParameterExpression
    fullName: Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
  commentId: T:Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
  parent: Microsoft.EntityFrameworkCore.Query.Expressions
  isExternal: false
  name: PropertyParameterExpression
  nameWithType: PropertyParameterExpression
  fullName: Microsoft.EntityFrameworkCore.Query.Expressions.PropertyParameterExpression
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: RelationalTypeMapping
  nameWithType: RelationalTypeMapping
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping
- uid: System.Linq.Expressions.ExpressionType
  commentId: T:System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: true
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1({T},System.String)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  parent: Remotion.Linq.Parsing.ThrowingExpressionVisitor
  definition: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  name: CreateUnhandledItemException<T>(T, String)
  nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, String)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, System.String)
  nameWithType.vb: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, String)
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, System.String)
  name.vb: CreateUnhandledItemException(Of T)(T, String)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException<T>
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException(Of T)
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  commentId: M:Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
  isExternal: true
  name: CreateUnhandledItemException<T>(T, String)
  nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, String)
  fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>(T, System.String)
  nameWithType.vb: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, String)
  fullname.vb: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)(T, System.String)
  name.vb: CreateUnhandledItemException(Of T)(T, String)
  spec.csharp:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException<T>
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException<T>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException``1(``0,System.String)
    name: CreateUnhandledItemException(Of T)
    nameWithType: ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    fullName: Remotion.Linq.Parsing.ThrowingExpressionVisitor.CreateUnhandledItemException(Of T)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
