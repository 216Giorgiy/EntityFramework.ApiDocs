### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  id: IDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDatabaseCreator
  nameWithType: IDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IDatabaseCreator
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Creates and deletes databases for a given database provider.\n</p>\n<p>\n    This interface is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: public interface IDatabaseCreator
    content.vb: Public Interface IDatabaseCreator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  id: EnsureDeleted
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureDeleted()
  nameWithType: IDatabaseCreator.EnsureDeleted()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureDeleted
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does\n    exist then the database is deleted.\n</p>\n<p>\n    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by\n    the model for this context.\n</p>\n"
  example: []
  syntax:
    content: bool EnsureDeleted()
    content.vb: Function EnsureDeleted As Boolean
    return:
      type: System.Boolean
      description: 'True if the database is deleted, false if it did not exist. '
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  id: EnsureDeletedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureDeletedAsync(CancellationToken)
  nameWithType: IDatabaseCreator.EnsureDeletedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureDeletedAsync
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does\n    exist then the database is deleted.\n</p>\n<p>\n    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by\n    the model for this context.\n</p>\n"
  example: []
  syntax:
    content: Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = null)
    content.vb: Function EnsureDeletedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n    A task that represents the asynchronous save operation. The task result contains true if the database is deleted,\n    false if it did not exist.\n"
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  id: EnsureCreated
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureCreated()
  nameWithType: IDatabaseCreator.EnsureCreated()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureCreated
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Ensures that the database for the context exists. If it exists, no action is taken. If it does not\n    exist then the database and all its schema are created. If the database exists, then no effort is made\n    to ensure it is compatible with the model for this context.\n"
  example: []
  syntax:
    content: bool EnsureCreated()
    content.vb: Function EnsureCreated As Boolean
    return:
      type: System.Boolean
      description: 'True if the database is created, false if it already existed. '
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  id: EnsureCreatedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureCreatedAsync(CancellationToken)
  nameWithType: IDatabaseCreator.EnsureCreatedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureCreatedAsync
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabaseCreator.cs
    startLine: 67
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not\n    exist then the database and all its schema are created. If the database exists, then no effort is made\n    to ensure it is compatible with the model for this context.\n"
  example: []
  syntax:
    content: Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = null)
    content.vb: Function EnsureCreatedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n    A task that represents the asynchronous save operation. The task result contains true if the database is created,\n    false if it already existed.\n"
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
