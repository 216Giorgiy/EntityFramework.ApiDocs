### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabase
  id: IDatabase
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileAsyncQuery``1(QueryModel)
  - Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileQuery``1(QueryModel)
  - Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  - Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IDatabase
  nameWithType: IDatabase
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IDatabase
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    The main interaction point between a context and the database provider.\n</p>\n<p>\n    This interface is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: public interface IDatabase
    content.vb: Public Interface IDatabase
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Storage.IDatabase.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  id: SaveChanges(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabase
  langs:
  - csharp
  - vb
  name: SaveChanges(IReadOnlyList<IUpdateEntry>)
  nameWithType: IDatabase.SaveChanges(IReadOnlyList<IUpdateEntry>)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: SaveChanges
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Persists changes from the supplied entries to the database.\n"
  example: []
  syntax:
    content: int SaveChanges(IReadOnlyList<IUpdateEntry> entries)
    content.vb: Function SaveChanges(entries As IReadOnlyList(Of IUpdateEntry)) As Integer
    parameters:
    - id: entries
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
      description: 'Entries representing the changes to be persisted. '
    return:
      type: System.Int32
      description: 'The number of state entries persisted to the database. '
  nameWithType.vb: IDatabase.SaveChanges(IReadOnlyList(Of IUpdateEntry))
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChanges(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry))
  name.vb: SaveChanges(IReadOnlyList(Of IUpdateEntry))
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  id: SaveChangesAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabase
  langs:
  - csharp
  - vb
  name: SaveChangesAsync(IReadOnlyList<IUpdateEntry>, CancellationToken)
  nameWithType: IDatabase.SaveChangesAsync(IReadOnlyList<IUpdateEntry>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: SaveChangesAsync
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Asynchronously persists changes from the supplied entries to the database.\n"
  example: []
  syntax:
    content: Task<int> SaveChangesAsync(IReadOnlyList<IUpdateEntry> entries, CancellationToken cancellationToken = null)
    content.vb: Function SaveChangesAsync(entries As IReadOnlyList(Of IUpdateEntry), cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: entries
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
      description: 'Entries representing the changes to be persisted. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n    A task that represents the asynchronous save operation. The task result contains the\n    number of entries persisted to the database.\n"
  nameWithType.vb: IDatabase.SaveChangesAsync(IReadOnlyList(Of IUpdateEntry), CancellationToken)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IDatabase.SaveChangesAsync(System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry), System.Threading.CancellationToken)
  name.vb: SaveChangesAsync(IReadOnlyList(Of IUpdateEntry), CancellationToken)
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileQuery``1(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileQuery``1(QueryModel)
  id: CompileQuery``1(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabase
  langs:
  - csharp
  - vb
  name: CompileQuery<TResult>(QueryModel)
  nameWithType: IDatabase.CompileQuery<TResult>(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileQuery<TResult>(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CompileQuery
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
    startLine: 51
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Translates a query model into a function that can be executed to get query results from the database.\n"
  example: []
  syntax:
    content: Func<QueryContext, IEnumerable<TResult>> CompileQuery<TResult>(QueryModel queryModel)
    content.vb: Function CompileQuery(Of TResult)(queryModel As QueryModel) As Func(Of QueryContext, IEnumerable(Of TResult))
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'An object model representing the query to be executed. '
    typeParameters:
    - id: TResult
      description: 'The type of results returned by the query. '
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable{{TResult}}}
      description: 'A function that will execute the query. '
  nameWithType.vb: IDatabase.CompileQuery(Of TResult)(QueryModel)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileQuery(Of TResult)(QueryModel)
  name.vb: CompileQuery(Of TResult)(QueryModel)
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileAsyncQuery``1(QueryModel)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileAsyncQuery``1(QueryModel)
  id: CompileAsyncQuery``1(QueryModel)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabase
  langs:
  - csharp
  - vb
  name: CompileAsyncQuery<TResult>(QueryModel)
  nameWithType: IDatabase.CompileAsyncQuery<TResult>(QueryModel)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileAsyncQuery<TResult>(QueryModel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CompileAsyncQuery
    path: src/Microsoft.EntityFrameworkCore/Storage/IDatabase.cs
    startLine: 59
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Translates a query model into a function that can be executed to asynchronously get query results from the database.\n"
  example: []
  syntax:
    content: Func<QueryContext, IAsyncEnumerable<TResult>> CompileAsyncQuery<TResult>(QueryModel queryModel)
    content.vb: Function CompileAsyncQuery(Of TResult)(queryModel As QueryModel) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))
    parameters:
    - id: queryModel
      type: QueryModel
      description: 'An object model representing the query to be executed. '
    typeParameters:
    - id: TResult
      description: 'The type of results returned by the query. '
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
      description: 'A function that will asynchronously execute the query. '
  nameWithType.vb: IDatabase.CompileAsyncQuery(Of TResult)(QueryModel)
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.IDatabase.CompileAsyncQuery(Of TResult)(QueryModel)
  name.vb: CompileAsyncQuery(Of TResult)(QueryModel)
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<IDatabase, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<IDatabase, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Storage.IDatabase, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of IDatabase, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Storage.IDatabase, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of IDatabase, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<IDatabase, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<IDatabase, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Storage.IDatabase, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of IDatabase, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of IDatabase, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Storage.IDatabase, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<IUpdateEntry>
  nameWithType: IReadOnlyList<IUpdateEntry>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Update.IUpdateEntry>
  nameWithType.vb: IReadOnlyList(Of IUpdateEntry)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Update.IUpdateEntry)
  name.vb: IReadOnlyList(Of IUpdateEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
    name: IUpdateEntry
    nameWithType: IUpdateEntry
    fullName: Microsoft.EntityFrameworkCore.Update.IUpdateEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: QueryModel
  isExternal: true
  name: QueryModel
  nameWithType: QueryModel
  fullName: QueryModel
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable{{TResult}}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Collections.Generic.IEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, IEnumerable<TResult>>
  nameWithType: Func<QueryContext, IEnumerable<TResult>>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IEnumerable<TResult>>
  nameWithType.vb: Func(Of QueryContext, IEnumerable(Of TResult))
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of QueryContext, IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, IAsyncEnumerable<TResult>>
  nameWithType: Func<QueryContext, IAsyncEnumerable<TResult>>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable<TResult>>
  nameWithType.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable(Of TResult))
  name.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
