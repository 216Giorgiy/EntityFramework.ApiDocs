### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  id: QueryCompiler
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  children:
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler},MethodInfoBasedNodeTypeRegistry,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQuery``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext)
  langs:
  - csharp
  - vb
  name: QueryCompiler
  nameWithType: QueryCompiler
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QueryCompiler
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class QueryCompiler : IQueryCompiler'
    content.vb: >-
      Public Class QueryCompiler
          Implements IQueryCompiler
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler},MethodInfoBasedNodeTypeRegistry,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler},MethodInfoBasedNodeTypeRegistry,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  id: '#ctor(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory,Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache,Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator,Microsoft.EntityFrameworkCore.Storage.IDatabase,Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler},MethodInfoBasedNodeTypeRegistry,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)'
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: QueryCompiler(IQueryContextFactory, ICompiledQueryCache, ICompiledQueryCacheKeyGenerator, IDatabase, ISensitiveDataLogger<QueryCompiler>, MethodInfoBasedNodeTypeRegistry, ICurrentDbContext)
  nameWithType: QueryCompiler.QueryCompiler(IQueryContextFactory, ICompiledQueryCache, ICompiledQueryCacheKeyGenerator, IDatabase, ISensitiveDataLogger<QueryCompiler>, MethodInfoBasedNodeTypeRegistry, ICurrentDbContext)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.QueryCompiler(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase, Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger<Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler>, MethodInfoBasedNodeTypeRegistry, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 54
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public QueryCompiler(IQueryContextFactory queryContextFactory, ICompiledQueryCache compiledQueryCache, ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, IDatabase database, ISensitiveDataLogger<QueryCompiler> logger, MethodInfoBasedNodeTypeRegistry methodInfoBasedNodeTypeRegistry, ICurrentDbContext currentContext)
    content.vb: Public Sub New(queryContextFactory As IQueryContextFactory, compiledQueryCache As ICompiledQueryCache, compiledQueryCacheKeyGenerator As ICompiledQueryCacheKeyGenerator, database As IDatabase, logger As ISensitiveDataLogger(Of QueryCompiler), methodInfoBasedNodeTypeRegistry As MethodInfoBasedNodeTypeRegistry, currentContext As ICurrentDbContext)
    parameters:
    - id: queryContextFactory
      type: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
    - id: compiledQueryCache
      type: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
    - id: compiledQueryCacheKeyGenerator
      type: Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator
    - id: database
      type: Microsoft.EntityFrameworkCore.Storage.IDatabase
    - id: logger
      type: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler}
    - id: methodInfoBasedNodeTypeRegistry
      type: MethodInfoBasedNodeTypeRegistry
    - id: currentContext
      type: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  nameWithType.vb: QueryCompiler.QueryCompiler(IQueryContextFactory, ICompiledQueryCache, ICompiledQueryCacheKeyGenerator, IDatabase, ISensitiveDataLogger(Of QueryCompiler), MethodInfoBasedNodeTypeRegistry, ICurrentDbContext)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.QueryCompiler(Microsoft.EntityFrameworkCore.Query.IQueryContextFactory, Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache, Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase, Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger(Of Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler), MethodInfoBasedNodeTypeRegistry, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)
  name.vb: QueryCompiler(IQueryContextFactory, ICompiledQueryCache, ICompiledQueryCacheKeyGenerator, IDatabase, ISensitiveDataLogger(Of QueryCompiler), MethodInfoBasedNodeTypeRegistry, ICurrentDbContext)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database
  commentId: P:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database
  id: Database
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: Database
  nameWithType: QueryCompiler.Database
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Database
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Database
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 83
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual IDatabase Database { get; }
    content.vb: Protected Overridable ReadOnly Property Database As IDatabase
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IDatabase
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute``1(System.Linq.Expressions.Expression)
  id: Execute``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: Execute<TResult>(Expression)
  nameWithType: QueryCompiler.Execute<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Execute
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 89
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual TResult Execute<TResult>(Expression query)
    content.vb: Public Overridable Function Execute(Of TResult)(query As Expression) As TResult
    parameters:
    - id: query
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TResult
    return:
      type: '{TResult}'
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)
  nameWithType.vb: QueryCompiler.Execute(Of TResult)(Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: Execute(Of TResult)(Expression)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
  id: ExecuteAsync``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Expression)
  nameWithType: QueryCompiler.ExecuteAsync<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 104
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IAsyncEnumerable<TResult> ExecuteAsync<TResult>(Expression query)
    content.vb: Public Overridable Function ExecuteAsync(Of TResult)(query As Expression) As IAsyncEnumerable(Of TResult)
    parameters:
    - id: query
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TResult
    return:
      type: IAsyncEnumerable{{TResult}}
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
  nameWithType.vb: QueryCompiler.ExecuteAsync(Of TResult)(Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: ExecuteAsync(Of TResult)(Expression)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  id: ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Expression, CancellationToken)
  nameWithType: QueryCompiler.ExecuteAsync<TResult>(Expression, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync<TResult>(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExecuteAsync
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 119
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual Task<TResult> ExecuteAsync<TResult>(Expression query, CancellationToken cancellationToken)
    content.vb: Public Overridable Function ExecuteAsync(Of TResult)(query As Expression, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: query
      type: System.Linq.Expressions.Expression
    - id: cancellationToken
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
  implements:
  - Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  nameWithType.vb: QueryCompiler.ExecuteAsync(Of TResult)(Expression, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Expression, CancellationToken)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext)
  id: ExtractParameters(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.QueryContext)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: ExtractParameters(Expression, QueryContext)
  nameWithType: QueryCompiler.ExtractParameters(Expression, QueryContext)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.ExtractParameters(System.Linq.Expressions.Expression, Microsoft.EntityFrameworkCore.Query.QueryContext)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ExtractParameters
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 150
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual Expression ExtractParameters(Expression query, QueryContext queryContext)
    content.vb: Protected Overridable Function ExtractParameters(query As Expression, queryContext As QueryContext) As Expression
    parameters:
    - id: query
      type: System.Linq.Expressions.Expression
    - id: queryContext
      type: Microsoft.EntityFrameworkCore.Query.QueryContext
    return:
      type: System.Linq.Expressions.Expression
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQuery``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQuery``1(System.Linq.Expressions.Expression)
  id: CompileQuery``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: CompileQuery<TResult>(Expression)
  nameWithType: QueryCompiler.CompileQuery<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQuery<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CompileQuery
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 163
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual Func<QueryContext, TResult> CompileQuery<TResult>(Expression query)
    content.vb: Protected Overridable Function CompileQuery(Of TResult)(query As Expression) As Func(Of QueryContext, TResult)
    parameters:
    - id: query
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TResult
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResult}}
  nameWithType.vb: QueryCompiler.CompileQuery(Of TResult)(Expression)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQuery(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: CompileQuery(Of TResult)(Expression)
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery``1(System.Linq.Expressions.Expression)
  id: CompileAsyncQuery``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  langs:
  - csharp
  - vb
  name: CompileAsyncQuery<TResult>(Expression)
  nameWithType: QueryCompiler.CompileAsyncQuery<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery<TResult>(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CompileAsyncQuery
    path: src/Microsoft.EntityFrameworkCore/Query/Internal/QueryCompiler.cs
    startLine: 223
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual Func<QueryContext, IAsyncEnumerable<TResult>> CompileAsyncQuery<TResult>(Expression query)
    content.vb: Protected Overridable Function CompileAsyncQuery(Of TResult)(query As Expression) As Func(Of QueryContext, IAsyncEnumerable(Of TResult))
    parameters:
    - id: query
      type: System.Linq.Expressions.Expression
    typeParameters:
    - id: TResult
    return:
      type: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
  nameWithType.vb: QueryCompiler.CompileAsyncQuery(Of TResult)(Expression)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileAsyncQuery(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: CompileAsyncQuery(Of TResult)(Expression)
references:
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IQueryCompiler
  nameWithType: IQueryCompiler
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<QueryCompiler, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryCompiler, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of QueryCompiler, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of QueryCompiler, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<QueryCompiler, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryCompiler, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of QueryCompiler, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of QueryCompiler, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
  commentId: T:Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: IQueryContextFactory
  nameWithType: IQueryContextFactory
  fullName: Microsoft.EntityFrameworkCore.Query.IQueryContextFactory
- uid: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: ICompiledQueryCache
  nameWithType: ICompiledQueryCache
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache
- uid: Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator
  commentId: T:Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: ICompiledQueryCacheKeyGenerator
  nameWithType: ICompiledQueryCacheKeyGenerator
  fullName: Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabase
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabase
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDatabase
  nameWithType: IDatabase
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabase
- uid: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler}
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger{Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler}
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  definition: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1
  name: ISensitiveDataLogger<QueryCompiler>
  nameWithType: ISensitiveDataLogger<QueryCompiler>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger<Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler>
  nameWithType.vb: ISensitiveDataLogger(Of QueryCompiler)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger(Of Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler)
  name.vb: ISensitiveDataLogger(Of QueryCompiler)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1
    name: ISensitiveDataLogger
    nameWithType: ISensitiveDataLogger
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
    name: QueryCompiler
    nameWithType: QueryCompiler
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1
    name: ISensitiveDataLogger
    nameWithType: ISensitiveDataLogger
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
    name: QueryCompiler
    nameWithType: QueryCompiler
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler
  - name: )
    nameWithType: )
    fullName: )
- uid: MethodInfoBasedNodeTypeRegistry
  isExternal: true
  name: MethodInfoBasedNodeTypeRegistry
  nameWithType: MethodInfoBasedNodeTypeRegistry
  fullName: MethodInfoBasedNodeTypeRegistry
- uid: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  commentId: T:Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: ICurrentDbContext
  nameWithType: ICurrentDbContext
  fullName: Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1
  isExternal: false
  name: ISensitiveDataLogger<T>
  nameWithType: ISensitiveDataLogger<T>
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger<T>
  nameWithType.vb: ISensitiveDataLogger(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger(Of T)
  name.vb: ISensitiveDataLogger(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1
    name: ISensitiveDataLogger
    nameWithType: ISensitiveDataLogger
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger`1
    name: ISensitiveDataLogger
    nameWithType: ISensitiveDataLogger
    fullName: Microsoft.EntityFrameworkCore.Infrastructure.ISensitiveDataLogger
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  definition: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)
  name: Execute<TResult>(Expression)
  nameWithType: IQueryCompiler.Execute<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute<TResult>(System.Linq.Expressions.Expression)
  nameWithType.vb: IQueryCompiler.Execute(Of TResult)(Expression)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: Execute(Of TResult)(Expression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)
    name: Execute<TResult>
    nameWithType: IQueryCompiler.Execute<TResult>
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute``1(System.Linq.Expressions.Expression)
    name: Execute(Of TResult)
    nameWithType: IQueryCompiler.Execute(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.Execute(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  definition: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
  name: ExecuteAsync<TResult>(Expression)
  nameWithType: IQueryCompiler.ExecuteAsync<TResult>(Expression)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync<TResult>(System.Linq.Expressions.Expression)
  nameWithType.vb: IQueryCompiler.ExecuteAsync(Of TResult)(Expression)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression)
  name.vb: ExecuteAsync(Of TResult)(Expression)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
    name: ExecuteAsync<TResult>
    nameWithType: IQueryCompiler.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression)
    name: ExecuteAsync(Of TResult)
    nameWithType: IQueryCompiler.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable{{TResult}}
  commentId: '!:IAsyncEnumerable{``1}'
  definition: IAsyncEnumerable`1
  name: IAsyncEnumerable<TResult>
  nameWithType: IAsyncEnumerable<TResult>
  fullName: IAsyncEnumerable<TResult>
  nameWithType.vb: IAsyncEnumerable(Of TResult)
  fullname.vb: IAsyncEnumerable(Of TResult)
  name.vb: IAsyncEnumerable(Of TResult)
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: IAsyncEnumerable`1
  isExternal: true
  name: IAsyncEnumerable<>
  nameWithType: IAsyncEnumerable<>
  fullName: IAsyncEnumerable<>
  nameWithType.vb: IAsyncEnumerable(Of )
  fullname.vb: IAsyncEnumerable(Of )
  name.vb: IAsyncEnumerable(Of )
  spec.csharp:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler
  definition: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
  name: ExecuteAsync<TResult>(Expression, CancellationToken)
  nameWithType: IQueryCompiler.ExecuteAsync<TResult>(Expression, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync<TResult>(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  nameWithType.vb: IQueryCompiler.ExecuteAsync(Of TResult)(Expression, CancellationToken)
  fullname.vb: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync(Of TResult)(System.Linq.Expressions.Expression, System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Expression, CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
    name: ExecuteAsync<TResult>
    nameWithType: IQueryCompiler.ExecuteAsync<TResult>
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)
    name: ExecuteAsync(Of TResult)
    nameWithType: IQueryCompiler.ExecuteAsync(Of TResult)
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler.ExecuteAsync(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryContext
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: QueryContext
  nameWithType: QueryContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,{TResult}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,``0}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, TResult>
  nameWithType: Func<QueryContext, TResult>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, TResult>
  nameWithType.vb: Func(Of QueryContext, TResult)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, TResult)
  name.vb: Func(Of QueryContext, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{{TResult}}}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,IAsyncEnumerable{``0}}
  parent: System
  definition: System.Func`2
  name: Func<QueryContext, IAsyncEnumerable<TResult>>
  nameWithType: Func<QueryContext, IAsyncEnumerable<TResult>>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable<TResult>>
  nameWithType.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.QueryContext, IAsyncEnumerable(Of TResult))
  name.vb: Func(Of QueryContext, IAsyncEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.QueryContext
    name: QueryContext
    nameWithType: QueryContext
    fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: IAsyncEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
