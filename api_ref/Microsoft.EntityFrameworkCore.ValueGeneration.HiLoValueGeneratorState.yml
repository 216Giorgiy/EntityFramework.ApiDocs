### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  commentId: T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  id: HiLoValueGeneratorState
  parent: Microsoft.EntityFrameworkCore.ValueGeneration
  children:
  - Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.#ctor(System.Int32)
  - Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next``1(System.Func{System.Int64})
  - Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: HiLoValueGeneratorState
  nameWithType: HiLoValueGeneratorState
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HiLoValueGeneratorState
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
    startLine: 16
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\nThe thread safe state used by <xref href=\"Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public class HiLoValueGeneratorState
    content.vb: Public Class HiLoValueGeneratorState
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.#ctor(System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  langs:
  - csharp
  - vb
  name: HiLoValueGeneratorState(Int32)
  nameWithType: HiLoValueGeneratorState.HiLoValueGeneratorState(Int32)
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.HiLoValueGeneratorState(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
    startLine: 29
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public HiLoValueGeneratorState(int blockSize)
    content.vb: Public Sub New(blockSize As Integer)
    parameters:
    - id: blockSize
      type: System.Int32
      description: "\nThe number of sequential values that can be used, starting from the low value, before\na new low value must be fetched from the database.\n"
  overload: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next``1(System.Func{System.Int64})
  commentId: M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next``1(System.Func{System.Int64})
  id: Next``1(System.Func{System.Int64})
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  langs:
  - csharp
  - vb
  name: Next<TValue>(Func<Int64>)
  nameWithType: HiLoValueGeneratorState.Next<TValue>(Func<Int64>)
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next<TValue>(System.Func<System.Int64>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Next
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
    startLine: 48
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\nGets a value to be assigned to a property.\n"
  example: []
  syntax:
    content: public virtual TValue Next<TValue>(Func<long> getNewLowValue)
    content.vb: Public Overridable Function Next(Of TValue)(getNewLowValue As Func(Of Long)) As TValue
    parameters:
    - id: getNewLowValue
      type: System.Func{System.Int64}
      description: "\nA function to get the next low value if needed.\n"
    typeParameters:
    - id: TValue
      description: 'The type of values being generated. '
    return:
      type: '{TValue}'
      description: 'The value to be assigned to a property. '
  overload: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next*
  nameWithType.vb: HiLoValueGeneratorState.Next(Of TValue)(Func(Of Int64))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next(Of TValue)(System.Func(Of System.Int64))
  name.vb: Next(Of TValue)(Func(Of Int64))
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}},System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}},System.Threading.CancellationToken)
  id: NextAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}},System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  langs:
  - csharp
  - vb
  name: NextAsync<TValue>(Func<CancellationToken, Task<Int64>>, CancellationToken)
  nameWithType: HiLoValueGeneratorState.NextAsync<TValue>(Func<CancellationToken, Task<Int64>>, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync<TValue>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Int64>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: NextAsync
    path: src/Microsoft.EntityFrameworkCore/ValueGeneration/HiLoValueGeneratorState.cs
    startLine: 88
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.ValueGeneration
  summary: "\nGets a value to be assigned to a property.\n"
  example: []
  syntax:
    content: public virtual Task<TValue> NextAsync<TValue>(Func<CancellationToken, Task<long>> getNewLowValue, CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function NextAsync(Of TValue)(getNewLowValue As Func(Of CancellationToken, Task(Of Long)), cancellationToken As CancellationToken = Nothing) As Task(Of TValue)
    parameters:
    - id: getNewLowValue
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}}
      description: "\nA function to get the next low value if needed.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    typeParameters:
    - id: TValue
      description: 'The type of values being generated. '
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: 'The value to be assigned to a property. '
  overload: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync*
  nameWithType.vb: HiLoValueGeneratorState.NextAsync(Of TValue)(Func(Of CancellationToken, Task(Of Int64)), CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync(Of TValue)(System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Int64)), System.Threading.CancellationToken)
  name.vb: NextAsync(Of TValue)(Func(Of CancellationToken, Task(Of Int64)), CancellationToken)
references:
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1
  commentId: T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1
  isExternal: false
  name: HiLoValueGenerator<TValue>
  nameWithType: HiLoValueGenerator<TValue>
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator<TValue>
  nameWithType.vb: HiLoValueGenerator(Of TValue)
  fullname.vb: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator(Of TValue)
  name.vb: HiLoValueGenerator(Of TValue)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1
    name: HiLoValueGenerator
    nameWithType: HiLoValueGenerator
    fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1
    name: HiLoValueGenerator
    nameWithType: HiLoValueGenerator
    fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.ValueGeneration
  commentId: N:Microsoft.EntityFrameworkCore.ValueGeneration
  isExternal: false
  name: Microsoft.EntityFrameworkCore.ValueGeneration
  nameWithType: Microsoft.EntityFrameworkCore.ValueGeneration
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  commentId: T:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
  parent: Microsoft.EntityFrameworkCore.ValueGeneration
  isExternal: false
  name: HiLoValueGeneratorState
  nameWithType: HiLoValueGeneratorState
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.#ctor
  isExternal: false
  name: HiLoValueGeneratorState
  nameWithType: HiLoValueGeneratorState.HiLoValueGeneratorState
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.HiLoValueGeneratorState
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next*
  commentId: Overload:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next
  isExternal: false
  name: Next<TValue>
  nameWithType: HiLoValueGeneratorState.Next<TValue>
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next<TValue>
  nameWithType.vb: HiLoValueGeneratorState.Next(Of TValue)
  fullname.vb: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.Next(Of TValue)
  name.vb: Next(Of TValue)
- uid: System.Func{System.Int64}
  commentId: T:System.Func{System.Int64}
  parent: System
  definition: System.Func`1
  name: Func<Int64>
  nameWithType: Func<Int64>
  fullName: System.Func<System.Int64>
  nameWithType.vb: Func(Of Int64)
  fullname.vb: System.Func(Of System.Int64)
  name.vb: Func(Of Int64)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync
  isExternal: false
  name: NextAsync<TValue>
  nameWithType: HiLoValueGeneratorState.NextAsync<TValue>
  fullName: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync<TValue>
  nameWithType.vb: HiLoValueGeneratorState.NextAsync(Of TValue)
  fullname.vb: Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState.NextAsync(Of TValue)
  name.vb: NextAsync(Of TValue)
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}}
  commentId: T:System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Int64}}
  parent: System
  definition: System.Func`2
  name: Func<CancellationToken, Task<Int64>>
  nameWithType: Func<CancellationToken, Task<Int64>>
  fullName: System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Int64>>
  nameWithType.vb: Func(Of CancellationToken, Task(Of Int64))
  fullname.vb: System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Int64))
  name.vb: Func(Of CancellationToken, Task(Of Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TValue}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TValue>
  nameWithType: Task<TValue>
  fullName: System.Threading.Tasks.Task<TValue>
  nameWithType.vb: Task(Of TValue)
  fullname.vb: System.Threading.Tasks.Task(Of TValue)
  name.vb: Task(Of TValue)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
