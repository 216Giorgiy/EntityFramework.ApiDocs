### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext
  commentId: T:Microsoft.EntityFrameworkCore.Query.QueryContext
  id: QueryContext
  parent: Microsoft.EntityFrameworkCore.Query
  children:
  - Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer},Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager},Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  - Microsoft.EntityFrameworkCore.Query.QueryContext.AddParameter(System.String,System.Object)
  - Microsoft.EntityFrameworkCore.Query.QueryContext.BeginTrackingQuery
  - Microsoft.EntityFrameworkCore.Query.QueryContext.CancellationToken
  - Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector
  - Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues
  - Microsoft.EntityFrameworkCore.Query.QueryContext.QueryBuffer
  - Microsoft.EntityFrameworkCore.Query.QueryContext.QueryProvider
  - Microsoft.EntityFrameworkCore.Query.QueryContext.RemoveParameter(System.String)
  - Microsoft.EntityFrameworkCore.Query.QueryContext.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)
  - Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager
  langs:
  - csharp
  - vb
  name: QueryContext
  nameWithType: QueryContext
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QueryContext
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    The principal data structure used by a compiled query during execution.\n"
  example: []
  syntax:
    content: public class QueryContext
    content.vb: Public Class QueryContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Query.QueryContext.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer},Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager},Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContext.#ctor(System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer},Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager},Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  id: '#ctor(System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer},Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager},Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)'
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: QueryContext(Func<IQueryBuffer>, LazyRef<IStateManager>, IConcurrencyDetector)
  nameWithType: QueryContext.QueryContext(Func<IQueryBuffer>, LazyRef<IStateManager>, IConcurrencyDetector)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.QueryContext(System.Func<Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer>, Microsoft.EntityFrameworkCore.Internal.LazyRef<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager>, Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public QueryContext(Func<IQueryBuffer> queryBufferFactory, LazyRef<IStateManager> stateManager, IConcurrencyDetector concurrencyDetector)
    content.vb: Public Sub New(queryBufferFactory As Func(Of IQueryBuffer), stateManager As LazyRef(Of IStateManager), concurrencyDetector As IConcurrencyDetector)
    parameters:
    - id: queryBufferFactory
      type: System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer}
    - id: stateManager
      type: Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager}
    - id: concurrencyDetector
      type: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  nameWithType.vb: QueryContext.QueryContext(Func(Of IQueryBuffer), LazyRef(Of IStateManager), IConcurrencyDetector)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.QueryContext.QueryContext(System.Func(Of Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer), Microsoft.EntityFrameworkCore.Internal.LazyRef(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager), Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector)
  name.vb: QueryContext(Func(Of IQueryBuffer), LazyRef(Of IStateManager), IConcurrencyDetector)
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.QueryBuffer
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContext.QueryBuffer
  id: QueryBuffer
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: QueryBuffer
  nameWithType: QueryContext.QueryBuffer
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.QueryBuffer
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QueryBuffer
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    The query buffer.\n"
  example: []
  syntax:
    content: public virtual IQueryBuffer QueryBuffer { get; }
    content.vb: Public Overridable ReadOnly Property QueryBuffer As IQueryBuffer
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager
  id: StateManager
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: StateManager
  nameWithType: QueryContext.StateManager
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.StateManager
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: StateManager
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 58
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    The state manager.\n"
  example: []
  syntax:
    content: public virtual LazyRef<IStateManager> StateManager { get; }
    content.vb: Public Overridable ReadOnly Property StateManager As LazyRef(Of IStateManager)
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager}
      description: "\n    The state manager.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.QueryProvider
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContext.QueryProvider
  id: QueryProvider
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: QueryProvider
  nameWithType: QueryContext.QueryProvider
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.QueryProvider
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: QueryProvider
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 66
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    The query provider.\n"
  example: []
  syntax:
    content: public virtual IQueryProvider QueryProvider { get; }
    content.vb: Public Overridable ReadOnly Property QueryProvider As IQueryProvider
    parameters: []
    return:
      type: System.Linq.IQueryProvider
      description: "\n    The query provider.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector
  id: ConcurrencyDetector
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: ConcurrencyDetector
  nameWithType: QueryContext.ConcurrencyDetector
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.ConcurrencyDetector
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ConcurrencyDetector
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 74
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the concurrency detector.\n"
  example: []
  syntax:
    content: public virtual IConcurrencyDetector ConcurrencyDetector { get; }
    content.vb: Public Overridable ReadOnly Property ConcurrencyDetector As IConcurrencyDetector
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
      description: "\n    The concurrency detector.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.CancellationToken
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContext.CancellationToken
  id: CancellationToken
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: CancellationToken
  nameWithType: QueryContext.CancellationToken
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.CancellationToken
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CancellationToken
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 82
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets or sets the cancellation token.\n"
  example: []
  syntax:
    content: public virtual CancellationToken CancellationToken { get; set; }
    content.vb: Public Overridable Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: "\n    The cancellation token.\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues
  commentId: P:Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues
  id: ParameterValues
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: ParameterValues
  nameWithType: QueryContext.ParameterValues
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.ParameterValues
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ParameterValues
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 87
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    The parameter values.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyDictionary<string, object> ParameterValues { get; }
    content.vb: Public Overridable ReadOnly Property ParameterValues As IReadOnlyDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.AddParameter(System.String,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContext.AddParameter(System.String,System.Object)
  id: AddParameter(System.String,System.Object)
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: AddParameter(String, Object)
  nameWithType: QueryContext.AddParameter(String, Object)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.AddParameter(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: AddParameter
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 95
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Adds a parameter.\n"
  example: []
  syntax:
    content: public virtual void AddParameter(string name, object value)
    content.vb: Public Overridable Sub AddParameter(name As String, value As Object)
    parameters:
    - id: name
      type: System.String
      description: 'The name. '
    - id: value
      type: System.Object
      description: 'The value. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.RemoveParameter(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContext.RemoveParameter(System.String)
  id: RemoveParameter(System.String)
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: RemoveParameter(String)
  nameWithType: QueryContext.RemoveParameter(String)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.RemoveParameter(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: RemoveParameter
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Removes a parameter by name.\n"
  example: []
  syntax:
    content: public virtual object RemoveParameter(string name)
    content.vb: Public Overridable Function RemoveParameter(name As String) As Object
    parameters:
    - id: name
      type: System.String
      description: 'The name. '
    return:
      type: System.Object
      description: "\n    The parameter value.\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.BeginTrackingQuery
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContext.BeginTrackingQuery
  id: BeginTrackingQuery
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: BeginTrackingQuery()
  nameWithType: QueryContext.BeginTrackingQuery()
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.BeginTrackingQuery()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BeginTrackingQuery
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 123
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Notify the state manager that a tracking query is starting.\n"
  example: []
  syntax:
    content: public virtual void BeginTrackingQuery()
    content.vb: Public Overridable Sub BeginTrackingQuery
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)
  commentId: M:Microsoft.EntityFrameworkCore.Query.QueryContext.StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)
  id: StartTracking(System.Object,Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)
  parent: Microsoft.EntityFrameworkCore.Query.QueryContext
  langs:
  - csharp
  - vb
  name: StartTracking(Object, EntityTrackingInfo)
  nameWithType: QueryContext.StartTracking(Object, EntityTrackingInfo)
  fullName: Microsoft.EntityFrameworkCore.Query.QueryContext.StartTracking(System.Object, Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: StartTracking
    path: src/Microsoft.EntityFrameworkCore/Query/QueryContext.cs
    startLine: 130
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Start tracking an entity.\n"
  example: []
  syntax:
    content: public virtual void StartTracking(object entity, EntityTrackingInfo entityTrackingInfo)
    content.vb: Public Overridable Sub StartTracking(entity As Object, entityTrackingInfo As EntityTrackingInfo)
    parameters:
    - id: entity
      type: System.Object
      description: 'The entity. '
    - id: entityTrackingInfo
      type: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
      description: 'Information describing how to track the entity. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Query.QueryContext.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<QueryContext, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryContext, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.QueryContext, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of QueryContext, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.QueryContext, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of QueryContext, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<QueryContext, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<QueryContext, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Query.QueryContext, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of QueryContext, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of QueryContext, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Query.QueryContext, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer}
  parent: System
  definition: System.Func`1
  name: Func<IQueryBuffer>
  nameWithType: Func<IQueryBuffer>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer>
  nameWithType.vb: Func(Of IQueryBuffer)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer)
  name.vb: Func(Of IQueryBuffer)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
    name: IQueryBuffer
    nameWithType: IQueryBuffer
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
    name: IQueryBuffer
    nameWithType: IQueryBuffer
    fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager}
  commentId: T:Microsoft.EntityFrameworkCore.Internal.LazyRef{Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager}
  parent: Microsoft.EntityFrameworkCore.Internal
  definition: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  name: LazyRef<IStateManager>
  nameWithType: LazyRef<IStateManager>
  fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager>
  nameWithType.vb: LazyRef(Of IStateManager)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.LazyRef(Of Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager)
  name.vb: LazyRef(Of IStateManager)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
    name: IStateManager
    nameWithType: IStateManager
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
    name: IStateManager
    nameWithType: IStateManager
    fullName: Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  commentId: T:Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: IConcurrencyDetector
  nameWithType: IConcurrencyDetector
  fullName: Microsoft.EntityFrameworkCore.Internal.IConcurrencyDetector
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  commentId: T:Microsoft.EntityFrameworkCore.Internal.LazyRef`1
  isExternal: false
  name: LazyRef<T>
  nameWithType: LazyRef<T>
  fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef<T>
  nameWithType.vb: LazyRef(Of T)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.LazyRef(Of T)
  name.vb: LazyRef(Of T)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.LazyRef`1
    name: LazyRef
    nameWithType: LazyRef
    fullName: Microsoft.EntityFrameworkCore.Internal.LazyRef
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: IQueryBuffer
  nameWithType: IQueryBuffer
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.IQueryBuffer
- uid: Microsoft.EntityFrameworkCore.Query.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Query.Internal
  fullName: Microsoft.EntityFrameworkCore.Query.Internal
- uid: System.Linq.IQueryProvider
  commentId: T:System.Linq.IQueryProvider
  parent: System.Linq
  isExternal: true
  name: IQueryProvider
  nameWithType: IQueryProvider
  fullName: System.Linq.IQueryProvider
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<String, Object>
  nameWithType: IReadOnlyDictionary<String, Object>
  fullName: System.Collections.Generic.IReadOnlyDictionary<System.String, System.Object>
  nameWithType.vb: IReadOnlyDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of System.String, System.Object)
  name.vb: IReadOnlyDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    nameWithType: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  commentId: T:Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
  parent: Microsoft.EntityFrameworkCore.Query.Internal
  isExternal: false
  name: EntityTrackingInfo
  nameWithType: EntityTrackingInfo
  fullName: Microsoft.EntityFrameworkCore.Query.Internal.EntityTrackingInfo
