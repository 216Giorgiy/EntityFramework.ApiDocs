### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  commentId: T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  id: FileSystemFileService
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  children:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.DirectoryExists(System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.FileExists(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.IsFileReadOnly(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.OutputFile(System.String,System.String,System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.RetrieveFileContents(System.String,System.String)
  langs:
  - csharp
  - vb
  name: FileSystemFileService
  nameWithType: FileSystemFileService
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FileSystemFileService
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class FileSystemFileService : IFileService'
    content.vb: >-
      Public Class FileSystemFileService
          Implements IFileService
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.DirectoryExists(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  langs:
  - csharp
  - vb
  name: DirectoryExists(String)
  nameWithType: FileSystemFileService.DirectoryExists(String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.DirectoryExists(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DirectoryExists
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool DirectoryExists(string directoryName)
    content.vb: Public Overridable Function DirectoryExists(directoryName As String) As Boolean
    parameters:
    - id: directoryName
      type: System.String
    return:
      type: System.Boolean
  implements:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.FileExists(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.FileExists(System.String,System.String)
  id: FileExists(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  langs:
  - csharp
  - vb
  name: FileExists(String, String)
  nameWithType: FileSystemFileService.FileExists(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.FileExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FileExists
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool FileExists(string directoryName, string fileName)
    content.vb: Public Overridable Function FileExists(directoryName As String, fileName As String) As Boolean
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    return:
      type: System.Boolean
  implements:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.IsFileReadOnly(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.IsFileReadOnly(System.String,System.String)
  id: IsFileReadOnly(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  langs:
  - csharp
  - vb
  name: IsFileReadOnly(String, String)
  nameWithType: FileSystemFileService.IsFileReadOnly(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.IsFileReadOnly(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsFileReadOnly
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
    startLine: 32
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual bool IsFileReadOnly(string directoryName, string fileName)
    content.vb: Public Overridable Function IsFileReadOnly(directoryName As String, fileName As String) As Boolean
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    return:
      type: System.Boolean
  implements:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.RetrieveFileContents(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.RetrieveFileContents(System.String,System.String)
  id: RetrieveFileContents(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  langs:
  - csharp
  - vb
  name: RetrieveFileContents(String, String)
  nameWithType: FileSystemFileService.RetrieveFileContents(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.RetrieveFileContents(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RetrieveFileContents
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
    startLine: 43
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual string RetrieveFileContents(string directoryName, string fileName)
    content.vb: Public Overridable Function RetrieveFileContents(directoryName As String, fileName As String) As String
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    return:
      type: System.String
  implements:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.OutputFile(System.String,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.OutputFile(System.String,System.String,System.String)
  id: OutputFile(System.String,System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService
  langs:
  - csharp
  - vb
  name: OutputFile(String, String, String)
  nameWithType: FileSystemFileService.OutputFile(String, String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.FileSystemFileService.OutputFile(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OutputFile
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/FileSystemFileService.cs
    startLine: 50
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used\n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual string OutputFile(string directoryName, string fileName, string contents)
    content.vb: Public Overridable Function OutputFile(directoryName As String, fileName As String, contents As String) As String
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    - id: contents
      type: System.String
    return:
      type: System.String
  implements:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Scaffolding.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  commentId: T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  isExternal: false
  name: IFileService
  nameWithType: IFileService
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  isExternal: true
  name: DirectoryExists(String)
  nameWithType: IFileService.DirectoryExists(String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
    name: DirectoryExists
    nameWithType: IFileService.DirectoryExists
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
    name: DirectoryExists
    nameWithType: IFileService.DirectoryExists
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  isExternal: true
  name: FileExists(String, String)
  nameWithType: IFileService.FileExists(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
    name: FileExists
    nameWithType: IFileService.FileExists
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
    name: FileExists
    nameWithType: IFileService.FileExists
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  isExternal: true
  name: IsFileReadOnly(String, String)
  nameWithType: IFileService.IsFileReadOnly(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
    name: IsFileReadOnly
    nameWithType: IFileService.IsFileReadOnly
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
    name: IsFileReadOnly
    nameWithType: IFileService.IsFileReadOnly
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  isExternal: true
  name: RetrieveFileContents(String, String)
  nameWithType: IFileService.RetrieveFileContents(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
    name: RetrieveFileContents
    nameWithType: IFileService.RetrieveFileContents
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
    name: RetrieveFileContents
    nameWithType: IFileService.RetrieveFileContents
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  isExternal: true
  name: OutputFile(String, String, String)
  nameWithType: IFileService.OutputFile(String, String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String, System.String, System.String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
    name: OutputFile
    nameWithType: IFileService.OutputFile
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
    name: OutputFile
    nameWithType: IFileService.OutputFile
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
