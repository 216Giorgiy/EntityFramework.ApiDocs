### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  commentId: T:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  id: RelationalEntityTypeBuilderExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  - Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  langs:
  - csharp
  - vb
  name: RelationalEntityTypeBuilderExtensions
  nameWithType: RelationalEntityTypeBuilderExtensions
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: RelationalEntityTypeBuilderExtensions
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 18
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Relational database specific extension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class RelationalEntityTypeBuilderExtensions
    content.vb: Public Module RelationalEntityTypeBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  id: ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToTable(EntityTypeBuilder, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable(EntityTypeBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ToTable
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 26
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting a relational database.\n"
  example: []
  syntax:
    content: public static EntityTypeBuilder ToTable(this EntityTypeBuilder entityTypeBuilder, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTable(entityTypeBuilder As EntityTypeBuilder, name As String) As EntityTypeBuilder
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  id: ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToTable<TEntity>(EntityTypeBuilder<TEntity>, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable<TEntity>(EntityTypeBuilder<TEntity>, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable<TEntity>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ToTable
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting a relational database.\n"
  example: []
  syntax:
    content: 'public static EntityTypeBuilder<TEntity> ToTable<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string name)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTable(Of TEntity As Class)(entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String) As EntityTypeBuilder(Of TEntity)
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    typeParameters:
    - id: TEntity
      description: 'The entity type being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: RelationalEntityTypeBuilderExtensions.ToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Of TEntity)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity), System.String)
  name.vb: ToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String)
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  id: ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToTable(EntityTypeBuilder, String, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable(EntityTypeBuilder, String, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ToTable
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 60
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting a relational database.\n"
  example: []
  syntax:
    content: public static EntityTypeBuilder ToTable(this EntityTypeBuilder entityTypeBuilder, string name, string schema)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTable(entityTypeBuilder As EntityTypeBuilder, name As String, schema As String) As EntityTypeBuilder
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    - id: schema
      type: System.String
      description: 'The schema of the table. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  id: ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToTable<TEntity>(EntityTypeBuilder<TEntity>, String, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.ToTable<TEntity>(EntityTypeBuilder<TEntity>, String, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable<TEntity>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ToTable
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 84
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the table that the entity maps to when targeting a relational database.\n"
  example: []
  syntax:
    content: 'public static EntityTypeBuilder<TEntity> ToTable<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string name, string schema)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTable(Of TEntity As Class)(entityTypeBuilder As EntityTypeBuilder(Of TEntity), name As String, schema As String) As EntityTypeBuilder(Of TEntity)
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the table. '
    - id: schema
      type: System.String
      description: 'The schema of the table. '
    typeParameters:
    - id: TEntity
      description: 'The entity type being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: RelationalEntityTypeBuilderExtensions.ToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Of TEntity)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity), System.String, System.String)
  name.vb: ToTable(Of TEntity)(EntityTypeBuilder(Of TEntity), String, String)
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  id: HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: HasDiscriminator(EntityTypeBuilder)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator(EntityTypeBuilder)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasDiscriminator
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 97
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the discriminator column used to identify which entity type each row in a table represents\n    when an inheritance hierarchy is mapped to a single table in a relational database.\n"
  example: []
  syntax:
    content: public static DiscriminatorBuilder HasDiscriminator(this EntityTypeBuilder entityTypeBuilder)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasDiscriminator(entityTypeBuilder As EntityTypeBuilder) As DiscriminatorBuilder
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
      description: 'A builder that allows the discriminator column to be configured. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  id: HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Type)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: HasDiscriminator(EntityTypeBuilder, String, Type)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator(EntityTypeBuilder, String, Type)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasDiscriminator
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 113
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the discriminator column used to identify which entity type each row in a table represents\n    when an inheritance hierarchy is mapped to a single table in a relational database.\n"
  example: []
  syntax:
    content: public static DiscriminatorBuilder HasDiscriminator(this EntityTypeBuilder entityTypeBuilder, string name, Type discriminatorType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasDiscriminator(entityTypeBuilder As EntityTypeBuilder, name As String, discriminatorType As Type) As DiscriminatorBuilder
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the discriminator column. '
    - id: discriminatorType
      type: System.Type
      description: 'The type of values stored in the discriminator column. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
      description: 'A builder that allows the discriminator column to be configured. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  id: HasDiscriminator``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: HasDiscriminator<TDiscriminator>(EntityTypeBuilder, String)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>(EntityTypeBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator<TDiscriminator>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasDiscriminator
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 134
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the discriminator column used to identify which entity type each row in a table represents\n    when an inheritance hierarchy is mapped to a single table in a relational database.\n"
  example: []
  syntax:
    content: public static DiscriminatorBuilder<TDiscriminator> HasDiscriminator<TDiscriminator>(this EntityTypeBuilder entityTypeBuilder, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasDiscriminator(Of TDiscriminator)(entityTypeBuilder As EntityTypeBuilder, name As String) As DiscriminatorBuilder(Of TDiscriminator)
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
      description: 'The builder for the entity type being configured. '
    - id: name
      type: System.String
      description: 'The name of the discriminator column. '
    typeParameters:
    - id: TDiscriminator
      description: 'The type of values stored in the discriminator column. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder{{TDiscriminator}}
      description: 'A builder that allows the discriminator column to be configured. '
  nameWithType.vb: RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)(EntityTypeBuilder, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TDiscriminator)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder, System.String)
  name.vb: HasDiscriminator(Of TDiscriminator)(EntityTypeBuilder, String)
- uid: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: HasDiscriminator``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions
  langs:
  - csharp
  - vb
  name: HasDiscriminator<TEntity, TDiscriminator>(EntityTypeBuilder<TEntity>, Expression<Func<TEntity, TDiscriminator>>)
  nameWithType: RelationalEntityTypeBuilderExtensions.HasDiscriminator<TEntity, TDiscriminator>(EntityTypeBuilder<TEntity>, Expression<Func<TEntity, TDiscriminator>>)
  fullName: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator<TEntity, TDiscriminator>(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>, System.Linq.Expressions.Expression<System.Func<TEntity, TDiscriminator>>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: HasDiscriminator
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalEntityTypeBuilderExtensions.cs
    startLine: 157
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the discriminator column used to identify which entity type each row in a table represents\n    when an inheritance hierarchy is mapped to a single table in a relational database.\n"
  example: []
  syntax:
    content: 'public static DiscriminatorBuilder<TDiscriminator> HasDiscriminator<TEntity, TDiscriminator>(this EntityTypeBuilder<TEntity> entityTypeBuilder, Expression<Func<TEntity, TDiscriminator>> propertyExpression)where TEntity : class'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasDiscriminator(Of TEntity As Class, TDiscriminator)(entityTypeBuilder As EntityTypeBuilder(Of TEntity), propertyExpression As Expression(Of Func(Of TEntity, TDiscriminator))) As DiscriminatorBuilder(Of TDiscriminator)
    parameters:
    - id: entityTypeBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
      description: 'The builder for the entity type being configured. '
    - id: propertyExpression
      type: System.Linq.Expressions.Expression{System.Func{{TEntity},{TDiscriminator}}}
      description: "\n    A lambda expression representing the property to be used as the discriminator (\n<code>blog =&gt; blog.Discriminator</code>).\n"
    typeParameters:
    - id: TEntity
      description: 'The entity type being configured. '
    - id: TDiscriminator
      description: 'The type of values stored in the discriminator column. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder{{TDiscriminator}}
      description: 'A builder that allows the discriminator column to be configured. '
  nameWithType.vb: RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TEntity, TDiscriminator)(EntityTypeBuilder(Of TEntity), Expression(Of Func(Of TEntity, TDiscriminator)))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasDiscriminator(Of TEntity, TDiscriminator)(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity), System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TDiscriminator)))
  name.vb: HasDiscriminator(Of TEntity, TDiscriminator)(EntityTypeBuilder(Of TEntity), Expression(Of Func(Of TEntity, TDiscriminator)))
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: EntityTypeBuilder
  nameWithType: EntityTypeBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Builders
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Builders
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{{TEntity}}
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0}
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  definition: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  name: EntityTypeBuilder<TEntity>
  nameWithType: EntityTypeBuilder<TEntity>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>
  nameWithType.vb: EntityTypeBuilder(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity)
  name.vb: EntityTypeBuilder(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: EntityTypeBuilder<TEntity>
  nameWithType: EntityTypeBuilder<TEntity>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<TEntity>
  nameWithType.vb: EntityTypeBuilder(Of TEntity)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of TEntity)
  name.vb: EntityTypeBuilder(Of TEntity)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1
    name: EntityTypeBuilder
    nameWithType: EntityTypeBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: DiscriminatorBuilder
  nameWithType: DiscriminatorBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder{{TDiscriminator}}
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder{``0}
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  definition: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1
  name: DiscriminatorBuilder<TDiscriminator>
  nameWithType: DiscriminatorBuilder<TDiscriminator>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder<TDiscriminator>
  nameWithType.vb: DiscriminatorBuilder(Of TDiscriminator)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder(Of TDiscriminator)
  name.vb: DiscriminatorBuilder(Of TDiscriminator)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1
    name: DiscriminatorBuilder
    nameWithType: DiscriminatorBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TDiscriminator
    nameWithType: TDiscriminator
    fullName: TDiscriminator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1
    name: DiscriminatorBuilder
    nameWithType: DiscriminatorBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDiscriminator
    nameWithType: TDiscriminator
    fullName: TDiscriminator
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: DiscriminatorBuilder<TDiscriminator>
  nameWithType: DiscriminatorBuilder<TDiscriminator>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder<TDiscriminator>
  nameWithType.vb: DiscriminatorBuilder(Of TDiscriminator)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder(Of TDiscriminator)
  name.vb: DiscriminatorBuilder(Of TDiscriminator)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1
    name: DiscriminatorBuilder
    nameWithType: DiscriminatorBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TDiscriminator
    nameWithType: TDiscriminator
    fullName: TDiscriminator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1
    name: DiscriminatorBuilder
    nameWithType: DiscriminatorBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDiscriminator
    nameWithType: TDiscriminator
    fullName: TDiscriminator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TEntity},{TDiscriminator}}}
  commentId: T:System.Linq.Expressions.Expression{System.Func{``0,``1}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  name: Expression<Func<TEntity, TDiscriminator>>
  nameWithType: Expression<Func<TEntity, TDiscriminator>>
  fullName: System.Linq.Expressions.Expression<System.Func<TEntity, TDiscriminator>>
  nameWithType.vb: Expression(Of Func(Of TEntity, TDiscriminator))
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TEntity, TDiscriminator))
  name.vb: Expression(Of Func(Of TEntity, TDiscriminator))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDiscriminator
    nameWithType: TDiscriminator
    fullName: TDiscriminator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TDiscriminator
    nameWithType: TDiscriminator
    fullName: TDiscriminator
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  commentId: T:System.Linq.Expressions.Expression`1
  isExternal: true
  name: Expression<TDelegate>
  nameWithType: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  nameWithType.vb: Expression(Of TDelegate)
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDelegate
    nameWithType: TDelegate
    fullName: TDelegate
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
