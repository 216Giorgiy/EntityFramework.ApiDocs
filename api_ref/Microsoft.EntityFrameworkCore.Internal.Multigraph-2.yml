### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  commentId: T:Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  id: Multigraph`2
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdge(`0,`0,`1)
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdges(`0,`0,System.Collections.Generic.IEnumerable{`1})
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertex(`0)
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertices(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Edges
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetEdges(`0,`0)
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetIncomingNeighbours(`0)
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetOutgoingNeighbours(`0)
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean})
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.ToString(`0)
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Vertices
  langs:
  - csharp
  - vb
  name: Multigraph<TVertex, TEdge>
  nameWithType: Multigraph<TVertex, TEdge>
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Multigraph
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 14
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public class Multigraph<TVertex, TEdge> : Graph<TVertex>'
    content.vb: >-
      Public Class Multigraph(Of TVertex, TEdge)
          Inherits Graph(Of TVertex)
    typeParameters:
    - id: TVertex
    - id: TEdge
  inheritance:
  - System.Object
  - Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}
  inheritedMembers:
  - Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{{TVertex}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  nameWithType.vb: Multigraph(Of TVertex, TEdge)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge)
  name.vb: Multigraph(Of TVertex, TEdge)
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.ToString(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.ToString(`0)
  id: ToString(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: ToString(TVertex)
  nameWithType: Multigraph<TVertex, TEdge>.ToString(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.ToString(TVertex)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: ToString
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 24
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected virtual string ToString(TVertex vertex)
    content.vb: Protected Overridable Function ToString(vertex As TVertex) As String
    parameters:
    - id: vertex
      type: '{TVertex}'
    return:
      type: System.String
  nameWithType.vb: Multigraph(Of TVertex, TEdge).ToString(TVertex)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).ToString(TVertex)
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Edges
  commentId: P:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Edges
  id: Edges
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: Edges
  nameWithType: Multigraph<TVertex, TEdge>.Edges
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.Edges
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Edges
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<TEdge> Edges { get; }
    content.vb: Public Overridable ReadOnly Property Edges As IEnumerable(Of TEdge)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TEdge}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).Edges
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).Edges
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetEdges(`0,`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetEdges(`0,`0)
  id: GetEdges(`0,`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: GetEdges(TVertex, TVertex)
  nameWithType: Multigraph<TVertex, TEdge>.GetEdges(TVertex, TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.GetEdges(TVertex, TVertex)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetEdges
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 36
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IEnumerable<TEdge> GetEdges(TVertex from, TVertex to)
    content.vb: Public Overridable Function GetEdges(from As TVertex, to As TVertex) As IEnumerable(Of TEdge)
    parameters:
    - id: from
      type: '{TVertex}'
    - id: to
      type: '{TVertex}'
    return:
      type: System.Collections.Generic.IEnumerable{{TEdge}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).GetEdges(TVertex, TVertex)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).GetEdges(TVertex, TVertex)
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertex(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertex(`0)
  id: AddVertex(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: AddVertex(TVertex)
  nameWithType: Multigraph<TVertex, TEdge>.AddVertex(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.AddVertex(TVertex)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: AddVertex
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 54
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AddVertex(TVertex vertex)
    content.vb: Public Overridable Sub AddVertex(vertex As TVertex)
    parameters:
    - id: vertex
      type: '{TVertex}'
  nameWithType.vb: Multigraph(Of TVertex, TEdge).AddVertex(TVertex)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).AddVertex(TVertex)
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertices(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddVertices(System.Collections.Generic.IEnumerable{`0})
  id: AddVertices(System.Collections.Generic.IEnumerable{`0})
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: AddVertices(IEnumerable<TVertex>)
  nameWithType: Multigraph<TVertex, TEdge>.AddVertices(IEnumerable<TVertex>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.AddVertices(System.Collections.Generic.IEnumerable<TVertex>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: AddVertices
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 61
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AddVertices(IEnumerable<TVertex> vertices)
    content.vb: Public Overridable Sub AddVertices(vertices As IEnumerable(Of TVertex))
    parameters:
    - id: vertices
      type: System.Collections.Generic.IEnumerable{{TVertex}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).AddVertices(IEnumerable(Of TVertex))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).AddVertices(System.Collections.Generic.IEnumerable(Of TVertex))
  name.vb: AddVertices(IEnumerable(Of TVertex))
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdge(`0,`0,`1)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdge(`0,`0,`1)
  id: AddEdge(`0,`0,`1)
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: AddEdge(TVertex, TVertex, TEdge)
  nameWithType: Multigraph<TVertex, TEdge>.AddEdge(TVertex, TVertex, TEdge)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.AddEdge(TVertex, TVertex, TEdge)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: AddEdge
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AddEdge(TVertex from, TVertex to, TEdge edge)
    content.vb: Public Overridable Sub AddEdge(from As TVertex, to As TVertex, edge As TEdge)
    parameters:
    - id: from
      type: '{TVertex}'
    - id: to
      type: '{TVertex}'
    - id: edge
      type: '{TEdge}'
  nameWithType.vb: Multigraph(Of TVertex, TEdge).AddEdge(TVertex, TVertex, TEdge)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).AddEdge(TVertex, TVertex, TEdge)
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdges(`0,`0,System.Collections.Generic.IEnumerable{`1})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.AddEdges(`0,`0,System.Collections.Generic.IEnumerable{`1})
  id: AddEdges(`0,`0,System.Collections.Generic.IEnumerable{`1})
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: AddEdges(TVertex, TVertex, IEnumerable<TEdge>)
  nameWithType: Multigraph<TVertex, TEdge>.AddEdges(TVertex, TVertex, IEnumerable<TEdge>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.AddEdges(TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: AddEdges
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 75
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual void AddEdges(TVertex from, TVertex to, IEnumerable<TEdge> edges)
    content.vb: Public Overridable Sub AddEdges(from As TVertex, to As TVertex, edges As IEnumerable(Of TEdge))
    parameters:
    - id: from
      type: '{TVertex}'
    - id: to
      type: '{TVertex}'
    - id: edges
      type: System.Collections.Generic.IEnumerable{{TEdge}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).AddEdges(TVertex, TVertex, IEnumerable(Of TEdge))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).AddEdges(TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge))
  name.vb: AddEdges(TVertex, TVertex, IEnumerable(Of TEdge))
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort
  id: TopologicalSort
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: TopologicalSort()
  nameWithType: Multigraph<TVertex, TEdge>.TopologicalSort()
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.TopologicalSort()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: TopologicalSort
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<TVertex> TopologicalSort()
    content.vb: Public Overridable Function TopologicalSort As IReadOnlyList(Of TVertex)
    return:
      type: System.Collections.Generic.IReadOnlyList{{TVertex}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).TopologicalSort()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).TopologicalSort()
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean})
  id: TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean})
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: TopologicalSort(Func<TVertex, TVertex, IEnumerable<TEdge>, Boolean>)
  nameWithType: Multigraph<TVertex, TEdge>.TopologicalSort(Func<TVertex, TVertex, IEnumerable<TEdge>, Boolean>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.TopologicalSort(System.Func<TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: TopologicalSort
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 115
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<TVertex> TopologicalSort(Func<TVertex, TVertex, IEnumerable<TEdge>, bool> canBreakEdge)
    content.vb: Public Overridable Function TopologicalSort(canBreakEdge As Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean)) As IReadOnlyList(Of TVertex)
    parameters:
    - id: canBreakEdge
      type: System.Func{{TVertex},{TVertex},System.Collections.Generic.IEnumerable{{TEdge}},System.Boolean}
    return:
      type: System.Collections.Generic.IReadOnlyList{{TVertex}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).TopologicalSort(Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).TopologicalSort(System.Func(Of TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge), System.Boolean))
  name.vb: TopologicalSort(Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean))
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  id: TopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: TopologicalSort(Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>)
  nameWithType: Multigraph<TVertex, TEdge>.TopologicalSort(Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.TopologicalSort(System.Func<System.Collections.Generic.IEnumerable<System.Tuple<TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>>>, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: TopologicalSort
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 123
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<TVertex> TopologicalSort(Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, string> formatCycle)
    content.vb: Public Overridable Function TopologicalSort(formatCycle As Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of TVertex)
    parameters:
    - id: formatCycle
      type: System.Func{System.Collections.Generic.IEnumerable{System.Tuple{{TVertex},{TVertex},System.Collections.Generic.IEnumerable{{TEdge}}}},System.String}
    return:
      type: System.Collections.Generic.IReadOnlyList{{TVertex}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).TopologicalSort(Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).TopologicalSort(System.Func(Of System.Collections.Generic.IEnumerable(Of System.Tuple(Of TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge))), System.String))
  name.vb: TopologicalSort(Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String))
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  id: TopologicalSort(System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: TopologicalSort(Func<TVertex, TVertex, IEnumerable<TEdge>, Boolean>, Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>)
  nameWithType: Multigraph<TVertex, TEdge>.TopologicalSort(Func<TVertex, TVertex, IEnumerable<TEdge>, Boolean>, Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.TopologicalSort(System.Func<TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>, System.Boolean>, System.Func<System.Collections.Generic.IEnumerable<System.Tuple<TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>>>, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: TopologicalSort
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 131
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<TVertex> TopologicalSort(Func<TVertex, TVertex, IEnumerable<TEdge>, bool> canBreakEdge, Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, string> formatCycle)
    content.vb: Public Overridable Function TopologicalSort(canBreakEdge As Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean), formatCycle As Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of TVertex)
    parameters:
    - id: canBreakEdge
      type: System.Func{{TVertex},{TVertex},System.Collections.Generic.IEnumerable{{TEdge}},System.Boolean}
    - id: formatCycle
      type: System.Func{System.Collections.Generic.IEnumerable{System.Tuple{{TVertex},{TVertex},System.Collections.Generic.IEnumerable{{TEdge}}}},System.String}
    return:
      type: System.Collections.Generic.IReadOnlyList{{TVertex}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).TopologicalSort(Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean), Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).TopologicalSort(System.Func(Of TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge), System.Boolean), System.Func(Of System.Collections.Generic.IEnumerable(Of System.Tuple(Of TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge))), System.String))
  name.vb: TopologicalSort(Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean), Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String))
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort
  id: BatchingTopologicalSort
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: BatchingTopologicalSort()
  nameWithType: Multigraph<TVertex, TEdge>.BatchingTopologicalSort()
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.BatchingTopologicalSort()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BatchingTopologicalSort
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 271
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<List<TVertex>> BatchingTopologicalSort()
    content.vb: Public Overridable Function BatchingTopologicalSort As IReadOnlyList(Of List(Of TVertex))
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{{TVertex}}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).BatchingTopologicalSort()
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).BatchingTopologicalSort()
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.BatchingTopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  id: BatchingTopologicalSort(System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String})
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: BatchingTopologicalSort(Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>)
  nameWithType: Multigraph<TVertex, TEdge>.BatchingTopologicalSort(Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.BatchingTopologicalSort(System.Func<System.Collections.Generic.IEnumerable<System.Tuple<TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>>>, System.String>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: BatchingTopologicalSort
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 278
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IReadOnlyList<List<TVertex>> BatchingTopologicalSort(Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, string> formatCycle)
    content.vb: Public Overridable Function BatchingTopologicalSort(formatCycle As Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)) As IReadOnlyList(Of List(Of TVertex))
    parameters:
    - id: formatCycle
      type: System.Func{System.Collections.Generic.IEnumerable{System.Tuple{{TVertex},{TVertex},System.Collections.Generic.IEnumerable{{TEdge}}}},System.String}
    return:
      type: System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{{TVertex}}}
  nameWithType.vb: Multigraph(Of TVertex, TEdge).BatchingTopologicalSort(Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).BatchingTopologicalSort(System.Func(Of System.Collections.Generic.IEnumerable(Of System.Tuple(Of TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge))), System.String))
  name.vb: BatchingTopologicalSort(Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String))
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Vertices
  commentId: P:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Vertices
  id: Vertices
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: Vertices
  nameWithType: Multigraph<TVertex, TEdge>.Vertices
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.Vertices
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Vertices
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 423
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override IEnumerable<TVertex> Vertices { get; }
    content.vb: Public Overrides ReadOnly Property Vertices As IEnumerable(Of TVertex)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TVertex}}
  overridden: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.Vertices
  nameWithType.vb: Multigraph(Of TVertex, TEdge).Vertices
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).Vertices
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetOutgoingNeighbours(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetOutgoingNeighbours(`0)
  id: GetOutgoingNeighbours(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: GetOutgoingNeighbours(TVertex)
  nameWithType: Multigraph<TVertex, TEdge>.GetOutgoingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.GetOutgoingNeighbours(TVertex)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetOutgoingNeighbours
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 429
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override IEnumerable<TVertex> GetOutgoingNeighbours(TVertex from)
    content.vb: Public Overrides Function GetOutgoingNeighbours(from As TVertex) As IEnumerable(Of TVertex)
    parameters:
    - id: from
      type: '{TVertex}'
    return:
      type: System.Collections.Generic.IEnumerable{{TVertex}}
  overridden: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.GetOutgoingNeighbours({TVertex})
  nameWithType.vb: Multigraph(Of TVertex, TEdge).GetOutgoingNeighbours(TVertex)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).GetOutgoingNeighbours(TVertex)
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetIncomingNeighbours(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Multigraph`2.GetIncomingNeighbours(`0)
  id: GetIncomingNeighbours(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Multigraph`2
  langs:
  - csharp
  - vb
  name: GetIncomingNeighbours(TVertex)
  nameWithType: Multigraph<TVertex, TEdge>.GetIncomingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>.GetIncomingNeighbours(TVertex)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetIncomingNeighbours
    path: src/Microsoft.EntityFrameworkCore/Internal/Multigraph.cs
    startLine: 442
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public override IEnumerable<TVertex> GetIncomingNeighbours(TVertex to)
    content.vb: Public Overrides Function GetIncomingNeighbours(to As TVertex) As IEnumerable(Of TVertex)
    parameters:
    - id: to
      type: '{TVertex}'
    return:
      type: System.Collections.Generic.IEnumerable{{TVertex}}
  overridden: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.GetIncomingNeighbours({TVertex})
  nameWithType.vb: Multigraph(Of TVertex, TEdge).GetIncomingNeighbours(TVertex)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge).GetIncomingNeighbours(TVertex)
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}
  commentId: T:Microsoft.EntityFrameworkCore.Internal.Graph{`0}
  parent: Microsoft.EntityFrameworkCore.Internal
  definition: Microsoft.EntityFrameworkCore.Internal.Graph`1
  name: Graph<TVertex>
  nameWithType: Graph<TVertex>
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>
  nameWithType.vb: Graph(Of TVertex)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex)
  name.vb: Graph(Of TVertex)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1
    name: Graph
    nameWithType: Graph
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1
    name: Graph
    nameWithType: Graph
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{{TVertex}})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph{`0}.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  parent: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}
  definition: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  name: GetUnreachableVertices(IReadOnlyList<TVertex>)
  nameWithType: Graph<TVertex>.GetUnreachableVertices(IReadOnlyList<TVertex>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList<TVertex>)
  nameWithType.vb: Graph(Of TVertex).GetUnreachableVertices(IReadOnlyList(Of TVertex))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetUnreachableVertices(System.Collections.Generic.IReadOnlyList(Of TVertex))
  name.vb: GetUnreachableVertices(IReadOnlyList(Of TVertex))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
    name: GetUnreachableVertices
    nameWithType: Graph<TVertex>.GetUnreachableVertices
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetUnreachableVertices
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
    name: GetUnreachableVertices
    nameWithType: Graph(Of TVertex).GetUnreachableVertices
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetUnreachableVertices
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.Multigraph`2.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<Multigraph<TVertex, TEdge>, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<Multigraph<TVertex, TEdge>, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of Multigraph(Of TVertex, TEdge), TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge), TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of Multigraph(Of TVertex, TEdge), TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<Multigraph<TVertex, TEdge>, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<Multigraph<TVertex, TEdge>, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Internal.Multigraph<TVertex, TEdge>, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of Multigraph(Of TVertex, TEdge), TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of Multigraph(Of TVertex, TEdge), TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Internal.Multigraph(Of TVertex, TEdge), TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1
  commentId: T:Microsoft.EntityFrameworkCore.Internal.Graph`1
  isExternal: false
  name: Graph<TVertex>
  nameWithType: Graph<TVertex>
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>
  nameWithType.vb: Graph(Of TVertex)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex)
  name.vb: Graph(Of TVertex)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1
    name: Graph
    nameWithType: Graph
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1
    name: Graph
    nameWithType: Graph
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
  isExternal: true
  name: GetUnreachableVertices(IReadOnlyList<TVertex>)
  nameWithType: Graph<TVertex>.GetUnreachableVertices(IReadOnlyList<TVertex>)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList<TVertex>)
  nameWithType.vb: Graph(Of TVertex).GetUnreachableVertices(IReadOnlyList(Of TVertex))
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetUnreachableVertices(System.Collections.Generic.IReadOnlyList(Of TVertex))
  name.vb: GetUnreachableVertices(IReadOnlyList(Of TVertex))
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
    name: GetUnreachableVertices
    nameWithType: Graph<TVertex>.GetUnreachableVertices
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetUnreachableVertices
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetUnreachableVertices(System.Collections.Generic.IReadOnlyList{`0})
    name: GetUnreachableVertices
    nameWithType: Graph(Of TVertex).GetUnreachableVertices
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetUnreachableVertices
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: '{TVertex}'
  commentId: '!:TVertex'
  definition: TVertex
  name: TVertex
  nameWithType: TVertex
  fullName: TVertex
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TVertex
  isExternal: false
  name: TVertex
  nameWithType: TVertex
  fullName: TVertex
- uid: System.Collections.Generic.IEnumerable{{TEdge}}
  commentId: T:System.Collections.Generic.IEnumerable{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TEdge>
  nameWithType: IEnumerable<TEdge>
  fullName: System.Collections.Generic.IEnumerable<TEdge>
  nameWithType.vb: IEnumerable(Of TEdge)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TEdge)
  name.vb: IEnumerable(Of TEdge)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEdge
    nameWithType: TEdge
    fullName: TEdge
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEdge
    nameWithType: TEdge
    fullName: TEdge
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{TVertex}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TVertex>
  nameWithType: IEnumerable<TVertex>
  fullName: System.Collections.Generic.IEnumerable<TVertex>
  nameWithType.vb: IEnumerable(Of TVertex)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TVertex)
  name.vb: IEnumerable(Of TVertex)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TEdge}'
  commentId: '!:TEdge'
  definition: TEdge
  name: TEdge
  nameWithType: TEdge
  fullName: TEdge
- uid: TEdge
  commentId: '!:TEdge'
  isExternal: false
  name: TEdge
  nameWithType: TEdge
  fullName: TEdge
- uid: System.Collections.Generic.IReadOnlyList{{TVertex}}
  commentId: T:System.Collections.Generic.IReadOnlyList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<TVertex>
  nameWithType: IReadOnlyList<TVertex>
  fullName: System.Collections.Generic.IReadOnlyList<TVertex>
  nameWithType.vb: IReadOnlyList(Of TVertex)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of TVertex)
  name.vb: IReadOnlyList(Of TVertex)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TVertex},{TVertex},System.Collections.Generic.IEnumerable{{TEdge}},System.Boolean}
  commentId: T:System.Func{`0,`0,System.Collections.Generic.IEnumerable{`1},System.Boolean}
  parent: System
  definition: System.Func`4
  name: Func<TVertex, TVertex, IEnumerable<TEdge>, Boolean>
  nameWithType: Func<TVertex, TVertex, IEnumerable<TEdge>, Boolean>
  fullName: System.Func<TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>, System.Boolean>
  nameWithType.vb: Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean)
  fullname.vb: System.Func(Of TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge), System.Boolean)
  name.vb: Func(Of TVertex, TVertex, IEnumerable(Of TEdge), Boolean)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEdge
    nameWithType: TEdge
    fullName: TEdge
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEdge
    nameWithType: TEdge
    fullName: TEdge
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: true
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullname.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Collections.Generic.IEnumerable{System.Tuple{{TVertex},{TVertex},System.Collections.Generic.IEnumerable{{TEdge}}}},System.String}
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{System.Tuple{`0,`0,System.Collections.Generic.IEnumerable{`1}}},System.String}
  parent: System
  definition: System.Func`2
  name: Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>
  nameWithType: Func<IEnumerable<Tuple<TVertex, TVertex, IEnumerable<TEdge>>>, String>
  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Tuple<TVertex, TVertex, System.Collections.Generic.IEnumerable<TEdge>>>, System.String>
  nameWithType.vb: Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)
  fullname.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of System.Tuple(Of TVertex, TVertex, System.Collections.Generic.IEnumerable(Of TEdge))), System.String)
  name.vb: Func(Of IEnumerable(Of Tuple(Of TVertex, TVertex, IEnumerable(Of TEdge))), String)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEdge
    nameWithType: TEdge
    fullName: TEdge
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`3
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEdge
    nameWithType: TEdge
    fullName: TEdge
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{{TVertex}}}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.Collections.Generic.List{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<List<TVertex>>
  nameWithType: IReadOnlyList<List<TVertex>>
  fullName: System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<TVertex>>
  nameWithType.vb: IReadOnlyList(Of List(Of TVertex))
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of System.Collections.Generic.List(Of TVertex))
  name.vb: IReadOnlyList(Of List(Of TVertex))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.Vertices
  commentId: P:Microsoft.EntityFrameworkCore.Internal.Graph{`0}.Vertices
  parent: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}
  definition: Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices
  name: Vertices
  nameWithType: Graph<TVertex>.Vertices
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.Vertices
  nameWithType.vb: Graph(Of TVertex).Vertices
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).Vertices
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices
  commentId: P:Microsoft.EntityFrameworkCore.Internal.Graph`1.Vertices
  isExternal: false
  name: Vertices
  nameWithType: Graph<TVertex>.Vertices
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.Vertices
  nameWithType.vb: Graph(Of TVertex).Vertices
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).Vertices
- uid: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.GetOutgoingNeighbours({TVertex})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph{`0}.GetOutgoingNeighbours(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}
  definition: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
  name: GetOutgoingNeighbours(TVertex)
  nameWithType: Graph<TVertex>.GetOutgoingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetOutgoingNeighbours(TVertex)
  nameWithType.vb: Graph(Of TVertex).GetOutgoingNeighbours(TVertex)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetOutgoingNeighbours(TVertex)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
    name: GetOutgoingNeighbours
    nameWithType: Graph<TVertex>.GetOutgoingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetOutgoingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
    name: GetOutgoingNeighbours
    nameWithType: Graph(Of TVertex).GetOutgoingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetOutgoingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
  isExternal: false
  name: GetOutgoingNeighbours(TVertex)
  nameWithType: Graph<TVertex>.GetOutgoingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetOutgoingNeighbours(TVertex)
  nameWithType.vb: Graph(Of TVertex).GetOutgoingNeighbours(TVertex)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetOutgoingNeighbours(TVertex)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
    name: GetOutgoingNeighbours
    nameWithType: Graph<TVertex>.GetOutgoingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetOutgoingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetOutgoingNeighbours(`0)
    name: GetOutgoingNeighbours
    nameWithType: Graph(Of TVertex).GetOutgoingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetOutgoingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}.GetIncomingNeighbours({TVertex})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph{`0}.GetIncomingNeighbours(`0)
  parent: Microsoft.EntityFrameworkCore.Internal.Graph{{TVertex}}
  definition: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
  name: GetIncomingNeighbours(TVertex)
  nameWithType: Graph<TVertex>.GetIncomingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetIncomingNeighbours(TVertex)
  nameWithType.vb: Graph(Of TVertex).GetIncomingNeighbours(TVertex)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetIncomingNeighbours(TVertex)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
    name: GetIncomingNeighbours
    nameWithType: Graph<TVertex>.GetIncomingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetIncomingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
    name: GetIncomingNeighbours
    nameWithType: Graph(Of TVertex).GetIncomingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetIncomingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
  isExternal: false
  name: GetIncomingNeighbours(TVertex)
  nameWithType: Graph<TVertex>.GetIncomingNeighbours(TVertex)
  fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetIncomingNeighbours(TVertex)
  nameWithType.vb: Graph(Of TVertex).GetIncomingNeighbours(TVertex)
  fullname.vb: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetIncomingNeighbours(TVertex)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
    name: GetIncomingNeighbours
    nameWithType: Graph<TVertex>.GetIncomingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph<TVertex>.GetIncomingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.Graph`1.GetIncomingNeighbours(`0)
    name: GetIncomingNeighbours
    nameWithType: Graph(Of TVertex).GetIncomingNeighbours
    fullName: Microsoft.EntityFrameworkCore.Internal.Graph(Of TVertex).GetIncomingNeighbours
  - name: (
    nameWithType: (
    fullName: (
  - name: TVertex
    nameWithType: TVertex
    fullName: TVertex
  - name: )
    nameWithType: )
    fullName: )
