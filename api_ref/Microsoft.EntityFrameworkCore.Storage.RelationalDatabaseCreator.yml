### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  id: RelationalDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices(System.IServiceProvider)
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor
  - Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model
  langs:
  - csharp
  - vb
  name: RelationalDatabaseCreator
  nameWithType: RelationalDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationalDatabaseCreator
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Performs database/schema creation, and other related operations.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: 'public abstract class RelationalDatabaseCreator : IRelationalDatabaseCreator, IDatabaseCreator, IServiceInjectionSite'
    content.vb: >-
      Public MustInherit Class RelationalDatabaseCreator
          Implements IRelationalDatabaseCreator, IDatabaseCreator, IServiceInjectionSite
  inheritance:
  - System.Object
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  - Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor)
  id: '#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor)'
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: RelationalDatabaseCreator(IModel, IRelationalConnection, IMigrationsModelDiffer, IMigrationsSqlGenerator, IMigrationCommandExecutor)
  nameWithType: RelationalDatabaseCreator.RelationalDatabaseCreator(IModel, IRelationalConnection, IMigrationsModelDiffer, IMigrationsSqlGenerator, IMigrationCommandExecutor)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.RelationalDatabaseCreator(Microsoft.EntityFrameworkCore.Metadata.IModel, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer, Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator, Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Derived classes must be updated to call the new constructor with additional parameters.")]

      protected RelationalDatabaseCreator(IModel model, IRelationalConnection connection, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IMigrationCommandExecutor migrationCommandExecutor)
    content.vb: >-
      <Obsolete("Derived classes must be updated to call the new constructor with additional parameters.")>

      Protected Sub New(model As IModel, connection As IRelationalConnection, modelDiffer As IMigrationsModelDiffer, migrationsSqlGenerator As IMigrationsSqlGenerator, migrationCommandExecutor As IMigrationCommandExecutor)
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Metadata.IModel" data-throw-if-not-resolved="false"></xref> for the context this creator is being used with. '
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: modelDiffer
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: migrationsSqlGenerator
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: migrationCommandExecutor
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" data-throw-if-not-resolved="false"></xref> to be used. '
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Derived classes must be updated to call the new constructor with additional parameters.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory)
  id: '#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory)'
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: RelationalDatabaseCreator(IModel, IRelationalConnection, IMigrationsModelDiffer, IMigrationsSqlGenerator, IMigrationCommandExecutor, IExecutionStrategyFactory)
  nameWithType: RelationalDatabaseCreator.RelationalDatabaseCreator(IModel, IRelationalConnection, IMigrationsModelDiffer, IMigrationsSqlGenerator, IMigrationCommandExecutor, IExecutionStrategyFactory)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.RelationalDatabaseCreator(Microsoft.EntityFrameworkCore.Metadata.IModel, Microsoft.EntityFrameworkCore.Storage.IRelationalConnection, Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer, Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator, Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor, Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected RelationalDatabaseCreator(IModel model, IRelationalConnection connection, IMigrationsModelDiffer modelDiffer, IMigrationsSqlGenerator migrationsSqlGenerator, IMigrationCommandExecutor migrationCommandExecutor, IExecutionStrategyFactory executionStrategyFactory)
    content.vb: Protected Sub New(model As IModel, connection As IRelationalConnection, modelDiffer As IMigrationsModelDiffer, migrationsSqlGenerator As IMigrationsSqlGenerator, migrationCommandExecutor As IMigrationCommandExecutor, executionStrategyFactory As IExecutionStrategyFactory)
    parameters:
    - id: model
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Metadata.IModel" data-throw-if-not-resolved="false"></xref> for the context this creator is being used with. '
    - id: connection
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: modelDiffer
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: migrationsSqlGenerator
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: migrationCommandExecutor
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" data-throw-if-not-resolved="false"></xref> to be used. '
    - id: executionStrategyFactory
      type: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" data-throw-if-not-resolved="false"></xref> to be used. '
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model
  id: Model
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Model
  nameWithType: RelationalDatabaseCreator.Model
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Model
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 94
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the model for the context this creator is being used with.\n"
  example: []
  syntax:
    content: protected virtual IModel Model { get; }
    content.vb: Protected Overridable ReadOnly Property Model As IModel
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.IModel
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection
  id: Connection
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Connection
  nameWithType: RelationalDatabaseCreator.Connection
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Connection
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 99
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the connection for the database.\n"
  example: []
  syntax:
    content: protected virtual IRelationalConnection Connection { get; }
    content.vb: Protected Overridable ReadOnly Property Connection As IRelationalConnection
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor
  id: MigrationCommandExecutor
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: MigrationCommandExecutor
  nameWithType: RelationalDatabaseCreator.MigrationCommandExecutor
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MigrationCommandExecutor
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 104
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the <xref href=\"Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor\" data-throw-if-not-resolved=\"false\"></xref> to be used.\n"
  example: []
  syntax:
    content: protected virtual IMigrationCommandExecutor MigrationCommandExecutor { get; }
    content.vb: Protected Overridable ReadOnly Property MigrationCommandExecutor As IMigrationCommandExecutor
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory
  commentId: P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory
  id: ExecutionStrategyFactory
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: ExecutionStrategyFactory
  nameWithType: RelationalDatabaseCreator.ExecutionStrategyFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecutionStrategyFactory
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 109
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the <xref href=\"Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory\" data-throw-if-not-resolved=\"false\"></xref> to be used.\n"
  example: []
  syntax:
    content: protected virtual IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    content.vb: Protected Overridable ReadOnly Property ExecutionStrategyFactory As IExecutionStrategyFactory
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory*
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices(System.IServiceProvider)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices(System.IServiceProvider)
  id: Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices(System.IServiceProvider)
  isEii: true
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: IServiceInjectionSite.InjectServices(IServiceProvider)
  nameWithType: RelationalDatabaseCreator.IServiceInjectionSite.InjectServices(IServiceProvider)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 115
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: void IServiceInjectionSite.InjectServices(IServiceProvider serviceProvider)
    content.vb: Sub Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(serviceProvider As IServiceProvider) Implements IServiceInjectionSite.InjectServices
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices*
  implements:
  - Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)
  nameWithType.vb: RelationalDatabaseCreator.Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(IServiceProvider)
  name.vb: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(IServiceProvider)
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists
  id: Exists
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Exists()
  nameWithType: RelationalDatabaseCreator.Exists()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Exists
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 125
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nDetermines whether the physical database exists. No attempt is made to determine if the database\ncontains the schema for the current model.\n"
  example: []
  syntax:
    content: public abstract bool Exists()
    content.vb: Public MustOverride Function Exists As Boolean
    return:
      type: System.Boolean
      description: "\nTrue if the database exists; otherwise false.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  id: ExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: ExistsAsync(CancellationToken)
  nameWithType: RelationalDatabaseCreator.ExistsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExistsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 138
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nAsynchronously determines whether the physical database exists. No attempt is made to determine if\nthe database contains the schema for the current model.\n"
  example: []
  syntax:
    content: public virtual Task<bool> ExistsAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function ExistsAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nA <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the task to complete.\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous operation. The task result contains\ntrue if the database exists; otherwise false.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create
  id: Create
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: RelationalDatabaseCreator.Create()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Create
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 148
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nCreates the physical database. Does not attempt to populate it with any schema.\n"
  example: []
  syntax:
    content: public abstract void Create()
    content.vb: Public MustOverride Sub Create
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  id: CreateAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: CreateAsync(CancellationToken)
  nameWithType: RelationalDatabaseCreator.CreateAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 157
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nAsynchronously creates the physical database. Does not attempt to populate it with any schema.\n"
  example: []
  syntax:
    content: public virtual Task CreateAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function CreateAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete
  id: Delete
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: RelationalDatabaseCreator.Delete()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Delete
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 169
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nDeletes the physical database.\n"
  example: []
  syntax:
    content: public abstract void Delete()
    content.vb: Public MustOverride Sub Delete
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  id: DeleteAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: DeleteAsync(CancellationToken)
  nameWithType: RelationalDatabaseCreator.DeleteAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DeleteAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 178
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nAsynchronously deletes the physical database.\n"
  example: []
  syntax:
    content: public virtual Task DeleteAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function DeleteAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables
  id: CreateTables
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: CreateTables()
  nameWithType: RelationalDatabaseCreator.CreateTables()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTables
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 191
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nCreates all tables for the current model in the database. No attempt is made\nto incrementally update the schema. It is assumed that none of the tables exist in the database.\n"
  example: []
  syntax:
    content: public virtual void CreateTables()
    content.vb: Public Overridable Sub CreateTables
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  id: CreateTablesAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: CreateTablesAsync(CancellationToken)
  nameWithType: RelationalDatabaseCreator.CreateTablesAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CreateTablesAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 202
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nAsynchronously creates all tables for the current model in the database. No attempt is made\nto incrementally update the schema. It is assumed that none of the tables exist in the database.\n"
  example: []
  syntax:
    content: public virtual Task CreateTablesAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function CreateTablesAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous operation.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands
  id: GetCreateTablesCommands
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: GetCreateTablesCommands()
  nameWithType: RelationalDatabaseCreator.GetCreateTablesCommands()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCreateTablesCommands
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 209
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nGets the commands that will create all tables from the model.\n"
  example: []
  syntax:
    content: protected virtual IReadOnlyList<MigrationCommand> GetCreateTablesCommands()
    content.vb: Protected Overridable Function GetCreateTablesCommands As IReadOnlyList(Of MigrationCommand)
    return:
      type: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.MigrationCommand}
      description: 'The generated commands. '
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables
  id: HasTables
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: HasTables()
  nameWithType: RelationalDatabaseCreator.HasTables()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTables
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 217
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nDetermines whether the database contains any tables. No attempt is made to determine if\ntables belong to the current model or not.\n"
  example: []
  syntax:
    content: protected abstract bool HasTables()
    content.vb: Protected MustOverride Function HasTables As Boolean
    return:
      type: System.Boolean
      description: 'A value indicating whether any tables are present in the database. '
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)
  id: HasTablesAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: HasTablesAsync(CancellationToken)
  nameWithType: RelationalDatabaseCreator.HasTablesAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: HasTablesAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 228
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nAsynchronously determines whether the database contains any tables. No attempt is made to determine if\ntables belong to the current model or not.\n"
  example: []
  syntax:
    content: protected virtual Task<bool> HasTablesAsync(CancellationToken cancellationToken = null)
    content.vb: Protected Overridable Function HasTablesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous operation. The task result contains\na value indicating whether any tables are present in the database.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted
  id: EnsureDeleted
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureDeleted()
  nameWithType: RelationalDatabaseCreator.EnsureDeleted()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureDeleted
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 248
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does\n    exist then the database is deleted.\n</p>\n<p>\n    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by\n    the model for this context.\n</p>\n"
  example: []
  syntax:
    content: public virtual bool EnsureDeleted()
    content.vb: Public Overridable Function EnsureDeleted As Boolean
    return:
      type: System.Boolean
      description: "\nTrue if the database is deleted, false if it did not exist.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  id: EnsureDeletedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureDeletedAsync(CancellationToken)
  nameWithType: RelationalDatabaseCreator.EnsureDeletedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureDeletedAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 273
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n<p>\n    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does\n    exist then the database is deleted.\n</p>\n<p>\n    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by\n    the model for this context.\n</p>\n"
  example: []
  syntax:
    content: public virtual Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function EnsureDeletedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous save operation. The task result contains true if the database is deleted,\nfalse if it did not exist.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated
  id: EnsureCreated
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureCreated()
  nameWithType: RelationalDatabaseCreator.EnsureCreated()
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureCreated
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 292
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nEnsures that the database for the context exists. If it exists, no action is taken. If it does not\nexist then the database and all its schema are created. If the database exists, then no effort is made\nto ensure it is compatible with the model for this context.\n"
  example: []
  syntax:
    content: public virtual bool EnsureCreated()
    content.vb: Public Overridable Function EnsureCreated As Boolean
    return:
      type: System.Boolean
      description: "\nTrue if the database is created, false if it already existed.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  id: EnsureCreatedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  langs:
  - csharp
  - vb
  name: EnsureCreatedAsync(CancellationToken)
  nameWithType: RelationalDatabaseCreator.EnsureCreatedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EnsureCreatedAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/Storage/RelationalDatabaseCreator.cs
    startLine: 320
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\nAsynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not\nexist then the database and all its schema are created. If the database exists, then no effort is made\nto ensure it is compatible with the model for this context.\n"
  example: []
  syntax:
    content: public virtual Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = null)
    content.vb: Public Overridable Function EnsureCreatedAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous save operation. The task result contains true if the database is created,\nfalse if it already existed.\n"
  overload: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync*
  implements:
  - Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalDatabaseCreator
  nameWithType: IRelationalDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDatabaseCreator
  nameWithType: IDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
- uid: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite
  commentId: T:Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite
  parent: Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: IServiceInjectionSite
  nameWithType: IServiceInjectionSite
  fullName: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  commentId: T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: RelationalDatabaseCreator
  nameWithType: RelationalDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator
- uid: Microsoft.EntityFrameworkCore.Metadata.IModel
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.IModel
  parent: Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: IModel
  nameWithType: IModel
  fullName: Microsoft.EntityFrameworkCore.Metadata.IModel
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IRelationalConnection
  nameWithType: IRelationalConnection
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalConnection
- uid: Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: IMigrationsModelDiffer
  nameWithType: IMigrationsModelDiffer
  fullName: Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer
- uid: Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: IMigrationsSqlGenerator
  nameWithType: IMigrationsSqlGenerator
  fullName: Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator
- uid: Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor
  commentId: T:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor
  parent: Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: IMigrationCommandExecutor
  nameWithType: IMigrationCommandExecutor
  fullName: Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor
  isExternal: false
  name: RelationalDatabaseCreator
  nameWithType: RelationalDatabaseCreator.RelationalDatabaseCreator
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.RelationalDatabaseCreator
- uid: Microsoft.EntityFrameworkCore.Metadata
  commentId: N:Microsoft.EntityFrameworkCore.Metadata
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata
  nameWithType: Microsoft.EntityFrameworkCore.Metadata
  fullName: Microsoft.EntityFrameworkCore.Metadata
- uid: Microsoft.EntityFrameworkCore.Migrations
  commentId: N:Microsoft.EntityFrameworkCore.Migrations
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Migrations
  nameWithType: Microsoft.EntityFrameworkCore.Migrations
  fullName: Microsoft.EntityFrameworkCore.Migrations
- uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IExecutionStrategyFactory
  nameWithType: IExecutionStrategyFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model
  isExternal: false
  name: Model
  nameWithType: RelationalDatabaseCreator.Model
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Model
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection
  isExternal: false
  name: Connection
  nameWithType: RelationalDatabaseCreator.Connection
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Connection
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor
  isExternal: false
  name: MigrationCommandExecutor
  nameWithType: RelationalDatabaseCreator.MigrationCommandExecutor
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.MigrationCommandExecutor
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory
  isExternal: false
  name: ExecutionStrategyFactory
  nameWithType: RelationalDatabaseCreator.ExecutionStrategyFactory
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExecutionStrategyFactory
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft#EntityFrameworkCore#Internal#IServiceInjectionSite#InjectServices
  isExternal: false
  name: IServiceInjectionSite.InjectServices
  nameWithType: RelationalDatabaseCreator.IServiceInjectionSite.InjectServices
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices
  nameWithType.vb: RelationalDatabaseCreator.Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices
  name.vb: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices
- uid: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)
  parent: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite
  isExternal: true
  name: InjectServices(IServiceProvider)
  nameWithType: IServiceInjectionSite.InjectServices(IServiceProvider)
  fullName: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)
    name: InjectServices
    nameWithType: IServiceInjectionSite.InjectServices
    fullName: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices(System.IServiceProvider)
    name: InjectServices
    nameWithType: IServiceInjectionSite.InjectServices
    fullName: Microsoft.EntityFrameworkCore.Internal.IServiceInjectionSite.InjectServices
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists
  isExternal: false
  name: Exists
  nameWithType: RelationalDatabaseCreator.Exists
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: false
  name: Exists()
  nameWithType: IRelationalDatabaseCreator.Exists()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
    name: Exists
    nameWithType: IRelationalDatabaseCreator.Exists
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
    name: Exists
    nameWithType: IRelationalDatabaseCreator.Exists
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync
  isExternal: false
  name: ExistsAsync
  nameWithType: RelationalDatabaseCreator.ExistsAsync
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: true
  name: ExistsAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.ExistsAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
    name: ExistsAsync
    nameWithType: IRelationalDatabaseCreator.ExistsAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)
    name: ExistsAsync
    nameWithType: IRelationalDatabaseCreator.ExistsAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create
  isExternal: false
  name: Create
  nameWithType: RelationalDatabaseCreator.Create
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: false
  name: Create()
  nameWithType: IRelationalDatabaseCreator.Create()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
    name: Create
    nameWithType: IRelationalDatabaseCreator.Create
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
    name: Create
    nameWithType: IRelationalDatabaseCreator.Create
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync
  isExternal: false
  name: CreateAsync
  nameWithType: RelationalDatabaseCreator.CreateAsync
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: true
  name: CreateAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.CreateAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRelationalDatabaseCreator.CreateAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)
    name: CreateAsync
    nameWithType: IRelationalDatabaseCreator.CreateAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete
  isExternal: false
  name: Delete
  nameWithType: RelationalDatabaseCreator.Delete
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: false
  name: Delete()
  nameWithType: IRelationalDatabaseCreator.Delete()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
    name: Delete
    nameWithType: IRelationalDatabaseCreator.Delete
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
    name: Delete
    nameWithType: IRelationalDatabaseCreator.Delete
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync
  isExternal: false
  name: DeleteAsync
  nameWithType: RelationalDatabaseCreator.DeleteAsync
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: true
  name: DeleteAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.DeleteAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRelationalDatabaseCreator.DeleteAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)
    name: DeleteAsync
    nameWithType: IRelationalDatabaseCreator.DeleteAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables
  isExternal: false
  name: CreateTables
  nameWithType: RelationalDatabaseCreator.CreateTables
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: false
  name: CreateTables()
  nameWithType: IRelationalDatabaseCreator.CreateTables()
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
    name: CreateTables
    nameWithType: IRelationalDatabaseCreator.CreateTables
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
    name: CreateTables
    nameWithType: IRelationalDatabaseCreator.CreateTables
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync
  isExternal: false
  name: CreateTablesAsync
  nameWithType: RelationalDatabaseCreator.CreateTablesAsync
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync
- uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator
  isExternal: true
  name: CreateTablesAsync(CancellationToken)
  nameWithType: IRelationalDatabaseCreator.CreateTablesAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
    name: CreateTablesAsync
    nameWithType: IRelationalDatabaseCreator.CreateTablesAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)
    name: CreateTablesAsync
    nameWithType: IRelationalDatabaseCreator.CreateTablesAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands
  isExternal: false
  name: GetCreateTablesCommands
  nameWithType: RelationalDatabaseCreator.GetCreateTablesCommands
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands
- uid: System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.MigrationCommand}
  commentId: T:System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.MigrationCommand}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<MigrationCommand>
  nameWithType: IReadOnlyList<MigrationCommand>
  fullName: System.Collections.Generic.IReadOnlyList<Microsoft.EntityFrameworkCore.Migrations.MigrationCommand>
  nameWithType.vb: IReadOnlyList(Of MigrationCommand)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of Microsoft.EntityFrameworkCore.Migrations.MigrationCommand)
  name.vb: IReadOnlyList(Of MigrationCommand)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Migrations.MigrationCommand
    name: MigrationCommand
    nameWithType: MigrationCommand
    fullName: Microsoft.EntityFrameworkCore.Migrations.MigrationCommand
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Migrations.MigrationCommand
    name: MigrationCommand
    nameWithType: MigrationCommand
    fullName: Microsoft.EntityFrameworkCore.Migrations.MigrationCommand
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables
  isExternal: false
  name: HasTables
  nameWithType: RelationalDatabaseCreator.HasTables
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync
  isExternal: false
  name: HasTablesAsync
  nameWithType: RelationalDatabaseCreator.HasTablesAsync
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted
  isExternal: false
  name: EnsureDeleted
  nameWithType: RelationalDatabaseCreator.EnsureDeleted
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: false
  name: EnsureDeleted()
  nameWithType: IDatabaseCreator.EnsureDeleted()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
    name: EnsureDeleted
    nameWithType: IDatabaseCreator.EnsureDeleted
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
    name: EnsureDeleted
    nameWithType: IDatabaseCreator.EnsureDeleted
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeleted
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync
  isExternal: false
  name: EnsureDeletedAsync
  nameWithType: RelationalDatabaseCreator.EnsureDeletedAsync
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: true
  name: EnsureDeletedAsync(CancellationToken)
  nameWithType: IDatabaseCreator.EnsureDeletedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
    name: EnsureDeletedAsync
    nameWithType: IDatabaseCreator.EnsureDeletedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)
    name: EnsureDeletedAsync
    nameWithType: IDatabaseCreator.EnsureDeletedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureDeletedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated
  isExternal: false
  name: EnsureCreated
  nameWithType: RelationalDatabaseCreator.EnsureCreated
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: false
  name: EnsureCreated()
  nameWithType: IDatabaseCreator.EnsureCreated()
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated()
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
    name: EnsureCreated
    nameWithType: IDatabaseCreator.EnsureCreated
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
    name: EnsureCreated
    nameWithType: IDatabaseCreator.EnsureCreated
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreated
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync
  isExternal: false
  name: EnsureCreatedAsync
  nameWithType: RelationalDatabaseCreator.EnsureCreatedAsync
  fullName: Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync
- uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator
  isExternal: true
  name: EnsureCreatedAsync(CancellationToken)
  nameWithType: IDatabaseCreator.EnsureCreatedAsync(CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
    name: EnsureCreatedAsync
    nameWithType: IDatabaseCreator.EnsureCreatedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)
    name: EnsureCreatedAsync
    nameWithType: IDatabaseCreator.EnsureCreatedAsync
    fullName: Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator.EnsureCreatedAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
