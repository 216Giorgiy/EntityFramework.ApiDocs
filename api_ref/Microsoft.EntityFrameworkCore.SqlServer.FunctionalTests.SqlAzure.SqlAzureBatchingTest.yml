### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest
  id: SqlAzureBatchingTest
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  children:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture,Xunit.Abstractions.ITestOutputHelper)
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.AddWithBatchSize(System.Int32)
  langs:
  - csharp
  - vb
  name: SqlAzureBatchingTest
  nameWithType: SqlAzureBatchingTest
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest
  type: Class
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/SqlAzureBatchingTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlAzureBatchingTest
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/SqlAzureBatchingTest.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  syntax:
    content: >-
      [SqlServerCondition(SqlServerCondition.IsSqlAzure)]

      public class SqlAzureBatchingTest : IClassFixture<BatchingSqlAzureFixture>
    content.vb: >-
      <SqlServerCondition(SqlServerCondition.IsSqlAzure)>

      Public Class SqlAzureBatchingTest
          Implements IClassFixture(Of BatchingSqlAzureFixture)
  inheritance:
  - System.Object
  implements:
  - Xunit.IClassFixture{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute
    ctor: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerConditionAttribute.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition)
    arguments:
    - type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.Utilities.SqlServerCondition
      value: 4
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture,Xunit.Abstractions.ITestOutputHelper)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture,Xunit.Abstractions.ITestOutputHelper)
  id: '#ctor(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture,Xunit.Abstractions.ITestOutputHelper)'
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest
  langs:
  - csharp
  - vb
  name: SqlAzureBatchingTest(BatchingSqlAzureFixture, ITestOutputHelper)
  nameWithType: SqlAzureBatchingTest.SqlAzureBatchingTest(BatchingSqlAzureFixture, ITestOutputHelper)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.SqlAzureBatchingTest(Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture, Xunit.Abstractions.ITestOutputHelper)
  type: Constructor
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/SqlAzureBatchingTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/SqlAzureBatchingTest.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  syntax:
    content: public SqlAzureBatchingTest(BatchingSqlAzureFixture fixture, ITestOutputHelper output)
    content.vb: Public Sub New(fixture As BatchingSqlAzureFixture, output As ITestOutputHelper)
    parameters:
    - id: fixture
      type: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
    - id: output
      type: Xunit.Abstractions.ITestOutputHelper
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.AddWithBatchSize(System.Int32)
  commentId: M:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.AddWithBatchSize(System.Int32)
  id: AddWithBatchSize(System.Int32)
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest
  langs:
  - csharp
  - vb
  name: AddWithBatchSize(Int32)
  nameWithType: SqlAzureBatchingTest.AddWithBatchSize(Int32)
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.SqlAzureBatchingTest.AddWithBatchSize(System.Int32)
  type: Method
  source:
    remote:
      path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/SqlAzureBatchingTest.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: AddWithBatchSize
    path: test/Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests/SqlAzure/SqlAzureBatchingTest.cs
    startLine: 22
  assemblies:
  - Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests
  namespace: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  syntax:
    content: >-
      [InlineData(new object[]{1})]

      [InlineData(new object[]{10})]

      [InlineData(new object[]{100})]

      [InlineData(new object[]{1000})]

      public void AddWithBatchSize(int batchSize)
    content.vb: >-
      <InlineData(New Object() {1})>

      <InlineData(New Object() {10})>

      <InlineData(New Object() {100})>

      <InlineData(New Object() {1000})>

      Public Sub AddWithBatchSize(batchSize As Integer)
    parameters:
    - id: batchSize
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  commentId: N:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  nameWithType: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Xunit.IClassFixture{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture}
  commentId: T:Xunit.IClassFixture{Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture}
  parent: Xunit
  definition: Xunit.IClassFixture`1
  name: IClassFixture<BatchingSqlAzureFixture>
  nameWithType: IClassFixture<BatchingSqlAzureFixture>
  fullName: Xunit.IClassFixture<Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture>
  nameWithType.vb: IClassFixture(Of BatchingSqlAzureFixture)
  fullname.vb: Xunit.IClassFixture(Of Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture)
  name.vb: IClassFixture(Of BatchingSqlAzureFixture)
  spec.csharp:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
    name: BatchingSqlAzureFixture
    nameWithType: BatchingSqlAzureFixture
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
    name: BatchingSqlAzureFixture
    nameWithType: BatchingSqlAzureFixture
    fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.IClassFixture`1
  commentId: T:Xunit.IClassFixture`1
  isExternal: true
  name: IClassFixture<TFixture>
  nameWithType: IClassFixture<TFixture>
  fullName: Xunit.IClassFixture<TFixture>
  nameWithType.vb: IClassFixture(Of TFixture)
  fullname.vb: Xunit.IClassFixture(Of TFixture)
  name.vb: IClassFixture(Of TFixture)
  spec.csharp:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFixture
    nameWithType: TFixture
    fullName: TFixture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFixture
    nameWithType: TFixture
    fullName: TFixture
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit
  commentId: N:Xunit
  isExternal: false
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
  commentId: T:Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
  parent: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure
  isExternal: false
  name: BatchingSqlAzureFixture
  nameWithType: BatchingSqlAzureFixture
  fullName: Microsoft.EntityFrameworkCore.SqlServer.FunctionalTests.SqlAzure.BatchingSqlAzureFixture
- uid: Xunit.Abstractions.ITestOutputHelper
  commentId: T:Xunit.Abstractions.ITestOutputHelper
  parent: Xunit.Abstractions
  isExternal: true
  name: ITestOutputHelper
  nameWithType: ITestOutputHelper
  fullName: Xunit.Abstractions.ITestOutputHelper
- uid: Xunit.Abstractions
  commentId: N:Xunit.Abstractions
  isExternal: false
  name: Xunit.Abstractions
  nameWithType: Xunit.Abstractions
  fullName: Xunit.Abstractions
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
