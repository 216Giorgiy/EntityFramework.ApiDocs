### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  commentId: T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  id: CodeWriter
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  children:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync(Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration,System.String,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: CodeWriter
  nameWithType: CodeWriter
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CodeWriter
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public abstract class CodeWriter
    content.vb: Public MustInherit Class CodeWriter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService)
  id: '#ctor(Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService)'
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  langs:
  - csharp
  - vb
  name: CodeWriter(IFileService)
  nameWithType: CodeWriter.CodeWriter(IFileService)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.CodeWriter(Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
    startLine: 27
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: protected CodeWriter(IFileService fileService)
    content.vb: Protected Sub New(fileService As IFileService)
    parameters:
    - id: fileService
      type: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService
  commentId: P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService
  id: FileService
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  langs:
  - csharp
  - vb
  name: FileService
  nameWithType: CodeWriter.FileService
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FileService
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IFileService FileService { get; }
    content.vb: Public Overridable ReadOnly Property FileService As IFileService
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension
  commentId: P:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension
  id: FileExtension
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  langs:
  - csharp
  - vb
  name: FileExtension
  nameWithType: CodeWriter.FileExtension
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FileExtension
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
    startLine: 44
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual string FileExtension { get; set; }
    content.vb: Public Overridable Property FileExtension As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  id: GetExistingFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  langs:
  - csharp
  - vb
  name: GetExistingFilePaths(String, String, IEnumerable<IEntityType>)
  nameWithType: CodeWriter.GetExistingFilePaths(String, String, IEnumerable<IEntityType>)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IEntityType>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetExistingFilePaths
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
    startLine: 50
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IList<string> GetExistingFilePaths(string outputPath, string dbContextClassName, IEnumerable<IEntityType> entityTypes)
    content.vb: Public Overridable Function GetExistingFilePaths(outputPath As String, dbContextClassName As String, entityTypes As IEnumerable(Of IEntityType)) As IList(Of String)
    parameters:
    - id: outputPath
      type: System.String
    - id: dbContextClassName
      type: System.String
    - id: entityTypes
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths*
  nameWithType.vb: CodeWriter.GetExistingFilePaths(String, String, IEnumerable(Of IEntityType))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IEntityType))
  name.vb: GetExistingFilePaths(String, String, IEnumerable(Of IEntityType))
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  id: GetReadOnlyFilePaths(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType})
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  langs:
  - csharp
  - vb
  name: GetReadOnlyFilePaths(String, String, IEnumerable<IEntityType>)
  nameWithType: CodeWriter.GetReadOnlyFilePaths(String, String, IEnumerable<IEntityType>)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths(System.String, System.String, System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IEntityType>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetReadOnlyFilePaths
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
    startLine: 88
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public virtual IList<string> GetReadOnlyFilePaths(string outputPath, string dbContextClassName, IEnumerable<IEntityType> entityTypes)
    content.vb: Public Overridable Function GetReadOnlyFilePaths(outputPath As String, dbContextClassName As String, entityTypes As IEnumerable(Of IEntityType)) As IList(Of String)
    parameters:
    - id: outputPath
      type: System.String
    - id: dbContextClassName
      type: System.String
    - id: entityTypes
      type: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths*
  nameWithType.vb: CodeWriter.GetReadOnlyFilePaths(String, String, IEnumerable(Of IEntityType))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths(System.String, System.String, System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IEntityType))
  name.vb: GetReadOnlyFilePaths(String, String, IEnumerable(Of IEntityType))
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync(Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync(Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration,System.String,System.String,System.Threading.CancellationToken)
  id: WriteCodeAsync(Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter
  langs:
  - csharp
  - vb
  name: WriteCodeAsync(ModelConfiguration, String, String, CancellationToken)
  nameWithType: CodeWriter.WriteCodeAsync(ModelConfiguration, String, String, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync(Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: WriteCodeAsync
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/CodeWriter.cs
    startLine: 115
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public abstract Task<ReverseEngineerFiles> WriteCodeAsync(ModelConfiguration modelConfiguration, string outputPath, string dbContextClassName, CancellationToken cancellationToken = null)
    content.vb: Public MustOverride Function WriteCodeAsync(modelConfiguration As ModelConfiguration, outputPath As String, dbContextClassName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ReverseEngineerFiles)
    parameters:
    - id: modelConfiguration
      type: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration
    - id: outputPath
      type: System.String
    - id: dbContextClassName
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles}
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Scaffolding.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.#ctor*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.#ctor
  isExternal: false
  name: CodeWriter
  nameWithType: CodeWriter.CodeWriter
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.CodeWriter
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  commentId: T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  isExternal: false
  name: IFileService
  nameWithType: IFileService
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService
  isExternal: false
  name: FileService
  nameWithType: CodeWriter.FileService
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileService
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension
  isExternal: false
  name: FileExtension
  nameWithType: CodeWriter.FileExtension
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.FileExtension
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths
  isExternal: false
  name: GetExistingFilePaths
  nameWithType: CodeWriter.GetExistingFilePaths
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetExistingFilePaths
- uid: System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IEntityType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IEntityType>
  nameWithType: IEnumerable<IEntityType>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.EntityFrameworkCore.Metadata.IEntityType>
  nameWithType.vb: IEnumerable(Of IEntityType)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.EntityFrameworkCore.Metadata.IEntityType)
  name.vb: IEnumerable(Of IEntityType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Metadata.IEntityType
    name: IEntityType
    nameWithType: IEntityType
    fullName: Microsoft.EntityFrameworkCore.Metadata.IEntityType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths
  isExternal: false
  name: GetReadOnlyFilePaths
  nameWithType: CodeWriter.GetReadOnlyFilePaths
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.GetReadOnlyFilePaths
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync
  isExternal: false
  name: WriteCodeAsync
  nameWithType: CodeWriter.WriteCodeAsync
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.CodeWriter.WriteCodeAsync
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration
  commentId: T:Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal
  isExternal: false
  name: ModelConfiguration
  nameWithType: ModelConfiguration
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal.ModelConfiguration
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ReverseEngineerFiles>
  nameWithType: Task<ReverseEngineerFiles>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles>
  nameWithType.vb: Task(Of ReverseEngineerFiles)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles)
  name.vb: Task(Of ReverseEngineerFiles)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles
    name: ReverseEngineerFiles
    nameWithType: ReverseEngineerFiles
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles
    name: ReverseEngineerFiles
    nameWithType: ReverseEngineerFiles
    fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.ReverseEngineerFiles
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Configuration.Internal
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
