### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer
  commentId: T:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer
  id: NonCapturingLazyInitializer
  parent: Microsoft.EntityFrameworkCore.Internal
  children:
  - Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``1(``0@,``0)
  - Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``2(``1@,``0,System.Func{``0,``1})
  langs:
  - csharp
  - vb
  name: NonCapturingLazyInitializer
  nameWithType: NonCapturingLazyInitializer
  fullName: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/NonCapturingLazyInitializer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: NonCapturingLazyInitializer
    path: src/Microsoft.EntityFrameworkCore/Internal/NonCapturingLazyInitializer.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public static class NonCapturingLazyInitializer
    content.vb: Public Module NonCapturingLazyInitializer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``2(``1@,``0,System.Func{``0,``1})
  commentId: M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``2(``1@,``0,System.Func{``0,``1})
  id: EnsureInitialized``2(``1@,``0,System.Func{``0,``1})
  parent: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer
  langs:
  - csharp
  - vb
  name: EnsureInitialized<TParam, TValue>(ref TValue, TParam, Func<TParam, TValue>)
  nameWithType: NonCapturingLazyInitializer.EnsureInitialized<TParam, TValue>(ref TValue, TParam, Func<TParam, TValue>)
  fullName: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized<TParam, TValue>(ref TValue, TParam, System.Func<TParam, TValue>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/NonCapturingLazyInitializer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureInitialized
    path: src/Microsoft.EntityFrameworkCore/Internal/NonCapturingLazyInitializer.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public static TValue EnsureInitialized<TParam, TValue>(ref TValue target, TParam param, Func<TParam, TValue> valueFactory)where TValue : class'
    content.vb: Public Shared Function EnsureInitialized(Of TParam, TValue As Class)(ByRef target As TValue, param As TParam, valueFactory As Func(Of TParam, TValue)) As TValue
    parameters:
    - id: target
      type: '{TValue}'
    - id: param
      type: '{TParam}'
    - id: valueFactory
      type: System.Func{{TParam},{TValue}}
    typeParameters:
    - id: TParam
    - id: TValue
    return:
      type: '{TValue}'
  nameWithType.vb: NonCapturingLazyInitializer.EnsureInitialized(Of TParam, TValue)(ByRef TValue, TParam, Func(Of TParam, TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized(Of TParam, TValue)(ByRef TValue, TParam, System.Func(Of TParam, TValue))
  name.vb: EnsureInitialized(Of TParam, TValue)(ByRef TValue, TParam, Func(Of TParam, TValue))
- uid: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``1(``0@,``0)
  commentId: M:Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized``1(``0@,``0)
  id: EnsureInitialized``1(``0@,``0)
  parent: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer
  langs:
  - csharp
  - vb
  name: EnsureInitialized<TValue>(ref TValue, TValue)
  nameWithType: NonCapturingLazyInitializer.EnsureInitialized<TValue>(ref TValue, TValue)
  fullName: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized<TValue>(ref TValue, TValue)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Internal/NonCapturingLazyInitializer.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: EnsureInitialized
    path: src/Microsoft.EntityFrameworkCore/Internal/NonCapturingLazyInitializer.cs
    startLine: 38
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: 'public static TValue EnsureInitialized<TValue>(ref TValue target, TValue value)where TValue : class'
    content.vb: Public Shared Function EnsureInitialized(Of TValue As Class)(ByRef target As TValue, value As TValue) As TValue
    parameters:
    - id: target
      type: '{TValue}'
    - id: value
      type: '{TValue}'
    typeParameters:
    - id: TValue
    return:
      type: '{TValue}'
  nameWithType.vb: NonCapturingLazyInitializer.EnsureInitialized(Of TValue)(ByRef TValue, TValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer.EnsureInitialized(Of TValue)(ByRef TValue, TValue)
  name.vb: EnsureInitialized(Of TValue)(ByRef TValue, TValue)
references:
- uid: Microsoft.EntityFrameworkCore.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Internal
  fullName: Microsoft.EntityFrameworkCore.Internal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: '{TParam}'
  commentId: '!:TParam'
  definition: TParam
  name: TParam
  nameWithType: TParam
  fullName: TParam
- uid: System.Func{{TParam},{TValue}}
  commentId: T:System.Func{``0,``1}
  parent: System
  definition: System.Func`2
  name: Func<TParam, TValue>
  nameWithType: Func<TParam, TValue>
  fullName: System.Func<TParam, TValue>
  nameWithType.vb: Func(Of TParam, TValue)
  fullname.vb: System.Func(Of TParam, TValue)
  name.vb: Func(Of TParam, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TParam
    nameWithType: TParam
    fullName: TParam
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TParam
    nameWithType: TParam
    fullName: TParam
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TParam
  commentId: '!:TParam'
  isExternal: false
  name: TParam
  nameWithType: TParam
  fullName: TParam
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
