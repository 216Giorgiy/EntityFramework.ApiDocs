### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  id: IClrCollectionAccessor
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  children:
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Add(System.Object,System.Object)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.AddRange(System.Object,System.Collections.Generic.IEnumerable{System.Object})
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.CollectionType
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Contains(System.Object,System.Object)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Create(System.Collections.Generic.IEnumerable{System.Object})
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.GetOrCreate(System.Object)
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Remove(System.Object,System.Object)
  langs:
  - csharp
  - vb
  name: IClrCollectionAccessor
  nameWithType: IClrCollectionAccessor
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: IClrCollectionAccessor
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 13
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public interface IClrCollectionAccessor
    content.vb: Public Interface IClrCollectionAccessor
  extensionMethods:
  - Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Add(System.Object,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  nameWithType: IClrCollectionAccessor.Add(Object, Object)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Add
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: bool Add(object instance, object value)
    content.vb: Function Add(instance As Object, value As Object) As Boolean
    parameters:
    - id: instance
      type: System.Object
    - id: value
      type: System.Object
    return:
      type: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.AddRange(System.Object,System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.AddRange(System.Object,System.Collections.Generic.IEnumerable{System.Object})
  id: AddRange(System.Object,System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  langs:
  - csharp
  - vb
  name: AddRange(Object, IEnumerable<Object>)
  nameWithType: IClrCollectionAccessor.AddRange(Object, IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.AddRange(System.Object, System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: AddRange
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 25
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: void AddRange(object instance, IEnumerable<object> values)
    content.vb: Sub AddRange(instance As Object, values As IEnumerable(Of Object))
    parameters:
    - id: instance
      type: System.Object
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Object}
  nameWithType.vb: IClrCollectionAccessor.AddRange(Object, IEnumerable(Of Object))
  fullName.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.AddRange(System.Object, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: AddRange(Object, IEnumerable(Of Object))
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Contains(System.Object,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Contains(System.Object,System.Object)
  id: Contains(System.Object,System.Object)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  langs:
  - csharp
  - vb
  name: Contains(Object, Object)
  nameWithType: IClrCollectionAccessor.Contains(Object, Object)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Contains(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Contains
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 31
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: bool Contains(object instance, object value)
    content.vb: Function Contains(instance As Object, value As Object) As Boolean
    parameters:
    - id: instance
      type: System.Object
    - id: value
      type: System.Object
    return:
      type: System.Boolean
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Remove(System.Object,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Remove(System.Object,System.Object)
  id: Remove(System.Object,System.Object)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  langs:
  - csharp
  - vb
  name: Remove(Object, Object)
  nameWithType: IClrCollectionAccessor.Remove(Object, Object)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Remove(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Remove
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 37
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: void Remove(object instance, object value)
    content.vb: Sub Remove(instance As Object, value As Object)
    parameters:
    - id: instance
      type: System.Object
    - id: value
      type: System.Object
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Create(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Create(System.Collections.Generic.IEnumerable{System.Object})
  id: Create(System.Collections.Generic.IEnumerable{System.Object})
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<Object>)
  nameWithType: IClrCollectionAccessor.Create(IEnumerable<Object>)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Create(System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: Create
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 43
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: object Create(IEnumerable<object> values)
    content.vb: Function Create(values As IEnumerable(Of Object)) As Object
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.Object}
    return:
      type: System.Object
  nameWithType.vb: IClrCollectionAccessor.Create(IEnumerable(Of Object))
  fullName.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Create(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: Create(IEnumerable(Of Object))
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.GetOrCreate(System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.GetOrCreate(System.Object)
  id: GetOrCreate(System.Object)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  langs:
  - csharp
  - vb
  name: GetOrCreate(Object)
  nameWithType: IClrCollectionAccessor.GetOrCreate(Object)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.GetOrCreate(System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: GetOrCreate
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: object GetOrCreate(object instance)
    content.vb: Function GetOrCreate(instance As Object) As Object
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.Object
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.CollectionType
  commentId: P:Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.CollectionType
  id: CollectionType
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor
  langs:
  - csharp
  - vb
  name: CollectionType
  nameWithType: IClrCollectionAccessor.CollectionType
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.CollectionType
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework
    id: CollectionType
    path: src/Microsoft.EntityFrameworkCore/Metadata/Internal/IClrCollectionAccessor.cs
    startLine: 55
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Metadata.Internal
  summary: "\n    This API supports the Entity Framework Core infrastructure and is not intended to be used \n    directly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: Type CollectionType { get; }
    content.vb: ReadOnly Property CollectionType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Internal
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor.Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  definition: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  name: AsConcreteMetadataType<IClrCollectionAccessor, TConcrete>(String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<IClrCollectionAccessor, TConcrete>(String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor, TConcrete>(System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of IClrCollectionAccessor, TConcrete)(String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor, TConcrete)(System.String)
  name.vb: AsConcreteMetadataType(Of IClrCollectionAccessor, TConcrete)(String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType<IClrCollectionAccessor, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<IClrCollectionAccessor, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(System.String)
    name: AsConcreteMetadataType(Of IClrCollectionAccessor, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of IClrCollectionAccessor, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of Microsoft.EntityFrameworkCore.Metadata.Internal.IClrCollectionAccessor, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
  isExternal: true
  name: AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, String)
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>(TInterface, System.String)
  nameWithType.vb: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, System.String)
  name.vb: AsConcreteMetadataType(Of TInterface, TConcrete)(TInterface, String)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType<TInterface, TConcrete>
    nameWithType: MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType<TInterface, TConcrete>
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType``2(``0,System.String)
    name: AsConcreteMetadataType(Of TInterface, TConcrete)
    nameWithType: MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
    fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions.AsConcreteMetadataType(Of TInterface, TConcrete)
  - name: (
    nameWithType: (
    fullName: (
  - name: TInterface
    nameWithType: TInterface
    fullName: TInterface
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
  parent: Microsoft.EntityFrameworkCore.Metadata.Internal
  isExternal: false
  name: MetadataExtensions
  nameWithType: MetadataExtensions
  fullName: Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
