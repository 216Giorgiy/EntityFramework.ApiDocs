### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  commentId: T:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  id: RelationalDatabaseFacadeExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Threading.CancellationToken,System.Object[])
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Nullable{System.Int32})
  - Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction)
  langs:
  - csharp
  - vb
  name: RelationalDatabaseFacadeExtensions
  nameWithType: RelationalDatabaseFacadeExtensions
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RelationalDatabaseFacadeExtensions
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 20
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static class RelationalDatabaseFacadeExtensions
    content.vb: Public Module RelationalDatabaseFacadeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: Migrate(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.Migrate(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Migrate
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 33
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Applies any pending migrations for the context to the database. Will create the database\n    if it does not already exist.\n</p>\n<p>\n   Note that this API is mutually exclusive with DbContext.Database.EnsureCreated(). EnsureCreated does not use migrations\n   to create the database and therefore the database that is created cannot be later updated using migrations.\n</p>\n"
  example: []
  syntax:
    content: public static void Migrate(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Migrate(databaseFacade As DatabaseFacade)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" data-throw-if-not-resolved="false"></xref> for the context. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: GetMigrations(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.GetMigrations(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetMigrations
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets all the migrations that are defined in the configured migrations assembly.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetMigrations(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMigrations(databaseFacade As DatabaseFacade) As IEnumerable(Of String)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
      description: The <xref href="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" data-throw-if-not-resolved="false"></xref> for the context.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The list of migrations.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: GetAppliedMigrations(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.GetAppliedMigrations(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAppliedMigrations
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets all migrations that have been applied to the target database.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetAppliedMigrations(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAppliedMigrations(databaseFacade As DatabaseFacade) As IEnumerable(Of String)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
      description: The <xref href="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" data-throw-if-not-resolved="false"></xref> for the context.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: 'The list of migrations. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  id: GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: GetAppliedMigrationsAsync(DatabaseFacade, CancellationToken)
  nameWithType: RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(DatabaseFacade, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetAppliedMigrationsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 59
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Asynchronously gets all migrations that have been applied to the target database.\n"
  example: []
  syntax:
    content: public static Task<IEnumerable<string>> GetAppliedMigrationsAsync(this DatabaseFacade databaseFacade, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetAppliedMigrationsAsync(databaseFacade As DatabaseFacade, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of String))
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
      description: The <xref href="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" data-throw-if-not-resolved="false"></xref> for the context.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete. '
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
      description: 'A task that represents the asynchronous operation. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: GetPendingMigrations(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.GetPendingMigrations(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPendingMigrations
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 70
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Gets all migrations that are defined in the assembly but haven't been applied to the target database.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetPendingMigrations(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPendingMigrations(databaseFacade As DatabaseFacade) As IEnumerable(Of String)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
      description: The <xref href="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" data-throw-if-not-resolved="false"></xref> for the context.
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: 'The list of migrations. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  id: GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: GetPendingMigrationsAsync(DatabaseFacade, CancellationToken)
  nameWithType: RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(DatabaseFacade, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetPendingMigrationsAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 79
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Asynchronously gets all migrations that are defined in the assembly but haven't been applied to the target database.\n"
  example: []
  syntax:
    content: public static Task<IEnumerable<string>> GetPendingMigrationsAsync(this DatabaseFacade databaseFacade, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPendingMigrationsAsync(databaseFacade As DatabaseFacade, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of String))
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
      description: The <xref href="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" data-throw-if-not-resolved="false"></xref> for the context.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete. '
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
      description: 'A task that represents the asynchronous operation. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  id: MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: MigrateAsync(DatabaseFacade, CancellationToken)
  nameWithType: RelationalDatabaseFacadeExtensions.MigrateAsync(DatabaseFacade, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: MigrateAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 97
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n<p>\n    Asynchronously applies any pending migrations for the context to the database. Will create the database\n    if it does not already exist.\n</p>\n<p>\n   Note that this API is mutually exclusive with DbContext.Database.EnsureCreated(). EnsureCreated does not use migrations\n   to create the database and therefore the database that is created cannot be later updated using migrations.\n</p>\n"
  example: []
  syntax:
    content: public static Task MigrateAsync(this DatabaseFacade databaseFacade, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MigrateAsync(databaseFacade As DatabaseFacade, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
      description: 'The <xref href="Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" data-throw-if-not-resolved="false"></xref> for the context. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the task to complete. '
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the asynchronous migration operation. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])
  id: ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlCommand(DatabaseFacade, String, Object[])
  nameWithType: RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(DatabaseFacade, String, Object[])
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteSqlCommand
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 104
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static int ExecuteSqlCommand(this DatabaseFacade databaseFacade, string sql, params object[] parameters)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteSqlCommand(databaseFacade As DatabaseFacade, sql As String, ParamArray parameters As Object()) As Integer
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    - id: sql
      type: System.String
    - id: parameters
      type: System.Object[]
    return:
      type: System.Int32
  nameWithType.vb: RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(DatabaseFacade, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommand(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.String, System.Object())
  name.vb: ExecuteSqlCommand(DatabaseFacade, String, Object())
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Threading.CancellationToken,System.Object[])
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Threading.CancellationToken,System.Object[])
  id: ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Threading.CancellationToken,System.Object[])
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: ExecuteSqlCommandAsync(DatabaseFacade, String, CancellationToken, Object[])
  nameWithType: RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(DatabaseFacade, String, CancellationToken, Object[])
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.String, System.Threading.CancellationToken, System.Object[])
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecuteSqlCommandAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 128
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static Task<int> ExecuteSqlCommandAsync(this DatabaseFacade databaseFacade, string sql, CancellationToken cancellationToken = null, params object[] parameters)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ExecuteSqlCommandAsync(databaseFacade As DatabaseFacade, sql As String, cancellationToken As CancellationToken = Nothing, ParamArray parameters As Object()) As Task(Of Integer)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    - id: sql
      type: System.String
    - id: cancellationToken
      type: System.Threading.CancellationToken
    - id: parameters
      type: System.Object[]
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  nameWithType.vb: RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(DatabaseFacade, String, CancellationToken, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlCommandAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.String, System.Threading.CancellationToken, System.Object())
  name.vb: ExecuteSqlCommandAsync(DatabaseFacade, String, CancellationToken, Object())
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: GetDbConnection(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.GetDbConnection(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetDbConnection
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 153
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static DbConnection GetDbConnection(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDbConnection(databaseFacade As DatabaseFacade) As DbConnection
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    return:
      type: System.Data.Common.DbConnection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: OpenConnection(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.OpenConnection(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OpenConnection
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 156
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static void OpenConnection(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub OpenConnection(databaseFacade As DatabaseFacade)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  id: OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: OpenConnectionAsync(DatabaseFacade, CancellationToken)
  nameWithType: RelationalDatabaseFacadeExtensions.OpenConnectionAsync(DatabaseFacade, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OpenConnectionAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 160
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static Task OpenConnectionAsync(this DatabaseFacade databaseFacade, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OpenConnectionAsync(databaseFacade As DatabaseFacade, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: CloseConnection(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.CloseConnection(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: CloseConnection
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 166
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static void CloseConnection(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub CloseConnection(databaseFacade As DatabaseFacade)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)
  id: BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: BeginTransaction(DatabaseFacade, IsolationLevel)
  nameWithType: RelationalDatabaseFacadeExtensions.BeginTransaction(DatabaseFacade, IsolationLevel)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BeginTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 169
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static IDbContextTransaction BeginTransaction(this DatabaseFacade databaseFacade, IsolationLevel isolationLevel)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginTransaction(databaseFacade As DatabaseFacade, isolationLevel As IsolationLevel) As IDbContextTransaction
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    - id: isolationLevel
      type: System.Data.IsolationLevel
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel,System.Threading.CancellationToken)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel,System.Threading.CancellationToken)
  id: BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel,System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: BeginTransactionAsync(DatabaseFacade, IsolationLevel, CancellationToken)
  nameWithType: RelationalDatabaseFacadeExtensions.BeginTransactionAsync(DatabaseFacade, IsolationLevel, CancellationToken)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Data.IsolationLevel, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: BeginTransactionAsync
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 181
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static Task<IDbContextTransaction> BeginTransactionAsync(this DatabaseFacade databaseFacade, IsolationLevel isolationLevel, CancellationToken cancellationToken = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeginTransactionAsync(databaseFacade As DatabaseFacade, isolationLevel As IsolationLevel, cancellationToken As CancellationToken = Nothing) As Task(Of IDbContextTransaction)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    - id: isolationLevel
      type: System.Data.IsolationLevel
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction)
  id: UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: UseTransaction(DatabaseFacade, DbTransaction)
  nameWithType: RelationalDatabaseFacadeExtensions.UseTransaction(DatabaseFacade, DbTransaction)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Data.Common.DbTransaction)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: UseTransaction
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 196
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static IDbContextTransaction UseTransaction(this DatabaseFacade databaseFacade, DbTransaction transaction)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UseTransaction(databaseFacade As DatabaseFacade, transaction As DbTransaction) As IDbContextTransaction
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    - id: transaction
      type: System.Data.Common.DbTransaction
    return:
      type: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Nullable{System.Int32})
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Nullable{System.Int32})
  id: SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Nullable{System.Int32})
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: SetCommandTimeout(DatabaseFacade, Nullable<Int32>)
  nameWithType: RelationalDatabaseFacadeExtensions.SetCommandTimeout(DatabaseFacade, Nullable<Int32>)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Nullable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SetCommandTimeout
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 211
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static void SetCommandTimeout(this DatabaseFacade databaseFacade, int ? timeout)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetCommandTimeout(databaseFacade As DatabaseFacade, timeout As Integer?)
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    - id: timeout
      type: System.Nullable{System.Int32}
  nameWithType.vb: RelationalDatabaseFacadeExtensions.SetCommandTimeout(DatabaseFacade, Nullable(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade, System.Nullable(Of System.Int32))
  name.vb: SetCommandTimeout(DatabaseFacade, Nullable(Of Int32))
- uid: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  commentId: M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  id: GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions
  langs:
  - csharp
  - vb
  name: GetCommandTimeout(DatabaseFacade)
  nameWithType: RelationalDatabaseFacadeExtensions.GetCommandTimeout(DatabaseFacade)
  fullName: Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: GetCommandTimeout
    path: src/Microsoft.EntityFrameworkCore.Relational/RelationalDatabaseFacadeExtensions.cs
    startLine: 214
  assemblies:
  - Microsoft.EntityFrameworkCore.Relational
  namespace: Microsoft.EntityFrameworkCore
  syntax:
    content: public static int ? GetCommandTimeout(this DatabaseFacade databaseFacade)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetCommandTimeout(databaseFacade As DatabaseFacade) As Integer?
    parameters:
    - id: databaseFacade
      type: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
    return:
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
  commentId: T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
  parent: Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: DatabaseFacade
  nameWithType: DatabaseFacade
  fullName: Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade
- uid: Microsoft.EntityFrameworkCore.Infrastructure
  commentId: N:Microsoft.EntityFrameworkCore.Infrastructure
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Infrastructure
  nameWithType: Microsoft.EntityFrameworkCore.Infrastructure
  fullName: Microsoft.EntityFrameworkCore.Infrastructure
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<String>>
  nameWithType: Task<IEnumerable<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.String>>
  nameWithType.vb: Task(Of IEnumerable(Of String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Task(Of IEnumerable(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbConnection
  commentId: T:System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: true
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: false
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System.Data.IsolationLevel
  commentId: T:System.Data.IsolationLevel
  parent: System.Data
  isExternal: true
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  commentId: T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: IDbContextTransaction
  nameWithType: IDbContextTransaction
  fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
- uid: System.Data
  commentId: N:System.Data
  isExternal: false
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
  commentId: T:System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDbContextTransaction>
  nameWithType: Task<IDbContextTransaction>
  fullName: System.Threading.Tasks.Task<Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction>
  nameWithType.vb: Task(Of IDbContextTransaction)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)
  name.vb: Task(Of IDbContextTransaction)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
    name: IDbContextTransaction
    nameWithType: IDbContextTransaction
    fullName: Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbTransaction
  commentId: T:System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: true
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
