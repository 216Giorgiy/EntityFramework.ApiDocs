### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  id: ExecutionStrategyContext
  parent: Microsoft.EntityFrameworkCore.Storage
  children:
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy})
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Context
  - Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Logger
  langs:
  - csharp
  - vb
  name: ExecutionStrategyContext
  nameWithType: ExecutionStrategyContext
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ExecutionStrategyContext
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
    startLine: 12
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    A class that provides dependencies for <xref href=\"Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public class ExecutionStrategyContext
    content.vb: Public Class ExecutionStrategyContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy})
  commentId: M:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy})
  id: '#ctor(Microsoft.EntityFrameworkCore.DbContext,Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy})'
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  langs:
  - csharp
  - vb
  name: ExecutionStrategyContext(DbContext, ILogger<IExecutionStrategy>)
  nameWithType: ExecutionStrategyContext.ExecutionStrategyContext(DbContext, ILogger<IExecutionStrategy>)
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.ExecutionStrategyContext(Microsoft.EntityFrameworkCore.DbContext, Microsoft.Extensions.Logging.ILogger<Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    Creates a new instance of <xref href=\"Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ExecutionStrategyContext(DbContext context, ILogger<IExecutionStrategy> logger)
    content.vb: Public Sub New(context As DbContext, logger As ILogger(Of IExecutionStrategy))
    parameters:
    - id: context
      type: Microsoft.EntityFrameworkCore.DbContext
      description: The context on which the operations will be invoked.
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy}
      description: The logger to be used.
  nameWithType.vb: ExecutionStrategyContext.ExecutionStrategyContext(DbContext, ILogger(Of IExecutionStrategy))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.ExecutionStrategyContext(Microsoft.EntityFrameworkCore.DbContext, Microsoft.Extensions.Logging.ILogger(Of Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy))
  name.vb: ExecutionStrategyContext(DbContext, ILogger(Of IExecutionStrategy))
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Context
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Context
  id: Context
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  langs:
  - csharp
  - vb
  name: Context
  nameWithType: ExecutionStrategyContext.Context
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Context
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Context
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
    startLine: 30
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The context on which the operations will be invoked.\n"
  example: []
  syntax:
    content: public virtual DbContext Context { get; }
    content.vb: Public Overridable ReadOnly Property Context As DbContext
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.DbContext
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Logger
  commentId: P:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Logger
  id: Logger
  parent: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: ExecutionStrategyContext.Logger
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext.Logger
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Logger
    path: src/Microsoft.EntityFrameworkCore/Storage/ExecutionStrategyContext.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Storage
  summary: "\n    The logger for the <xref href=\"Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual ILogger<IExecutionStrategy> Logger { get; }
    content.vb: Public Overridable ReadOnly Property Logger As ILogger(Of IExecutionStrategy)
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy}
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ExecutionStrategy
  nameWithType: ExecutionStrategy
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ExecutionStrategyContext
  nameWithType: ExecutionStrategyContext
  fullName: Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyContext
- uid: Microsoft.EntityFrameworkCore.DbContext
  commentId: T:Microsoft.EntityFrameworkCore.DbContext
  parent: Microsoft.EntityFrameworkCore
  isExternal: false
  name: DbContext
  nameWithType: DbContext
  fullName: Microsoft.EntityFrameworkCore.DbContext
- uid: Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy}
  commentId: T:Microsoft.Extensions.Logging.ILogger{Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<IExecutionStrategy>
  nameWithType: ILogger<IExecutionStrategy>
  fullName: Microsoft.Extensions.Logging.ILogger<Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy>
  nameWithType.vb: ILogger(Of IExecutionStrategy)
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy)
  name.vb: ILogger(Of IExecutionStrategy)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
    name: IExecutionStrategy
    nameWithType: IExecutionStrategy
    fullName: Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullname.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: false
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
