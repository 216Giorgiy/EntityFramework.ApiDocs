### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  commentId: T:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  id: EntityLoadInfo
  parent: Microsoft.EntityFrameworkCore.Query
  children:
  - Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})
  - Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.Materialize
  - Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.ValueBuffer
  langs:
  - csharp
  - vb
  name: EntityLoadInfo
  nameWithType: EntityLoadInfo
  fullName: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  type: Struct
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: EntityLoadInfo
    path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
    startLine: 19
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n<p>\n    Information required to create an instance of an entity based on a row of data returned from a query.\n</p>\n<p>\n    This type is typically used by database providers (and other extensions). It is generally\n    not used in application code.\n</p>\n"
  example: []
  syntax:
    content: public struct EntityLoadInfo
    content.vb: Public Structure EntityLoadInfo
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})
  id: '#ctor(Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object})'
  parent: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  langs:
  - csharp
  - vb
  name: EntityLoadInfo(ValueBuffer, Func<ValueBuffer, Object>)
  nameWithType: EntityLoadInfo.EntityLoadInfo(ValueBuffer, Func<ValueBuffer, Object>)
  fullName: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.EntityLoadInfo(Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Func<Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object>)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: .ctor
    path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
    startLine: 28
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Initializes a new instance of the <xref href=\"Microsoft.EntityFrameworkCore.Query.EntityLoadInfo\" data-throw-if-not-resolved=\"false\"></xref> struct.\n"
  example: []
  syntax:
    content: public EntityLoadInfo(ValueBuffer valueBuffer, Func<ValueBuffer, object> materializer)
    content.vb: Public Sub New(valueBuffer As ValueBuffer, materializer As Func(Of ValueBuffer, Object))
    parameters:
    - id: valueBuffer
      type: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
      description: 'The row of data that represents this entity. '
    - id: materializer
      type: System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object}
      description: 'The method to materialize the data into an entity instance. '
  nameWithType.vb: EntityLoadInfo.EntityLoadInfo(ValueBuffer, Func(Of ValueBuffer, Object))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.EntityLoadInfo(Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Func(Of Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object))
  name.vb: EntityLoadInfo(ValueBuffer, Func(Of ValueBuffer, Object))
- uid: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.ValueBuffer
  commentId: P:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.ValueBuffer
  id: ValueBuffer
  parent: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  langs:
  - csharp
  - vb
  name: ValueBuffer
  nameWithType: EntityLoadInfo.ValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.ValueBuffer
  type: Property
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ValueBuffer
    path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n    Gets the row of data that represents this entity.\n"
  example: []
  syntax:
    content: public ValueBuffer ValueBuffer { get; }
    content.vb: Public ReadOnly Property ValueBuffer As ValueBuffer
    parameters: []
    return:
      type: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.Materialize
  commentId: M:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.Materialize
  id: Materialize
  parent: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  langs:
  - csharp
  - vb
  name: Materialize()
  nameWithType: EntityLoadInfo.Materialize()
  fullName: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo.Materialize()
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: Materialize
    path: src/Microsoft.EntityFrameworkCore/Query/EntityLoadInfo.cs
    startLine: 47
  assemblies:
  - Microsoft.EntityFrameworkCore
  namespace: Microsoft.EntityFrameworkCore.Query
  summary: "\n     Materializes the data into an entity instance.\n"
  example: []
  syntax:
    content: public object Materialize()
    content.vb: Public Function Materialize As Object
    return:
      type: System.Object
      description: 'The entity instance. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.EntityFrameworkCore.Query
  commentId: N:Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Query
  nameWithType: Microsoft.EntityFrameworkCore.Query
  fullName: Microsoft.EntityFrameworkCore.Query
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  commentId: T:Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
  parent: Microsoft.EntityFrameworkCore.Query
  isExternal: false
  name: EntityLoadInfo
  nameWithType: EntityLoadInfo
  fullName: Microsoft.EntityFrameworkCore.Query.EntityLoadInfo
- uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  commentId: T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  parent: Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: ValueBuffer
  nameWithType: ValueBuffer
  fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
- uid: System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object}
  commentId: T:System.Func{Microsoft.EntityFrameworkCore.Storage.ValueBuffer,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<ValueBuffer, Object>
  nameWithType: Func<ValueBuffer, Object>
  fullName: System.Func<Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object>
  nameWithType.vb: Func(Of ValueBuffer, Object)
  fullname.vb: System.Func(Of Microsoft.EntityFrameworkCore.Storage.ValueBuffer, System.Object)
  name.vb: Func(Of ValueBuffer, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
    name: ValueBuffer
    nameWithType: ValueBuffer
    fullName: Microsoft.EntityFrameworkCore.Storage.ValueBuffer
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Storage
  commentId: N:Microsoft.EntityFrameworkCore.Storage
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Storage
  nameWithType: Microsoft.EntityFrameworkCore.Storage
  fullName: Microsoft.EntityFrameworkCore.Storage
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
