### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  commentId: T:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  id: IFileService
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  children:
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
  - Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
  langs:
  - csharp
  - vb
  name: IFileService
  nameWithType: IFileService
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  type: Interface
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IFileService
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
    startLine: 11
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: public interface IFileService
    content.vb: Public Interface IFileService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  id: DirectoryExists(System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  langs:
  - csharp
  - vb
  name: DirectoryExists(String)
  nameWithType: IFileService.DirectoryExists(String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: DirectoryExists
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
    startLine: 17
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: bool DirectoryExists(string directoryName)
    content.vb: Function DirectoryExists(directoryName As String) As Boolean
    parameters:
    - id: directoryName
      type: System.String
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists*
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String,System.String)
  id: FileExists(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  langs:
  - csharp
  - vb
  name: FileExists(String, String)
  nameWithType: IFileService.FileExists(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: FileExists
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: bool FileExists(string directoryName, string fileName)
    content.vb: Function FileExists(directoryName As String, fileName As String) As Boolean
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists*
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String,System.String)
  id: IsFileReadOnly(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  langs:
  - csharp
  - vb
  name: IsFileReadOnly(String, String)
  nameWithType: IFileService.IsFileReadOnly(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: IsFileReadOnly
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
    startLine: 29
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: bool IsFileReadOnly(string directoryName, string fileName)
    content.vb: Function IsFileReadOnly(directoryName As String, fileName As String) As Boolean
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    return:
      type: System.Boolean
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly*
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String,System.String,System.String)
  id: OutputFile(System.String,System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  langs:
  - csharp
  - vb
  name: OutputFile(String, String, String)
  nameWithType: IFileService.OutputFile(String, String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: OutputFile
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
    startLine: 35
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: string OutputFile(string directoryName, string fileName, string contents)
    content.vb: Function OutputFile(directoryName As String, fileName As String, contents As String) As String
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    - id: contents
      type: System.String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile*
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String,System.String)
  id: RetrieveFileContents(System.String,System.String)
  parent: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService
  langs:
  - csharp
  - vb
  name: RetrieveFileContents(String, String)
  nameWithType: IFileService.RetrieveFileContents(String, String)
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: RetrieveFileContents
    path: src/Microsoft.EntityFrameworkCore.Design/Scaffolding/Internal/IFileService.cs
    startLine: 41
  assemblies:
  - Microsoft.EntityFrameworkCore.Design
  namespace: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  summary: "\nThis API supports the Entity Framework Core infrastructure and is not intended to be used\ndirectly from your code. This API may change or be removed in future releases.\n"
  example: []
  syntax:
    content: string RetrieveFileContents(string directoryName, string fileName)
    content.vb: Function RetrieveFileContents(directoryName As String, fileName As String) As String
    parameters:
    - id: directoryName
      type: System.String
    - id: fileName
      type: System.String
    return:
      type: System.String
  overload: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents*
references:
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  commentId: N:Microsoft.EntityFrameworkCore.Scaffolding.Internal
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  nameWithType: Microsoft.EntityFrameworkCore.Scaffolding.Internal
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists
  isExternal: false
  name: DirectoryExists
  nameWithType: IFileService.DirectoryExists
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.DirectoryExists
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists
  isExternal: false
  name: FileExists
  nameWithType: IFileService.FileExists
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.FileExists
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly
  isExternal: false
  name: IsFileReadOnly
  nameWithType: IFileService.IsFileReadOnly
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.IsFileReadOnly
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile
  isExternal: false
  name: OutputFile
  nameWithType: IFileService.OutputFile
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.OutputFile
- uid: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents*
  commentId: Overload:Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents
  isExternal: false
  name: RetrieveFileContents
  nameWithType: IFileService.RetrieveFileContents
  fullName: Microsoft.EntityFrameworkCore.Scaffolding.Internal.IFileService.RetrieveFileContents
