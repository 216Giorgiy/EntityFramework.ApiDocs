### YamlMime:ManagedReference
items:
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  commentId: T:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  id: SqlitePropertyBuilderExtensions
  parent: Microsoft.EntityFrameworkCore
  children:
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  - Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  langs:
  - csharp
  - vb
  name: SqlitePropertyBuilderExtensions
  nameWithType: SqlitePropertyBuilderExtensions
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  type: Class
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: SqlitePropertyBuilderExtensions
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 15
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    SQLite specific extension methods for <xref href=\"Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class SqlitePropertyBuilderExtensions
    content.vb: Public Module SqlitePropertyBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  id: ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasColumnName(PropertyBuilder, String)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(PropertyBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasColumnName
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 23
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder ForSqliteHasColumnName(this PropertyBuilder propertyBuilder, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasColumnName(propertyBuilder As PropertyBuilder, name As String) As PropertyBuilder
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The builder for the property being configured. '
    - id: name
      type: System.String
      description: 'The name of the column. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  id: ForSqliteHasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasColumnName<TProperty>(PropertyBuilder<TProperty>, String)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasColumnName<TProperty>(PropertyBuilder<TProperty>, String)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName<TProperty>(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasColumnName
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 40
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder<TProperty> ForSqliteHasColumnName<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasColumnName(Of TProperty)(propertyBuilder As PropertyBuilder(Of TProperty), name As String) As PropertyBuilder(Of TProperty)
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The builder for the property being configured. '
    - id: name
      type: System.String
      description: 'The name of the column. '
    typeParameters:
    - id: TProperty
      description: 'The type of the property being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Of TProperty)(PropertyBuilder(Of TProperty), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnName(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty), System.String)
  name.vb: ForSqliteHasColumnName(Of TProperty)(PropertyBuilder(Of TProperty), String)
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  id: ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasColumnType(PropertyBuilder, String)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(PropertyBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasColumnType
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 51
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the data type of the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder ForSqliteHasColumnType(this PropertyBuilder propertyBuilder, string type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasColumnType(propertyBuilder As PropertyBuilder, type As String) As PropertyBuilder
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The builder for the property being configured. '
    - id: type
      type: System.String
      description: 'The name of the data type of the column. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  id: ForSqliteHasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasColumnType<TProperty>(PropertyBuilder<TProperty>, String)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasColumnType<TProperty>(PropertyBuilder<TProperty>, String)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType<TProperty>(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasColumnType
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 68
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the data type of the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder<TProperty> ForSqliteHasColumnType<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasColumnType(Of TProperty)(propertyBuilder As PropertyBuilder(Of TProperty), type As String) As PropertyBuilder(Of TProperty)
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The builder for the property being configured. '
    - id: type
      type: System.String
      description: 'The name of the data type of the column. '
    typeParameters:
    - id: TProperty
      description: 'The type of the property being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Of TProperty)(PropertyBuilder(Of TProperty), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasColumnType(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty), System.String)
  name.vb: ForSqliteHasColumnType(Of TProperty)(PropertyBuilder(Of TProperty), String)
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  id: ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasDefaultValueSql(PropertyBuilder, String)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(PropertyBuilder, String)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasDefaultValueSql
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 79
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the default value expression for the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder ForSqliteHasDefaultValueSql(this PropertyBuilder propertyBuilder, string sql)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasDefaultValueSql(propertyBuilder As PropertyBuilder, sql As String) As PropertyBuilder
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The builder for the property being configured. '
    - id: sql
      type: System.String
      description: 'The SQL expression for the default value of the column. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  id: ForSqliteHasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasDefaultValueSql<TProperty>(PropertyBuilder<TProperty>, String)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql<TProperty>(PropertyBuilder<TProperty>, String)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql<TProperty>(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>, System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasDefaultValueSql
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 104
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the default value expression for the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder<TProperty> ForSqliteHasDefaultValueSql<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string sql)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasDefaultValueSql(Of TProperty)(propertyBuilder As PropertyBuilder(Of TProperty), sql As String) As PropertyBuilder(Of TProperty)
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The builder for the property being configured. '
    - id: sql
      type: System.String
      description: 'The SQL expression for the default value of the column. '
    typeParameters:
    - id: TProperty
      description: 'The type of the property being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Of TProperty)(PropertyBuilder(Of TProperty), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValueSql(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty), System.String)
  name.vb: ForSqliteHasDefaultValueSql(Of TProperty)(PropertyBuilder(Of TProperty), String)
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)
  id: ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasDefaultValue(PropertyBuilder, Object)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(PropertyBuilder, Object)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasDefaultValue
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 115
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the default value for the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder ForSqliteHasDefaultValue(this PropertyBuilder propertyBuilder, object value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasDefaultValue(propertyBuilder As PropertyBuilder, value As Object) As PropertyBuilder
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The builder for the property being configured. '
    - id: value
      type: System.Object
      description: 'The default value of the column. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
      description: 'The same builder instance so that multiple calls can be chained. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)
  commentId: M:Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)
  id: ForSqliteHasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)
  isExtensionMethod: true
  parent: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions
  langs:
  - csharp
  - vb
  name: ForSqliteHasDefaultValue<TProperty>(PropertyBuilder<TProperty>, Object)
  nameWithType: SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue<TProperty>(PropertyBuilder<TProperty>, Object)
  fullName: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue<TProperty>(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
      branch: dev
      repo: https://github.com/aspnet/EntityFramework.git
    id: ForSqliteHasDefaultValue
    path: src/Microsoft.EntityFrameworkCore.Sqlite/Metadata/Builders/SqlitePropertyBuilderExtensions.cs
    startLine: 139
  assemblies:
  - Microsoft.EntityFrameworkCore.Sqlite
  namespace: Microsoft.EntityFrameworkCore
  summary: "\n    Configures the default value for the column that the property maps to when targeting SQLite.\n"
  example: []
  syntax:
    content: public static PropertyBuilder<TProperty> ForSqliteHasDefaultValue<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, object value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ForSqliteHasDefaultValue(Of TProperty)(propertyBuilder As PropertyBuilder(Of TProperty), value As Object) As PropertyBuilder(Of TProperty)
    parameters:
    - id: propertyBuilder
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The builder for the property being configured. '
    - id: value
      type: System.Object
      description: 'The default value of the column. '
    typeParameters:
    - id: TProperty
      description: 'The type of the property being configured. '
    return:
      type: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
      description: 'The same builder instance so that multiple calls can be chained. '
  nameWithType.vb: SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Of TProperty)(PropertyBuilder(Of TProperty), Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.EntityFrameworkCore.SqlitePropertyBuilderExtensions.ForSqliteHasDefaultValue(Of TProperty)(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty), System.Object)
  name.vb: ForSqliteHasDefaultValue(Of TProperty)(PropertyBuilder(Of TProperty), Object)
references:
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: PropertyBuilder
  nameWithType: PropertyBuilder
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
- uid: Microsoft.EntityFrameworkCore
  commentId: N:Microsoft.EntityFrameworkCore
  isExternal: false
  name: Microsoft.EntityFrameworkCore
  nameWithType: Microsoft.EntityFrameworkCore
  fullName: Microsoft.EntityFrameworkCore
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders
  commentId: N:Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: Microsoft.EntityFrameworkCore.Metadata.Builders
  nameWithType: Microsoft.EntityFrameworkCore.Metadata.Builders
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{{TProperty}}
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0}
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  definition: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
  name: PropertyBuilder<TProperty>
  nameWithType: PropertyBuilder<TProperty>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>
  nameWithType.vb: PropertyBuilder(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty)
  name.vb: PropertyBuilder(Of TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
  commentId: T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
  parent: Microsoft.EntityFrameworkCore.Metadata.Builders
  isExternal: false
  name: PropertyBuilder<TProperty>
  nameWithType: PropertyBuilder<TProperty>
  fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder<TProperty>
  nameWithType.vb: PropertyBuilder(Of TProperty)
  fullname.vb: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder(Of TProperty)
  name.vb: PropertyBuilder(Of TProperty)
  spec.csharp:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1
    name: PropertyBuilder
    nameWithType: PropertyBuilder
    fullName: Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TProperty
    nameWithType: TProperty
    fullName: TProperty
  - name: )
    nameWithType: )
    fullName: )
